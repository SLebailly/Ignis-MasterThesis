// TODO: Implement "A null-scattering path integral formulation of light transport", (Miller et. al, 2019)
fn @make_volume_path_renderer(max_path_len: i32, _min_path_len: i32, light_selector: LightSelector, media: MediaTable, framebuffer: AOVImage, clamp_value: f32, enable_nee: bool) -> Technique {
    let offset : f32 = 0.001;

    let handle_color = if clamp_value > 0 {
        @|c: Color| color_saturate(c, clamp_value)
    } else {
        @|c: Color| c
    };

    fn @get_medium(ctx: ShadingContext, id: i32) -> Medium {
        let gen = @media(id);
        gen(ctx)
    }

    fn @on_shadow( ctx: ShadingContext
                 , rnd: RandomGenerator
                 , payload: RayPayload
                 , _: RayPayload
                 , mat: Material
                 ) -> ShadowRay {
        if !enable_nee {
            return(ShadowRay::None)
        }

        // No shadow rays for specular materials
        if mat.bsdf.is_specular || light_selector.count == 0 {
            return(ShadowRay::None)
        }
        
        let pt = unwrap_vptraypayload(payload);
        if pt.depth + 1 > max_path_len {
            return(ShadowRay::None)
        }

        let (light, light_select_pdf) = light_selector.sample(rnd, ctx.surf.point);
        
        let sample_direct = light.sample_direct;
        let light_sample  = @sample_direct(rnd, ctx.surf);
        
        let was_medium_interaction = math_builtins::signbit(pt.inv_pdf);
        let medium = get_medium(ctx, pt.medium);
        let hitvol = medium.eval(rnd, ctx.ray.org, ctx.surf.point); // Volume transmittance from ray origin to this hit point

        let pdf_l_s = light_sample.pdf.as_solid(light_sample.cos, light_sample.dist * light_sample.dist) * light_select_pdf;
        if pdf_l_s <= flt_eps {
            return(ShadowRay::None)
        }

        let in_dir  = light_sample.dir;
        let out_dir = vec3_neg(ctx.ray.dir);

        // TODO: Secondary rays do not take "passthrough" surface + media into account. Would be useful to add transmittance into account...
        if light_sample.cos > flt_eps {
            let mis = if light.delta || was_medium_interaction { 
                1:f32
            } else {
                let pdf_e_s = mat.bsdf.pdf(in_dir, out_dir); // Pdf to sample the light based on bsdf
                1 / (1 + pdf_e_s / pdf_l_s)
            };

            // The intensity is already divided by the pdf, adapt to the (possible) change of domain
            let factor = light_sample.pdf.value / pdf_l_s;

            let contrib = handle_color(color_mulf(
                color_mul(light_sample.intensity, color_mul(pt.contrib, mat.bsdf.eval(in_dir, out_dir))), mis * factor));

            if light.infinite {
                let vol = color_mul(hitvol, medium.eval_inf(ctx.surf.point, in_dir));
                return(make_simple_shadow_ray(
                    make_ray(ctx.surf.point, in_dir, offset, flt_max, ray_flag_shadow),
                    color_mul(contrib, vol)
                ))
            } else {
                let ld  = vec3_sub(light_sample.pos, ctx.surf.point);
                let vol = color_mul(hitvol, medium.eval(rnd, ctx.surf.point, light_sample.pos));
                return(make_simple_shadow_ray(
                    make_ray(ctx.surf.point, ld, offset, 1 - offset, ray_flag_shadow),
                    color_mul(contrib, vol)
                ))
            }
        }   
        ShadowRay::None
    }

    fn @on_hit( ctx: ShadingContext
              , payload: RayPayload
              , mat: Material
              ) -> Option[Color] {
        let pt = unwrap_vptraypayload(payload);
        
        // Hits on a light source
        if mat.is_emissive && ctx.surf.is_entering/* && pt.depth == 1*/ {
            let medium = get_medium(ctx, pt.medium);
            let dot    = -vec3_dot(ctx.ray.dir, ctx.surf.local.col(2));
            if dot > flt_eps { // Only contribute proper aligned directions
                let emit     = mat.emission(ctx);
                let inv_pdf  = math_builtins::fmax[f32](0/*Ignore medium interactions*/, pt.inv_pdf);
                let pdf_s    = emit.pdf.as_solid(dot, ctx.hit.distance * ctx.hit.distance);
                let mis      = if enable_nee { 1 / (1 + inv_pdf * light_selector.pdf(mat.light, ctx.ray.org) * pdf_s) } else { 1:f32 };

                let mut hash = hash_init();
                hash = hash_combine(hash, ctx.ray.org.x as u32);
                hash = hash_combine(hash, ctx.ray.org.y as u32);
                hash = hash_combine(hash, ctx.ray.org.z as u32);
                hash = hash_combine(hash, ctx.surf.point.x as u32);
                hash = hash_combine(hash, ctx.surf.point.y as u32);
                hash = hash_combine(hash, ctx.surf.point.z as u32);

                let vol      = medium.eval(create_random_generator(hash), ctx.ray.org, ctx.surf.point);
                let contrib  = handle_color(color_mulf(color_mul(pt.contrib, color_mul(emit.intensity, vol)), mis));
                
                return(make_option(contrib))
            }
        }
        Option[Color]::None
    }

    fn @on_miss( ctx: ShadingContext
               , payload: RayPayload) -> Option[Color] {

        let mut inflights = 0;
        let mut color     = color_builtins::black;
        
        let pt     = unwrap_vptraypayload(payload);
        let medium = get_medium(ctx, pt.medium);
        /*
        if pt.depth == 1 {
            return(Option[Color]::None)
        }
        */

        for light_id in safe_unroll(0, light_selector.infinites.count) {
            let light = light_selector.infinites.get(light_id);
            // Do not include delta lights or finite lights
            if light.infinite && !light.delta {
                inflights += 1;

                let emit  = light.emission(ctx);
                let pdf   = light.pdf_direct(ctx.ray, make_invalid_surface_element());
                let pdf_s = pdf.as_solid(1, 1/* We assume infinite lights are always given in solid angle measure */);
                let mis   = if enable_nee { 1 / (1 + math_builtins::fmax[f32](0/*Ignore medium interactions*/, pt.inv_pdf) * light_selector.pdf(light, ctx.ray.org) * pdf_s) } else { 1:f32 };
                let vol   = medium.eval_inf(ctx.ray.org, ctx.ray.dir);
                color     = color_add(color, handle_color(color_mulf(color_mul(pt.contrib, color_mul(emit, vol)), mis)));
            }
        }

        if inflights > 0 {
            make_option(color)
        } else {
            Option[Color]::None
        }
    }

    fn @on_bounce( ctx: ShadingContext
                 , rnd: RandomGenerator
                 , payload: RayPayload
                 , mat: Material
                 ) -> Option[Ray] {
        let pt      = unwrap_vptraypayload(payload);
        let medium  = get_medium(ctx, pt.medium);
        let out_dir = vec3_neg(ctx.ray.dir);
        
        if pt.depth + 1 > max_path_len {
            return(Option[Ray]::None)
        }

        if pt.voldepth + 1 > medium.max_scattering {
            // Only account for attenuated background radiance instead of scattering (= deterministically choose null-scattering at every potential event, which is equivalent to estimating the transmittance using ratio tracking).
            if let Option[BsdfSample]::Some(bsdf_sample) = mat.bsdf.sample(rnd, out_dir, false) {
                let vol_trans = medium.eval(rnd, ctx.ray.org, ctx.surf.point);
                return(onSurfaceBounce(ctx, rnd, payload, pt, mat, bsdf_sample, vol_trans, offset))
            } else {
                return(Option[Ray]::None)
            }
        } 

        // Next flight estimation
        if let Option[MediumSample]::Some(medium_sample) = medium.sample(rnd, ctx.ray.org, ctx.surf.point) {
            // Next Flight returned a distance inside the medium
            onMediumBounce(ctx, rnd, payload, pt, framebuffer, medium_sample, medium, out_dir)
        } else {
            // Next Flight returned a distance outside the medium -> hit the surface
            if let Option[BsdfSample]::Some(bsdf_sample) = mat.bsdf.sample(rnd, out_dir, false) {
                let vol_trans = color_builtins::white; // (majorant) Tr(t) / pdf(t > d) = 1
                onSurfaceBounce(ctx, rnd, payload, pt, mat, bsdf_sample, vol_trans, offset)
            } else {
                Option[Ray]::None
            }
        }
    }

    Technique {
        on_hit         = on_hit,
        on_miss        = on_miss,
        on_shadow      = on_shadow,
        on_bounce      = on_bounce,
        on_shadow_hit  = TechniqueNoShadowHitFunction,
        on_shadow_miss = TechniqueNoShadowMissFunction,
    }
}
