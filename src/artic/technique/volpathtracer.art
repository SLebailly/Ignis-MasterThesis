// TODO: Implement "A null-scattering path integral formulation of light transport", (Miller et. al, 2019)
fn @make_volume_path_renderer(max_path_len: i32, _min_path_len: i32, light_selector: LightSelector, media: MediaTable, framebuffer: AOVImage, clamp_value: f32, enable_nee: bool) -> Technique {
    let offset : f32 = 0.001;

    let handle_color = if clamp_value > 0 {
        @|c: Color| color_saturate(c, clamp_value)
    } else {
        @|c: Color| c
    };

    fn @get_medium(ctx: ShadingContext, id: i32) -> Medium {
        let gen = @media(id);
        gen(ctx)
    }

    fn @on_shadow( ctx: ShadingContext
                 , rnd: RandomGenerator
                 , payload: RayPayload
                 , _: RayPayload
                 , mat: Material
                 ) -> ShadowRay {
        if !enable_nee {
            return(ShadowRay::None)
        }

        // No shadow rays for specular materials
        if mat.bsdf.is_specular || light_selector.count == 0 {
            return(ShadowRay::None)
        }
        
        let pt = unwrap_vptraypayload(payload);
        if pt.depth + 1 > max_path_len {
            return(ShadowRay::None)
        }

        let (light, light_select_pdf) = light_selector.sample(rnd, ctx.surf.point);
        
        let sample_direct = light.sample_direct;
        let light_sample  = @sample_direct(rnd, ctx.surf);
        
        let was_medium_interaction = math_builtins::signbit(pt.inv_pdf);
        let medium = get_medium(ctx, pt.medium);
        let hitvol = medium.eval(rnd, ctx.ray.org, ctx.surf.point); // Volume transmittance from ray origin to this hit point

        let pdf_l_s = light_sample.pdf.as_solid(light_sample.cos, light_sample.dist * light_sample.dist) * light_select_pdf;
        if pdf_l_s <= flt_eps {
            return(ShadowRay::None)
        }

        let in_dir  = light_sample.dir;
        let out_dir = vec3_neg(ctx.ray.dir);

        // TODO: Secondary rays do not take "passthrough" surface + media into account. Would be useful to add transmittance into account...
        if light_sample.cos > flt_eps {
            let mis = if light.delta || was_medium_interaction { 
                1:f32
            } else {
                let pdf_e_s = mat.bsdf.pdf(in_dir, out_dir); // Pdf to sample the light based on bsdf
                1 / (1 + pdf_e_s / pdf_l_s)
            };

            // The intensity is already divided by the pdf, adapt to the (possible) change of domain
            let factor = light_sample.pdf.value / pdf_l_s;

            let contrib = handle_color(color_mulf(
                color_mul(light_sample.intensity, color_mul(pt.contrib, mat.bsdf.eval(in_dir, out_dir))), mis * factor));

            if light.infinite {
                let vol = color_mul(hitvol, medium.eval_inf(ctx.surf.point, in_dir));
                return(make_simple_shadow_ray(
                    make_ray(ctx.surf.point, in_dir, offset, flt_max, ray_flag_shadow),
                    color_mul(contrib, vol)
                ))
            } else {
                let ld  = vec3_sub(light_sample.pos, ctx.surf.point);
                let vol = color_mul(hitvol, medium.eval(rnd, ctx.surf.point, light_sample.pos));
                return(make_simple_shadow_ray(
                    make_ray(ctx.surf.point, ld, offset, 1 - offset, ray_flag_shadow),
                    color_mul(contrib, vol)
                ))
            }
        }   
        ShadowRay::None
    }

    fn @on_hit( ctx: ShadingContext
              , payload: RayPayload
              , mat: Material
              ) -> Option[Color] {
        let pt = unwrap_vptraypayload(payload);
        
        // Hits on a light source
        if mat.is_emissive && ctx.surf.is_entering/* && pt.depth == 1*/ {
            let medium = get_medium(ctx, pt.medium);
            let dot    = -vec3_dot(ctx.ray.dir, ctx.surf.local.col(2));
            if dot > flt_eps { // Only contribute proper aligned directions
                let emit     = mat.emission(ctx);
                let inv_pdf  = math_builtins::fmax[f32](0/*Ignore medium interactions*/, pt.inv_pdf);
                let pdf_s    = emit.pdf.as_solid(dot, ctx.hit.distance * ctx.hit.distance);
                let mis      = if enable_nee { 1 / (1 + inv_pdf * light_selector.pdf(mat.light, ctx.ray.org) * pdf_s) } else { 1:f32 };

                let mut hash = hash_init();
                hash = hash_combine(hash, ctx.ray.org.x as u32);
                hash = hash_combine(hash, ctx.ray.org.y as u32);
                hash = hash_combine(hash, ctx.ray.org.z as u32);
                hash = hash_combine(hash, ctx.surf.point.x as u32);
                hash = hash_combine(hash, ctx.surf.point.y as u32);
                hash = hash_combine(hash, ctx.surf.point.z as u32);

                let vol      = medium.eval(create_random_generator(hash), ctx.ray.org, ctx.surf.point);
                let contrib  = handle_color(color_mulf(color_mul(pt.contrib, color_mul(emit.intensity, vol)), mis));
                
                return(make_option(contrib))
            }
        }
        Option[Color]::None
    }

    fn @on_miss( ctx: ShadingContext
               , payload: RayPayload) -> Option[Color] {

        let mut inflights = 0;
        let mut color     = color_builtins::black;
        
        let pt     = unwrap_vptraypayload(payload);
        let medium = get_medium(ctx, pt.medium);
        /*
        if pt.depth == 1 {
            return(Option[Color]::None)
        }
        */

        for light_id in safe_unroll(0, light_selector.infinites.count) {
            let light = light_selector.infinites.get(light_id);
            // Do not include delta lights or finite lights
            if light.infinite && !light.delta {
                inflights += 1;

                let emit  = light.emission(ctx);
                let pdf   = light.pdf_direct(ctx.ray, make_invalid_surface_element());
                let pdf_s = pdf.as_solid(1, 1/* We assume infinite lights are always given in solid angle measure */);
                let mis   = if enable_nee { 1 / (1 + math_builtins::fmax[f32](0/*Ignore medium interactions*/, pt.inv_pdf) * light_selector.pdf(light, ctx.ray.org) * pdf_s) } else { 1:f32 };
                let vol   = medium.eval_inf(ctx.ray.org, ctx.ray.dir);
                color     = color_add(color, handle_color(color_mulf(color_mul(pt.contrib, color_mul(emit, vol)), mis)));
            }
        }

        if inflights > 0 {
            make_option(color)
        } else {
            Option[Color]::None
        }
    }

    fn @on_bounce( ctx: ShadingContext
                 , rnd: RandomGenerator
                 , payload: RayPayload
                 , mat: Material
                 ) -> Option[Ray] {
        let mut pt  = unwrap_vptraypayload(payload);
        let medium  = get_medium(ctx, pt.medium);
        let out_dir = vec3_neg(ctx.ray.dir);
        
        if pt.depth + 1 > max_path_len {
            return(Option[Ray]::None)
        }

        fn @attenuated_background_radiance() -> Option[Ray] {
            // Only account for attenuated background radiance instead of scattering (= deterministically choose null-scattering at every potential event, which is equivalent to estimating the transmittance using ratio tracking).
            if let Option[BsdfSample]::Some(bsdf_sample) = mat.bsdf.sample(rnd, out_dir, false) {
                let vol_trans = medium.eval(rnd, ctx.ray.org, ctx.surf.point);
                let vol_contrib = color_mul(vol_trans, pt.contrib); // T * Lo
                let contrib     = color_mul(vol_contrib, bsdf_sample.color/* Pdf and cosine are already applied!*/);
                let rr_prob     = if mat.bsdf.is_specular { 1:f32 } else { russian_roulette_pbrt(color_mulf(contrib, pt.eta * pt.eta), 0.95) };
                
                if rnd.next_f32() >= rr_prob {
                    return(Option[Ray]::None)
                } else {
                    let inv_pdf     = if mat.bsdf.is_specular { 0 } else { 1:f32 / bsdf_sample.pdf };
                    let new_contrib = color_divf(contrib, rr_prob);
                    
                    let is_transmission = math_builtins::signbit(vec3_dot(ctx.surf.local.col(2), bsdf_sample.in_dir));
                    let (new_medium, newdepth, new_voldepth) = if is_transmission { (mat.interface.pick(ctx.surf.is_entering), pt.depth, 0) } else { (pt.medium, pt.depth + 1, pt.voldepth) };

                    write_vptraypayload(payload, VPTRayPayload {
                        inv_pdf  = inv_pdf,
                        contrib  = new_contrib,
                        depth    = newdepth, //workaround for not counting entering the medium as 1 bounce...
                        eta      = pt.eta * bsdf_sample.eta,
                        medium   = new_medium,
                        voldepth = new_voldepth
                    });
                    return(make_option(
                        make_ray(ctx.surf.point, bsdf_sample.in_dir, offset, flt_max, ray_flag_bounce)
                    ))
                }
            } else {
                return(Option[Ray]::None)
            }
        }

        if pt.voldepth + 1 > medium.max_scattering {
            // Only account for attenuated background radiance instead of scattering (= deterministically choose null-scattering at every potential event, which is equivalent to estimating the transmittance using ratio tracking).
            return(attenuated_background_radiance())
        }

        // Recursive definition of the medium scattering (only to compensate for null-scattering)
        // Note: The missing @ is intentional to prevent over-optimizing stuff... In a perfect world this should not be necessary...
        fn sample_rec(pos: Vec3) -> Option[Ray] {
            let medium_sample_opt = medium.sample(rnd, pos, ctx.surf.point);
            if let Option[MediumSample]::Some(medium_sample) = medium_sample_opt {
                // Next Flight returned a distance inside the medium
                let (p_a, p_s, p_f) = get_particle_event_probabilities(medium_sample.properties);
                let r = rnd.next_f32();
                if r < p_a {
                    // Absorption event
                    let emission    = color_mul(medium_sample.properties.coeff_absorption, medium_sample.properties.emitted_radiance); 
                    let new_contrib = color_divf(color_mul(medium_sample.color, emission), p_a); /* weighted with Pdf of absorption/emission event!*/
                
                    framebuffer.splat(ctx.pixel, color_mul(new_contrib, pt.contrib));
                    return(Option[Ray]::None)
                } else if r < p_a + p_s {
                    // Scattering event
                    let phase_sample  = medium.phase(medium_sample.pos).sample(rnd, out_dir); // sample new direction
                    let path_contrib  = color_mul(medium_sample.color, color_mulf(color_divf(medium_sample.properties.coeff_scattering, p_s), phase_sample.weight));
                    let contrib       = color_mul(pt.contrib, path_contrib);
    
                    let rr_prob      = russian_roulette_pbrt(color_mulf(contrib, pt.eta * pt.eta), 0.95);
    
                    if rnd.next_f32() >= rr_prob {
                        return(Option[Ray]::None)
                    } else {
                        let new_contrib = color_mulf(contrib, 1 / rr_prob);
                        // Notify other parts that the last interaction was a medium
                        let inv_pdf     = -1:f32; // 1 / (medium_sample.pdf * phase_sample.pdf); // TODO
                        write_vptraypayload(payload, VPTRayPayload {
                            inv_pdf  = inv_pdf,
                            contrib  = new_contrib,
                            depth    = pt.depth,
                            eta      = pt.eta,
                            medium   = pt.medium,
                            voldepth = pt.voldepth + 1
                        });
                        return(make_option(
                            make_ray(medium_sample.pos, phase_sample.in_dir, 0, flt_max, ray_flag_bounce)
                        ))
                    }
                } else {
                    // null-scattering event
                    let ls       = color_mul(medium_sample.properties.coeff_fictional, pt.contrib);
                    let contrib  = color_divf(color_mul(medium_sample.color, ls), p_f); // weight by  pdf
                
                    let inv_pdf  = -1:f32; // 1 / (medium_sample.pdf * phase_sample.pdf); // TODO
                    pt = pt.{
                        inv_pdf = inv_pdf,
                        contrib = contrib
                    };
                    $sample_rec(medium_sample.pos)
                }
            } else {
                // Next Flight returned a distance outside the medium -> hit the surface
                if let Option[BsdfSample]::Some(bsdf_sample) = mat.bsdf.sample(rnd, out_dir, false) {
                    let vol_trans = color_builtins::white; // (majorant) Tr(t) / pdf(t > d) = 1
                    let vol_contrib = color_mul(vol_trans, pt.contrib); // T * Lo
                    let contrib     = color_mul(vol_contrib, bsdf_sample.color/* Pdf and cosine are already applied!*/);
                    let rr_prob     = if mat.bsdf.is_specular { 1:f32 } else { russian_roulette_pbrt(color_mulf(contrib, pt.eta * pt.eta), 0.95) };
                    
                    if rnd.next_f32() >= rr_prob {
                        return(Option[Ray]::None)
                    } else {
                        let inv_pdf     = if mat.bsdf.is_specular { 0 } else { 1:f32 / bsdf_sample.pdf };
                        let new_contrib = color_divf(contrib, rr_prob);
                        
                        let is_transmission = math_builtins::signbit(vec3_dot(ctx.surf.local.col(2), bsdf_sample.in_dir));
                        let (new_medium, newdepth, new_voldepth) = if is_transmission { (mat.interface.pick(ctx.surf.is_entering), pt.depth, 0) } else { (pt.medium, pt.depth + 1, pt.voldepth) };

                        write_vptraypayload(payload, VPTRayPayload {
                            inv_pdf  = inv_pdf,
                            contrib  = new_contrib,
                            depth    = newdepth, //workaround for not counting entering the medium as 1 bounce...
                            eta      = pt.eta * bsdf_sample.eta,
                            medium   = new_medium,
                            voldepth = new_voldepth
                        });
                        return(make_option(
                            make_ray(ctx.surf.point, bsdf_sample.in_dir, offset, flt_max, ray_flag_bounce)
                        ))
                    }
                } else {
                    return(Option[Ray]::None)
                }
            }
        }
       
        sample_rec(ctx.ray.org)
    }

    Technique {
        on_hit         = on_hit,
        on_miss        = on_miss,
        on_shadow      = on_shadow,
        on_bounce      = on_bounce,
        on_shadow_hit  = TechniqueNoShadowHitFunction,
        on_shadow_miss = TechniqueNoShadowMissFunction,
    }
}
