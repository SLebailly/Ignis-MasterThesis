struct BorderHandling {
    horz: fn (f32) -> f32,
    vert: fn (f32) -> f32
}

type Texture     = fn (ShadingContext) -> Color;
type ImageFilter = fn (Image, Vec2) -> Color;

fn @make_clamp_border() -> BorderHandling {
    let clamp = @ |x: f32| math_builtins::fmin[f32](1, math_builtins::fmax[f32](0, x));
    BorderHandling {
        horz = clamp,
        vert = clamp
    }
}

fn @make_repeat_border() -> BorderHandling {
    let repeat = @ |x: f32| x - math_builtins::floor(x);
    BorderHandling {
        horz = repeat,
        vert = repeat
    }
}

fn @make_mirror_border() -> BorderHandling {
    let mirror = @ |x: f32| { if ((x as i32) % 2) == 0 { x - math_builtins::floor(x) } else { 1 - (x - math_builtins::floor(x)) } };
    BorderHandling {
        horz = mirror,
        vert = mirror
    }
}

fn @make_split_border(border_u: BorderHandling, border_v: BorderHandling) = BorderHandling {
    horz = border_u.horz,
    vert = border_v.vert
};

fn @make_nearest_filter() -> ImageFilter {
    @ |img, uv| {
        img.pixels(min((uv.x * img.width  as f32) as i32, img.width  - 1),
                   min((uv.y * img.height as f32) as i32, img.height - 1))
    }
}

fn @make_bilinear_filter() -> ImageFilter {
    @ |img, uv| {
        let u = uv.x * img.width as f32;
        let v = uv.y * img.height as f32;
        let x0 = min(u as i32, img.width  - 1);
        let y0 = min(v as i32, img.height - 1);
        let x1 = min(x0 + 1, img.width  - 1);
        let y1 = min(y0 + 1, img.height - 1);
        let kx = u - (u as i32 as f32);
        let ky = v - (v as i32 as f32);

        let p00 = img.pixels(x0, y0);
        let p10 = img.pixels(x1, y0);
        let p01 = img.pixels(x0, y1);
        let p11 = img.pixels(x1, y1);

        let interp = @ |x00: f32, x10: f32, x01: f32, x11: f32| lerp(lerp(x00, x10, kx), lerp(x01, x11, kx), ky);
        make_color(interp(p00.r, p10.r, p01.r, p11.r),
                   interp(p00.g, p10.g, p01.g, p11.g),
                   interp(p00.b, p10.b, p01.b, p11.b),
                   interp(p00.a, p10.a, p01.a, p11.a))
    }
}
