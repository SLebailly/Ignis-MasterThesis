
// Bottom level SBVH
struct PrimBvh {
    node:     fn (i32) -> Node, // Access to one node of the BVH
    prim:     fn (i32) -> Prim, // Access to one (possibly packed) primitive
    prefetch: fn (i32) -> (),   // Prefetches a leaf or inner node
    arity:    i32,              // Arity of the BVH (number of children per node)
}

type BVHTable = fn (i32) -> PrimBvh;

// Top level BVH
struct SceneBvh {
    node:     fn (i32) -> Node,       // Access to one node of the BVH
    ent:      fn (i32) -> EntityLeaf, // Access to one EntityLeaf
    prefetch: fn (i32) -> (),         // Prefetches a leaf or inner node
    arity:    i32,                    // Arity of the BVH (number of children per node)
}

struct Node {
    bbox:         fn (i32) -> BBox,             // Loads the bounding box of one child node
    ordered_bbox: fn (i32, RayOctant) -> BBox,  // Loads the bounding box of one child with the given octant order (mapping specific)
    child:        fn (i32) -> i32               // Gets the index of one child node
}

struct Prim {
    intersect: fn (i32, Ray) -> Option[Hit],    // Intersects a primitive in the packet
    is_valid:  fn (i32) -> bool,                            // Returns true if the primitive in the packet is valid
    is_last:   bool,                                        // True if this is the last primitive packet in the leaf
    size:      i32                                          // Number of primitives in the packet (must be a constant)
}

// Ray structure used for data from host
struct StreamRay {
    org: Vec3,     // Origin of the ray
    dir: Vec3,     // Direction of the ray
    tmin: f32,     // Minimum distance from the origin
    tmax: f32      // Maximum distance from the origin
}

struct Ray {
    org: Vec3,     // Origin of the ray
    dir: Vec3,     // Direction of the ray
    inv_dir: Vec3, // Inverse of the direction
    inv_org: Vec3, // Origin multiplied by the inverse of the direction
    tmin: f32,     // Minimum distance from the origin
    tmax: f32      // Maximum distance from the origin
}

struct Hit {
    distance:    f32,    // Distance to the intersection point
    prim_coords: Vec2,   // Surface coordinates
    prim_id:     i32,    // Primitive identifier, or -1 (no intersection found)
    ent_id:      i32     // Entity identifier, or -1 (no intersection found)
}

struct Tri {
    v0: Vec3,          // First vertex
    v1: Vec3,          // Second vertex
    v2: Vec3,          // Third vertex
    e1: Vec3,          // First edge (= v0 - v1)
    e2: Vec3,          // Second edge (= v2 - v0)
    n:  Vec3           // Geometric normal (= cross(e1, e2))
}

struct EntityLeaf {
    bbox      : BBox,   // Bounding box
    entity_id : i32, // Entity ID
    shape_id  : i32, // Shape ID
    local     : Mat3x4 // Matrix to local system
}

// Used as storage
struct EntityLeaf1 {
    min       : [f32 * 3], // Minimum corner
    entity_id : i32,       // Entity ID
    max       : [f32 * 3], // Maximum corner
    shape_id  : i32,       // Shape/BVH ID
    local     : Mat3x4     // Matrix to local system
}

// Min/max functions required to perform the ray-box test
struct MinMax {
    fmaxmaxf:   fn (f32, f32, f32) -> f32,
    fminminf:   fn (f32, f32, f32) -> f32,
    fminmaxf:   fn (f32, f32, f32) -> f32,
    fmaxminf:   fn (f32, f32, f32) -> f32,
    fmaxf:      fn (f32, f32) -> f32,
    fminf:      fn (f32, f32) -> f32,
    is_integer: bool
}

type RayOctant = i32;

// Constructs a set of comparators from min and max functions.
// May not be the optimal intrinsics if the hardware provides a combined min/max instruction.
fn @make_min_max( fminf: fn (f32, f32) -> f32
                , fmaxf: fn (f32, f32) -> f32
                , is_integer: bool
                ) = MinMax {
    fminminf   = @ |a, b, c| fminf(fminf(a, b), c),
    fmaxmaxf   = @ |a, b, c| fmaxf(fmaxf(a, b), c),
    fminmaxf   = @ |a, b, c| fmaxf(fminf(a, b), c),
    fmaxminf   = @ |a, b, c| fminf(fmaxf(a, b), c),
    fminf      = fminf,
    fmaxf      = fmaxf,
    is_integer = is_integer
};

// Floating point min/max, works on every ISA, but might not be optimal
fn @make_default_min_max() -> MinMax {
    let fminf = @ |x: f32, y: f32| select(x < y, x, y);
    let fmaxf = @ |x: f32, y: f32| select(x > y, x, y);
    make_min_max(fminf, fmaxf, false)
}

fn @make_ray(org: Vec3, dir: Vec3, tmin: f32, tmax: f32) -> Ray {
    let inv_dir = make_vec3(safe_rcp(dir.x), safe_rcp(dir.y), safe_rcp(dir.z));
    let inv_org = vec3_neg(vec3_mul(org, inv_dir));
    Ray {
        org = org,
        dir = dir,
        inv_dir = inv_dir,
        inv_org = inv_org,
        tmin = tmin,
        tmax = tmax
    }
}

// Transforms ray. The direction is not normalized
fn @transform_ray(ray: Ray, m: Mat3x4) = make_ray(
    mat3x4_transform_point(m, ray.org),
    mat3x4_transform_direction(m, ray.dir),
    ray.tmin, ray.tmax);

// Transforms ray. The direction is normalized
fn @transform_norm_ray(ray: Ray, m: Mat3x4) = make_ray(
    mat3x4_transform_point(m, ray.org),
    vec3_normalize(mat3x4_transform_direction(m, ray.dir)),
    ray.tmin, ray.tmax);

fn @make_hit(ent_id: i32, prim_id: i32, t: f32, uv: Vec2) = Hit {
    distance    = t,
    prim_coords = uv,
    prim_id     = prim_id,
    ent_id      = ent_id
};

fn @make_tri(v0: Vec3, e1: Vec3, e2: Vec3, n: Vec3) = Tri {
    v0 = v0,
    v1 = vec3_sub(v0, e1),
    v2 = vec3_add(v0, e2),
    e1 = e1,
    e2 = e2,
    n  = n
};

fn @make_entity_leaf(bbox: BBox, entity_id: i32, shape_id: i32, local: Mat3x4) = EntityLeaf {
    bbox      = bbox,
    entity_id = entity_id,
    shape_id  = shape_id,
    local     = local
};

fn @ray_octant(ray: Ray) -> RayOctant {
    select(ray.dir.x > 0, 1, 0) |
    select(ray.dir.y > 0, 2, 0) |
    select(ray.dir.z > 0, 4, 0)
}

fn @empty_hit(tmax: f32) = make_hit(-1, -1, tmax, undef[Vec2]());

fn @intersect_ray_tri_mt(backface_culling: bool, ray: Ray, tri: Tri) -> Option[(f32, f32, f32)] {
    let c = vec3_sub(tri.v0, ray.org);
    let r = vec3_cross(ray.dir, c);
    let det = vec3_dot(tri.n, ray.dir);
    let abs_det = math_builtins::fabs(det);

    let u = prodsign(vec3_dot(r, tri.e2), det);
    let mut mask = u >= 0;

    let v = prodsign(vec3_dot(r, tri.e1), det);
    mask &= v >= 0;
    mask &= u + v <= abs_det;

    if likely(rv_all(!mask)) { return(Option[(f32, f32, f32)]::None) }

    let t = prodsign(vec3_dot(c, tri.n), det);
    mask &= if backface_culling { det < 0 } else { abs_det != 0 };
    mask &= t >= abs_det * ray.tmin;
    mask &= t <= abs_det * ray.tmax;

    if likely(rv_all(!mask)) { return(Option[(f32, f32, f32)]::None) }

    if mask {
        let inv_det = 1 / abs_det;
        make_option(t * inv_det, u * inv_det, v * inv_det)
    } else {
        Option[(f32, f32, f32)]::None
    }
}

fn @intersect_ray_tri_bw(_backface_culling: bool, ray: Ray, tri: Tri) -> Option[(f32, f32, f32)] {
    // Permute components of triangle vertices and ray direction
    let kz = vec3_max_index(vec3_abs(ray.dir));
    let kx = if kz + 1 == 3 { 0 } else { kz + 1 };
    let ky = if kx + 1 == 3 { 0 } else { kx + 1 };
    
    let d       = vec3_permute(ray.dir, kx, ky, kz);
    let mut p0t = vec3_permute(vec3_sub(tri.v0, ray.org), kx, ky, kz);
    let mut p1t = vec3_permute(vec3_sub(tri.v1, ray.org), kx, ky, kz);
    let mut p2t = vec3_permute(vec3_sub(tri.v2, ray.org), kx, ky, kz);

    // Apply shear transformation to translated vertex positions
    let Sx = -d.x / d.z;
    let Sy = -d.y / d.z;
    let Sz = 1 / d.z;
    p0t.x += Sx * p0t.z;
    p0t.y += Sy * p0t.z;
    p1t.x += Sx * p1t.z;
    p1t.y += Sy * p1t.z;
    p2t.x += Sx * p2t.z;
    p2t.y += Sy * p2t.z;

    // Compute differences
    let e0 = diff_of_prod(p1t.x, p2t.y, p1t.y, p2t.x);
    let e1 = diff_of_prod(p2t.x, p0t.y, p2t.y, p0t.x);
    let e2 = diff_of_prod(p0t.x, p1t.y, p0t.y, p1t.x);

    let det = e0 + e1 + e2;
    let abs_det = math_builtins::fabs(det);
    let mut mask = !((e0 < 0 || e1 < 0 || e2 < 0) && (e0 > 0 || e1 > 0 || e2 > 0)) && abs_det != 0;

    if likely(rv_all(!mask)) { return(Option[(f32, f32, f32)]::None) }

    // Compute scaled hit distance to triangle and test against ray range
    p0t.z *= Sz;
    p1t.z *= Sz;
    p2t.z *= Sz;
    let t = e0 * p0t.z + e1 * p1t.z + e2 * p2t.z;
    mask &= !(det < 0 && (t >= ray.tmin * det || t < ray.tmax * det)) && !(det > 0 && (t <= ray.tmin * det || t > ray.tmax * det));

    if likely(rv_all(!mask)) { return(Option[(f32, f32, f32)]::None) }

    if mask {
        let inv_det = 1 / det;
        make_option(t * inv_det, e0 * inv_det, e1 * inv_det)
    } else {
        Option[(f32, f32, f32)]::None
    }
}

fn @intersect_ray_tri(backface_culling: bool, ray: Ray, tri: Tri) = intersect_ray_tri_mt(backface_culling, ray, tri);

fn @intersect_ray_box(min_max: MinMax, ordered: bool, ray: Ray, bbox: BBox) -> (f32, f32) {
    if is_bbox_empty(bbox) { return((1,-1)) }

    let t0 = vec3_add(vec3_mul(ray.inv_dir, bbox.min), ray.inv_org);
    let t1 = vec3_add(vec3_mul(ray.inv_dir, bbox.max), ray.inv_org);

    let (tentry, texit) =
        if ordered {
            (min_max.fmaxmaxf(t0.x, t0.y, min_max.fmaxf(t0.z, ray.tmin)),
             min_max.fminminf(t1.x, t1.y, min_max.fminf(t1.z, ray.tmax)))
        } else {
            (min_max.fmaxmaxf(min_max.fminf(t0.x, t1.x), min_max.fminf(t0.y, t1.y), min_max.fminmaxf(t0.z, t1.z, ray.tmin)),
             min_max.fminminf(min_max.fmaxf(t0.x, t1.x), min_max.fmaxf(t0.y, t1.y), min_max.fmaxminf(t0.z, t1.z, ray.tmax)))
        };

    (tentry, texit)
}

fn @intersect_ray_box_single(min_max: MinMax, ordered: bool, ray: Ray, bbox: BBox) -> Option[f32] {
    let (entry, exit) = intersect_ray_box(min_max, ordered, ray, bbox);
    let mask = (entry <= exit) & (exit >= 0);

    if mask {
        make_option(select(entry < 1e-5, exit, entry))
    } else {
        Option[f32]::None
    }
}

fn @intersect_ray_box_single_min(min_max: MinMax, ordered: bool, ray: Ray, bbox: BBox) -> Option[f32] {
    let (entry, exit) = intersect_ray_box(min_max, ordered, ray, bbox);
    let mask = (entry <= exit) & (exit >= 0);

    if mask {
        make_option(entry)
    } else {
        Option[f32]::None
    }
}
