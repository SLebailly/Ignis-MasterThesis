// BVH layout ----------------------------------------------------------------------

struct Node2 {
    bounds: [f32 * 12], // lo_x, hi_x, lo_y, hi_y, ...
    child:  [i32 * 2],
    pad:    [i32 * 2]
}

struct Tri1 {
    v0: [f32 * 3],
    pad: i32,
    e1: [f32 * 3],
    pad2: i32,
    e2: [f32 * 3],
    prim_id: i32
}

fn @make_gpu_node(j: i32, nodes: &[Node2], is_nvvm: bool) -> Node {
    let load4_f32 = @ |p: &addrspace(1)[simd[f32 * 4]], i: i32| if is_nvvm { nvvm_ldg4_f32(&p(i)) } else { p(i) };
    let load4_i32 = @ |p: &addrspace(1)[simd[i32 * 4]], i: i32| if is_nvvm { nvvm_ldg4_i32(&p(i)) } else { p(i) };
    
    let simd_ptr = &nodes(j) as &addrspace(1)[simd[f32 * 4]];
    let bb0      = load4_f32(simd_ptr, 0);
    let bb1      = load4_f32(simd_ptr, 1);
    let bb2      = load4_f32(simd_ptr, 2);
    let children = load4_i32(simd_ptr as &addrspace(1)[simd[i32 * 4]], 3);

    Node {
        bbox = @ |i| {
            if i == 0 {
                make_bbox(make_vec3(bb0(0), bb0(2), bb1(0)),
                          make_vec3(bb0(1), bb0(3), bb1(1)))
            } else {
                make_bbox(make_vec3(bb1(2), bb2(0), bb2(2)),
                          make_vec3(bb1(3), bb2(1), bb2(3)))
            }
        },
        ordered_bbox = @ |_, _| undef[BBox](), // Not implemented
        child = @ |i| children(i)
    }
}

fn @make_gpu_prim(j: i32, tris: &[Tri1], is_nvvm: bool) -> Prim {
    let load4_f32 = @ |p: &addrspace(1)[simd[f32 * 4]], i: i32| if is_nvvm { nvvm_ldg4_f32(&p(i)) } else { p(i) };

    let simd_ptr = &tris(j) as &addrspace(1)[simd[f32 * 4]];
    let tri0     = load4_f32(simd_ptr, 0);
    let tri1     = load4_f32(simd_ptr, 1);
    let tri2     = load4_f32(simd_ptr, 2);
    let prim_id  = bitcast[i32](tri2(3));
    Prim {
        intersect = @ |_, math, ray| {
            let v0  = make_vec3(tri0(0), tri0(1), tri0(2));
            let e1  = make_vec3(tri1(0), tri1(1), tri1(2));
            let e2  = make_vec3(tri2(0), tri2(1), tri2(2));
            let n   = vec3_cross(e1, e2);
            let tri = make_tri(v0, e1, e2, n);
            if let Option[(f32, f32, f32)]::Some((t, u, v)) = intersect_ray_tri(math, false /*backface_culling*/, ray, tri) {
                make_option(make_hit(-1/* Will be set later*/, prim_id & 0x7FFFFFFF, t, make_vec2(u, v)))
            } else {
                Option[Hit]::None
            }
        },
        is_valid = @ |_| true,
        is_last = prim_id < 0,
        size = 1
    }
}

fn @make_gpu_ent(j: i32, objs: &[EntityLeaf1], is_nvvm: bool) -> EntityLeaf {
    let load4_f32 = @ |p: &addrspace(1)[simd[f32 * 4]], i: i32| if is_nvvm { nvvm_ldg4_f32(&p(i)) } else { p(i) };

    let simd_ptr  = &objs(j) as &addrspace(1)[simd[f32 * 4]];
    let min       = load4_f32(simd_ptr, 0);
    let entity_id = bitcast[i32](min(3));
    let max       = load4_f32(simd_ptr, 1);
    let shape_id  = bitcast[i32](max(3));
    let c0        = load4_f32(simd_ptr, 2);
    let c1        = load4_f32(simd_ptr, 3);
    let c2        = load4_f32(simd_ptr, 4);
    let c3        = load4_f32(simd_ptr, 5);
    make_entity_leaf(
        make_bbox(make_vec3(min(0), min(1), min(2)), make_vec3(max(0), max(1), max(2))), 
        entity_id, shape_id,
        make_mat4x4(make_vec4(c0(0),c0(1),c0(2),c0(3)),
                    make_vec4(c1(0),c1(1),c1(2),c1(3)),
                    make_vec4(c2(0),c2(1),c2(2),c2(3)),
                    make_vec4(c3(0),c3(1),c3(2),c3(3))))
}

fn @make_gpu_bvh2_tri1(nodes: &[Node2], tris: &[Tri1], is_nvvm: bool) -> PrimBvh {
    PrimBvh {
        node     = @ |j| @make_gpu_node(j, nodes, is_nvvm),
        prim     = @ |j| @make_gpu_prim(j, tris , is_nvvm),
        prefetch = @ |_| (), // Not implemented
        arity    = 2
    }
}
fn @make_gpu_bvh2_ent(nodes: &[Node2], objs: &[EntityLeaf1], is_nvvm: bool) -> SceneBvh {
    SceneBvh {
        node     = @ |j| @make_gpu_node(j, nodes, is_nvvm),
        ent      = @ |j| @make_gpu_ent( j, objs , is_nvvm),
        prefetch = @ |_| (), // Not implemented
        arity    = 2
    }
}

// Min/Max functions  --------------------------------------------------------------

fn @make_nvvm_min_max() = MinMax {
    // Use video instructions to speed-up the ray-box test
    fminf = nvvm_fminf,
    fmaxf = nvvm_fmaxf,
    fminminf = @ |a, b, c| bitcast[f32](nvvm_minmin(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
    fmaxmaxf = @ |a, b, c| bitcast[f32](nvvm_maxmax(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
    fminmaxf = @ |a, b, c| bitcast[f32](nvvm_minmax(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
    fmaxminf = @ |a, b, c| bitcast[f32](nvvm_maxmin(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
    is_integer = true
};

fn @make_amdgpu_min_max() = make_min_max(ocml_fminf, ocml_fmaxf, false);

// Traversal kernel  ---------------------------------------------------------------

// Traverses a single ray at a time. 
fn @gpu_traverse_single_helper_prim( gpu_intrinsics: Intrinsics
                                    , min_max: MinMax
                                    , mut ray: Ray
                                    , bvh: PrimBvh
                                    , any_hit: bool
                                    , root: i32
                                    ) -> Hit {
    let mut hit = empty_hit(ray.tmax);
    let stack   = alloc_stack();
    stack.push(root, undef[f32]());

    while !stack.is_empty() {
        let node_ref = stack.top();
        let node = bvh.node(node_ref.node - 1);

        let mut mask = 0;
        let small_stack = make_small_stack(bvh.arity);
        for k in unroll(0, bvh.arity) {
            let (t0, t1) = intersect_ray_box(min_max, false, ray, node.bbox(k)); 
            if t0 <= t1 {
                mask |= 1 << k;
                small_stack.write(k, (node.child(k), t0));
            }
        }

        if bvh.arity == 2 {
            // Binary BVH
            if mask == 0 {
                stack.pop();
            } else {
                let (child0, t0) = small_stack.read(0);
                let (child1, t1) = small_stack.read(1);
                if mask == 3 {
                    let first  = select(t0 < t1, child0, child1);
                    let second = select(t0 < t1, child1, child0); 
                    stack.set_top(first, undef[f32]());
                    stack.push_after(second, undef[f32]());
                } else {
                    stack.set_top(select(mask == 1, child0, child1), undef[f32]());
                }
            }
        } else {
            // General case -- slower
            stack.pop();

            if mask != 0 {
                let mut tmin = ray.tmax;
                for k in unroll(0, bvh.arity) {
                    if mask & (1 << k) != 0 {
                        let (child, t) = small_stack.read(k);
                        if any_hit || t < tmin {
                            stack.push(child, undef[f32]());
                            tmin = t
                        } else {
                            stack.push_after(child, undef[f32]())
                        }
                    }
                }
            }
        }

        while is_leaf(stack.top()) {
            let leaf_ref = stack.pop();
            let mut prim_id = !leaf_ref.node;
            while true {
                let prim = bvh.prim(prim_id++);

                for k in unroll(0, prim.size) {
                    if !prim.is_valid(k) { break() }

                    if let Option[Hit]::Some(prim_hit) = prim.intersect(k, gpu_intrinsics, ray) {
                        hit = prim_hit;
                        ray.tmax = prim_hit.distance;

                        if any_hit { return(hit) }
                    }
                }

                if prim.is_last { break() }
            }
        }
    }

    hit
}

// Traverses a single ray at a time. 
fn @gpu_traverse_single_helper( gpu_intrinsics: Intrinsics
                              , min_max: MinMax
                              , mut ray: Ray
                              , scene: Scene
                              , any_hit: bool
                              , root: i32
                              ) -> Hit {
    let mut hit = empty_hit(ray.tmax);

    let bvh       = scene.bvh;
    let prim_bvhs = scene.database.bvhs;
    let stack     = alloc_stack();
    stack.push(root, undef[f32]());

    while !stack.is_empty() {
        let node_ref = stack.top();
        let node = bvh.node(node_ref.node - 1);

        let mut mask = 0;
        let small_stack = make_small_stack(bvh.arity);
        for k in unroll(0, bvh.arity) {
            let (t0, t1) = intersect_ray_box(min_max, false, ray, node.bbox(k));
            if t0 <= t1 {
                mask |= 1 << k;
                small_stack.write(k, (node.child(k), t0));
            }
        }

        if bvh.arity == 2 {
            // Binary BVH
            if mask == 0 {
                stack.pop();
            } else {
                let (child0, t0) = small_stack.read(0);
                let (child1, t1) = small_stack.read(1);
                if mask == 3 {
                    let first  = select(t0 < t1, child0, child1);
                    let second = select(t0 < t1, child1, child0); 
                    stack.set_top(first, undef[f32]());
                    stack.push_after(second, undef[f32]());
                } else {
                    stack.set_top(select(mask == 1, child0, child1), undef[f32]());
                }
            }
        } else {
            // General case -- slower
            stack.pop();

            if mask != 0 {
                let mut tmin = ray.tmax;
                for k in unroll(0, bvh.arity) {
                    if mask & (1 << k) != 0 {
                        let (child, t) = small_stack.read(k);
                        if any_hit || t < tmin {
                            stack.push(child, undef[f32]());
                            tmin = t
                        } else {
                            stack.push_after(child, undef[f32]())
                        }
                    }
                }
            }
        }

        while is_leaf(stack.top()) {
            let leaf_ref   = stack.pop();
            let mut ref_id = !leaf_ref.node;
            while true {
                let leaf = bvh.ent(ref_id++);

                if let Option[f32]::Some(t) = intersect_ray_box_single(min_max, false, ray, leaf.bbox) {
                    if t <= hit.distance {
                        let shape_bvh = @prim_bvhs(leaf.shape_id);
                        let local_ray = transform_ray(ray, leaf.local);
                        let local_hit = gpu_traverse_single_helper_prim(gpu_intrinsics, min_max, local_ray, shape_bvh, any_hit, 1);

                        if local_hit.prim_id != -1 {
                            if local_hit.distance <= hit.distance {
                                hit      = make_hit(leaf.entity_id & 0x7FFFFFFF, local_hit.prim_id, local_hit.distance, local_hit.uv_coords);
                                ray.tmax = hit.distance;

                                // Early exit mode
                                if any_hit { return(hit) }
                            }
                        }
                    }
                }

                if leaf.entity_id < 0 { break() }
            }
        }
    }

    hit
}

// Wrapper  ------------------------------------------------------------------------

fn @gpu_traverse_single( acc: Accelerator
                       , gpu_intrinsics: Intrinsics
                       , min_max: MinMax
                       , scene: Scene
                       , rays: fn (i32, i32) -> Ray
                       , hits: fn (i32, i32, Hit) -> ()
                       , packet_size: i32
                       , num_packets: i32
                       , any_hit: bool
                       ) -> () {
    let block_size = 64;
    let ray_count  = num_packets * packet_size;
    let grid  = (round_up(num_packets, block_size), packet_size, 1);
    let block = (block_size, packet_size, 1);

    acc.exec(|work_item| {
        let (i, j) = (work_item.tidx() + work_item.bidx() * block_size, work_item.tidy());
        if (i + j) >= ray_count { return() }

        hits(i, j, gpu_traverse_single_helper(gpu_intrinsics, min_max, rays(i, j), scene, any_hit, 1 /*root*/));
    })(grid, block);
}
