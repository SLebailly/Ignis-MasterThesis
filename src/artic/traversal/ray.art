// Ray structure used for data from host
struct StreamRay {
    org: Vec3,     // Origin of the ray
    dir: Vec3,     // Direction of the ray
    tmin: f32,     // Minimum distance from the origin
    tmax: f32      // Maximum distance from the origin
}

struct Ray {
    org: Vec3,     // Origin of the ray
    dir: Vec3,     // Direction of the ray
    inv_dir: Vec3, // Inverse of the direction
    inv_org: Vec3, // Origin multiplied by the inverse of the direction
    tmin: f32,     // Minimum distance from the origin
    tmax: f32      // Maximum distance from the origin
}

type RayOctant = i32;

fn @make_ray(org: Vec3, dir: Vec3, tmin: f32, tmax: f32) -> Ray {
    let inv_dir = make_vec3(safe_rcp(dir.x), safe_rcp(dir.y), safe_rcp(dir.z));
    let inv_org = vec3_neg(vec3_mul(org, inv_dir));
    Ray {
        org = org,
        dir = dir,
        inv_dir = inv_dir,
        inv_org = inv_org,
        tmin = tmin,
        tmax = tmax
    }
}

fn @make_zero_ray() = Ray {
    org = vec3_expand(0),
    dir = vec3_expand(0),
    inv_dir = vec3_expand(0),
    inv_org = vec3_expand(0),
    tmin = 0,
    tmax = flt_max
};

// Transforms ray. The direction is not normalized
// The near and far distances are still given in global space
// Multiplying with the magnitude of the direction vector would give the local distances
fn @transform_ray(ray: Ray, m: Mat3x4) = make_ray(
    mat3x4_transform_point(m, ray.org),
    mat3x4_transform_direction(m, ray.dir),
    ray.tmin, ray.tmax);

// Transforms ray. The direction is normalized
fn @transform_norm_ray(ray: Ray, m: Mat3x4) -> Ray {
    let d  = mat3x4_transform_direction(m, ray.dir);
    let ln = vec3_len(d);
    make_ray(
        mat3x4_transform_point(m, ray.org),
        vec3_mulf(d, safe_div(1, ln)),
        ray.tmin * ln,
        ray.tmax * ln)
}

// Return the respective octant representation of the given ray
fn @ray_octant(ray: Ray) -> RayOctant {
    select(math_builtins::signbit(ray.dir.x), 0, 1) |
    select(math_builtins::signbit(ray.dir.y), 0, 2) |
    select(math_builtins::signbit(ray.dir.z), 0, 4)
}