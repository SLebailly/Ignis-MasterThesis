// Special camera to satisfy issues when using tracing mode
fn @make_null_camera() = Camera {
    generate_ray = @ |_, _, _| make_ray(make_vec3(0,0,0), make_vec3(0,0,1), 0, flt_max),
    differential = @ |_| ( make_vec3(0,0,0), make_vec3(0,0,0) )
};

// Creates a perspective camera
fn @make_perspective_camera(eye: Vec3, dir: Vec3, up: Vec3, w: f32, h: f32, fov: f32, tmin: f32, tmax: f32) -> Camera {
    let right = vec3_normalize(vec3_cross(dir, up));
    let view  = make_mat3x3(right, up, dir);
    let sw    = math_builtins::tan(fov / 2);
    let sh    = sw * h / w;

    Camera {
        generate_ray = @ |_, x, y| {
            let d = vec3_normalize(mat3x3_mul(view, make_vec3(sw * x, sh * y, 1)));
            make_ray(eye, d, tmin, tmax)
        },
        differential = @ |_| {
            (
                vec3_mulf(right, sw),
                vec3_mulf(up, sh)
            )
        }
    }
}

// Creates a perspective camera with depth of field
fn @make_perspective_dof_camera(eye: Vec3, dir: Vec3, up: Vec3, w: f32, h: f32, fov: f32, aperture_radius: f32, focal_length: f32, tmin: f32, tmax: f32) -> Camera {
    let right = vec3_normalize(vec3_cross(dir, up));
    let view  = make_mat3x3(right, up, dir);
    let sw    = math_builtins::tan(fov / 2);
    let sh    = sw * h / w;

    Camera {
        generate_ray = @ |rnd, x, y| {
            let global_dir = vec3_normalize(mat3x3_mul(view, make_vec3(sw * x, sh * y, 1)));
            let focus_pos  = vec3_mulf(global_dir, focal_length);

            let aperature_coord = vec2_mulf(square_to_concentric_disk(make_vec2(randf(rnd), randf(rnd))), aperture_radius);
            let aperature_pos   = mat3x3_mul(view, make_vec3(aperature_coord.x, aperature_coord.y, 0));
            let d               = vec3_normalize(vec3_sub(focus_pos, aperature_pos));

            make_ray(vec3_add(eye, aperature_pos), d, tmin, tmax)
        },
        differential = @ |_| {
            (
                // TODO: We ignore the lens effect here
                vec3_mulf(right, sw),
                vec3_mulf(up, sh)
            )
        }
    }
}

// Creates an orthogonal camera
fn @make_orthogonal_camera(eye: Vec3, dir: Vec3, up: Vec3, w: f32, h: f32, scale: f32, tmin: f32, tmax: f32) -> Camera {
    let right = vec3_normalize(vec3_cross(dir, up));
    let sw    = scale;
    let sh    = sw * h / w;

    Camera {
        generate_ray = @ |_, x, y| {
            let pos = vec3_add(vec3_add(vec3_mulf(right, sw * x), vec3_mulf(up, sh * y)), eye);
            make_ray(pos, dir, tmin, tmax)
        },
        differential = @ |_| {
            (
                right,
                up
            )
        }
    }
}

enum FisheyeAspectMode {
    Circular,
    Cropped,
    Full
}

// Creates a fishlens camera
fn @make_fishlens_camera(eye: Vec3, dir: Vec3, up: Vec3, w: f32, h: f32, mode: FisheyeAspectMode, tmin: f32, tmax: f32) -> Camera {
    let right = vec3_normalize(vec3_cross(dir, up));
    let view  = make_mat3x3(right, up, dir);
    let fov   = flt_pi;
    let asp   = w / h;

    // Select aspect ratio mode
    let (xasp, yasp) = match(mode) {
        FisheyeAspectMode::Circular => {
            let xasp = if asp < 1 { 1 } else { asp };
            let yasp = if asp > 1 { 1 } else { asp };
            (xasp, yasp)
        },
        FisheyeAspectMode::Cropped => {
            let xasp = if asp < 1 { 1 / asp } else { 1 };
            let yasp = if asp > 1 { 1 / asp } else { 1 };
            (xasp, yasp)
        },
        FisheyeAspectMode::Full => {
            let diameter = math_builtins::sqrt(asp * asp + 1) * h;
            let min_s	 = math_builtins::fmin(w, h);
            let f        = diameter / min_s;
            let xasp = if asp < 1 { f } else { f / asp };
            let yasp = if asp > 1 { f } else { f * asp };
            (xasp, yasp)
        }
    };

    fn compute_d(x:f32,y:f32) -> Vec3 {
        let nx    = x * xasp;
        let ny    = y * yasp;
        let r	  = math_builtins::sqrt(nx * nx + ny * ny);
		let theta = r * fov / 2;

		let sT = math_builtins::sin(theta);
        let cT = math_builtins::cos(theta);
        let sP = if r < flt_eps { 0 } else { ny / r };
        let cP = if r < flt_eps { 0 } else { nx / r };
        let nd = make_vec3(sT*cP, sT*sP, cT);
        vec3_normalize(mat3x3_mul(view, nd))
    }

    Camera {
        generate_ray = @ |_, x, y| {
            make_ray(eye, compute_d(x,y), tmin, tmax)
        },
        differential = @ |pixel| {
            let x = (pixel % w as i32) as f32 / w;
            let y = (pixel / w as i32) as f32 / h;

            let d0  = compute_d(x, y);
            let d1x = compute_d(x + 1 / w, y);
            let d1y = compute_d(x, y + 1 / h);
            
            (
                vec3_mulf(vec3_sub(d1x, d0), w),
                vec3_mulf(vec3_sub(d1y, d0), h)
            )
        }
    }
}
