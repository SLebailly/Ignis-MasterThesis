mod cdf {
use super as all;
use super::math_builtins;
use super::interval;

type DeviceBuffer = all::DeviceBuffer;
type Vec2 = all::Vec2;

// This implementation of CDF omits the first 0 entry and only contains [x1, x2, ..., xn-1, 1]
struct CDF1D {
    data: DeviceBuffer,
    size: i32, // This is the full cdf size, therefore e.g., if data has size = s, cdf has size = s + 1
    off:  i32, // Offset in the device buffer
    get:  fn (i32) -> f32
}

struct Sample1d {
    pos: f32,
    pdf: f32
}

fn @make_cdf_1d(data: DeviceBuffer, size: i32, off: i32) = CDF1D {
    data = data,
    size = size,
    off  = off,
    get  = @|i| if i == 0 { 0 } else { data.load_f32(i - 1 + off) },
};

fn @sample_cdf_1d_rem(u: f32, cdf: CDF1D) -> (Sample1d, i32) {
    let mut off = interval::binary_search(cdf.size, @|i:i32| cdf.get(i) <= u);
    while off > 0 && cdf.get(off) >= u {
        --off;
    }

    let rem = u - cdf.get(off);
    let pdf = cdf.get(off + 1) - cdf.get(off);

    (Sample1d {
        pos = all::clampf((off as f32 + rem / pdf) / (cdf.size as f32 - 1), 0, 1),
        pdf = pdf
    },
    off)
}

fn @sample_cdf_1d(u: f32, cdf: CDF1D) -> Sample1d {
    let (sample, _) = sample_cdf_1d_rem(u, cdf);
    sample
}

fn @pdf_cdf_1d_rem(x: f32, cdf: CDF1D) -> (f32, i32) {
    let off = all::clamp((x * (cdf.size as f32 - 1)) as i32, 0, cdf.size - 2);
    (cdf.get(off + 1) - cdf.get(off), off)
}

fn @pdf_cdf_1d(x: f32, cdf: CDF1D) -> f32 {
    let (pdf, _) = pdf_cdf_1d_rem(x, cdf);
    pdf
}

////////////////// 2D
struct CDF2D {
    conditional:   fn (i32) -> CDF1D,
    marginal:      CDF1D,
    size_slice:    i32,
    size_marginal: i32
}

struct Sample2d {
    pos: Vec2,
    pdf: f32
}

// First entry is the marginal!
fn @make_cdf_2d(data: DeviceBuffer, size_x: i32, size_y: i32) = CDF2D {
    conditional   = @|i| make_cdf_1d(data, size_x + 1, size_y + i * size_x),
    marginal      = make_cdf_1d(data, size_y + 1, 0),
    size_slice    = size_x + 1,
    size_marginal = size_y + 1
};

fn @sample_cdf_2d(uv: Vec2, cdf: CDF2D) -> Sample2d {
    let (sample1, off) = sample_cdf_1d_rem(uv.y, cdf.marginal);
    let sample2 = sample_cdf_1d(uv.x, cdf.conditional(off));

    Sample2d {
        pos = all::make_vec2(sample2.pos, sample1.pos),
        pdf = sample1.pdf * sample2.pdf * (cdf.size_slice * cdf.size_marginal) as f32
    }
}

fn @pdf_cdf_2d(p: Vec2, cdf: CDF2D) -> f32 {
    let (pdf1, off) = pdf_cdf_1d_rem(p.y, cdf.marginal);
    let pdf2        = pdf_cdf_1d(p.x, cdf.conditional(off));
    
    pdf1 * pdf2 * (cdf.size_slice * cdf.size_marginal) as f32
}

}