// Result of sampling a direction
struct DirSample {
    dir: Vec3,
    pdf: f32
}

fn @make_dir_sample(c: f32, s: f32, phi: f32, pdf: f32) -> DirSample {
    let x = s * math_builtins::cos(phi);
    let y = s * math_builtins::sin(phi);
    let z = c;
    DirSample {
        dir = make_vec3(x, y, z),
        pdf = pdf
    }
}

fn @scale_dir_sample(sample: DirSample, factor: f32) = DirSample {
    dir = sample.dir,
    pdf = sample.pdf * factor
};

fn @neg_dir_sample(sample: DirSample) = DirSample {
    dir = vec3_neg(sample.dir),
    pdf = sample.pdf
};

// Result of sampling a position
struct PosSample {
    pos: Vec3,
    pdf: f32
}

fn @make_pos_sample(pos: Vec3, pdf: f32) = PosSample {
    pos = pos,
    pdf = pdf
};

// Samples a point uniformly on a triangle
fn @sample_triangle(mut u: f32, mut v: f32) -> (f32, f32) {
    if (u + v > 1) {
        u = 1 - u;
        v = 1 - v;
    }
    (u, v)
}

// Probability density function for uniform sphere sampling
fn @uniform_sphere_pdf() = 1 / (4 * flt_pi);

// Samples a direction uniformly on a sphere
fn @sample_uniform_sphere(u: f32, v: f32) -> DirSample {
    let c = 2 * v - 1;
    let s = safe_sqrt(1 - c * c);
    let phi = 2 * flt_pi * u;
    make_dir_sample(c, s, phi, uniform_sphere_pdf())
}

// Probability density function for equal area sphere sampling
// Note: Keep in mind this is essentially the same as uniform_sphere, but a bit faster
fn @equal_area_sphere_pdf() = uniform_sphere_pdf();

// Samples a direction uniformly, in respect to equal area, on a sphere
// Note: Keep in mind this is essentially the same as uniform_sphere, but a bit faster and a different orientation!
// TODO: Make it the same orientation as uniform_sphere
fn @sample_equal_area_sphere(u: f32, v: f32) = DirSample {
    dir = equal_area_square_to_sphere(make_vec2(u, v)),
    pdf = equal_area_sphere_pdf()
};

// Probability density function for cosine weighted hemisphere sampling
fn @cosine_hemisphere_pdf(c: f32) = c / flt_pi;

// Samples a direction on a hemisphere proportionally to the cosine with the surface normal
fn @sample_cosine_hemisphere(u: f32, v: f32) -> DirSample {
    let c = math_builtins::sqrt(1 - v);
    let s = math_builtins::sqrt(v);
    let phi = 2 * flt_pi * u;
    make_dir_sample(c, s, phi, cosine_hemisphere_pdf(c))
}

// Probability density function for cosine-power weighted hemisphere sampling
fn @cosine_power_hemisphere_pdf(c: f32, k: f32) -> f32 {
    fastpow/*math_builtins::math.pow*/(c, k) * (k + 1) * (1 / (2 * flt_pi))
}

// Samples a direction on a hemisphere proportionally to the power of the cosine with the surface normal
fn @sample_cosine_power_hemisphere(k: f32, u: f32, v: f32) -> DirSample {
    let c = math_builtins::fmin[f32](fastpow/*math_builtins::pow*/(v, 1 / (k + 1)), 1);
    let s = math_builtins::sqrt(1 - c * c);
    let phi = 2 * flt_pi * u;
    // We have:
    // pow(c, k) = pow(pow(v, 1 / (k + 1)), k)
    //           = pow(v, k / (k + 1))
    //           = v * pow(v, -1 / (k + 1))
    //           = v / c
    let pow_c_k = select(c != 0, v / c, 0:f32);
    let pdf = pow_c_k * (k + 1) * (1 / (2 * flt_pi));
    make_dir_sample(c, s, phi, pdf)
}

fn @uniform_disk_pdf(radius: f32) = 1 / (flt_pi * radius * radius);

// Samples uniform concentric disk
fn @sample_uniform_disk(u: f32, v: f32, radius: f32) -> PosSample {
    make_pos_sample(vec3_mulf(vec2_to_3(square_to_concentric_disk(make_vec2(u, v)), 0), radius), uniform_disk_pdf(radius))
}