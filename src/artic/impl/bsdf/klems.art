// TODO: The Klems sample process is not optimized at all...

struct KlemsThetaBasis {
    center:    f32,
    lower:     f32,
    upper:     f32,
    phi_count: i32
}

struct KlemsBasis {
    theta_count: i32,
    entry_count: i32,
    theta_basis:         fn (i32) -> KlemsThetaBasis,
    theta_linear_offset: fn (i32) -> i32
}

struct KlemsComponent {
    row_basis:    KlemsBasis,
    column_basis: KlemsBasis,
    matrix:       fn (i32) -> f32
}

struct KlemsModel {
    front_reflection:   KlemsComponent,
    back_reflection:    KlemsComponent,
    front_transmission: KlemsComponent,
    back_transmission:  KlemsComponent
}

// Our sampling space flips implicitly to the inside configuration and has to be considered when working with the Klems & Tensor basis
fn @k_fi(v: Vec3) = make_vec3(v.x, v.y, v.z);
fn @k_fo(v: Vec3) = vec3_neg(k_fi(v));//make_vec3(-v.x, -v.y, -v.z);
fn @k_bi(v: Vec3) = make_vec3(v.x, v.y, v.z);
fn @k_bo(v: Vec3) = vec3_neg(k_bi(v));

fn @k_phi_index(phi: f32, basis: KlemsThetaBasis) = min(basis.phi_count - 1, max(0, (phi * (basis.phi_count as f32) * flt_inv_pi / 2) as i32));
fn @k_multi_index_of(theta: f32, phi: f32, basis: KlemsBasis) -> (i32, i32) {
    let i = interval::binary_search(basis.theta_count, @|k| basis.theta_basis(k).lower <= theta);
    let j = k_phi_index(phi, basis.theta_basis(i));
    (i, j)
}

fn @k_index_of(theta: f32, phi: f32, basis: KlemsBasis) -> i32 {
    let (i, j) = k_multi_index_of(theta, phi, basis);
    basis.theta_linear_offset(i) + j
}

fn @k_eval_component_index(row: i32, col: i32, component: KlemsComponent) = component.matrix(row * component.column_basis.entry_count + col);

fn @k_eval_component(in_dir: Vec3, out_dir: Vec3, component: KlemsComponent) {
    let (in_theta, in_phi)   = spherical_from_dir(in_dir);
    let (out_theta, out_phi) = spherical_from_dir(out_dir);
    let row = k_index_of(in_theta, in_phi, component.row_basis);
    let col = k_index_of(out_theta, out_phi, component.column_basis);
    k_eval_component_index(row, col, component)
}

fn @make_klems_basis(buffer: DeviceBuffer, buffer_host: DeviceBuffer, off: i32) -> (KlemsBasis, i32) {
    let theta_count = buffer_host.load_i32(off);
    let entry_count = buffer_host.load_i32(off+1);
    let base_off    = 4 + off;
    let lin_off     = (theta_count+1) * 4 + off;

    (KlemsBasis {
        theta_count = theta_count,
        entry_count = entry_count,
        theta_basis = @ |i| KlemsThetaBasis {
            center    = buffer.load_f32(base_off+i*4+0),
            lower     = buffer.load_f32(base_off+i*4+1),
            upper     = buffer.load_f32(base_off+i*4+2),
            phi_count = buffer.load_i32(base_off+i*4+3),
        },
        theta_linear_offset = @ |i| buffer.load_i32(lin_off + i)
    }, (theta_count+1)*4+theta_count)
}

fn @make_klems_component(buffer: DeviceBuffer, buffer_host: DeviceBuffer, off: i32) -> (KlemsComponent, i32) {
    let (row_basis, row_off) = make_klems_basis(buffer, buffer_host, off);
    let (col_basis, col_off) = make_klems_basis(buffer, buffer_host, off + row_off);

    let mat_size = row_basis.entry_count * col_basis.entry_count;
    (KlemsComponent {
        row_basis    = row_basis,
        column_basis = col_basis,
        matrix       = @ |i| buffer.load_f32(off + row_off + col_off + i)
    }, row_off + col_off + mat_size)
}

fn @make_klems_model(buffer: DeviceBuffer, buffer_host: DeviceBuffer) -> KlemsModel {
    let (front_reflection,   front_reflection_off)   = make_klems_component(buffer, buffer_host, 0);
    let (front_transmission, front_transmission_off) = make_klems_component(buffer, buffer_host, front_reflection_off);
    let (back_reflection,    back_reflection_off)    = make_klems_component(buffer, buffer_host, front_reflection_off + front_transmission_off);
    let (back_transmission,  _)                      = make_klems_component(buffer, buffer_host, front_reflection_off + front_transmission_off + back_reflection_off);
   
    KlemsModel {
        front_reflection   = front_reflection,
        front_transmission = front_transmission,
        back_reflection    = back_reflection,
        back_transmission  = back_transmission
    }
}

// TODO: Add proper sampling!
fn @make_klems_bsdf(surf: SurfaceElement, color: Color, klems: KlemsModel) -> Bsdf {
    let refl_prob  = 0.5:f32;
    let local_eval = |wi : Vec3, wo : Vec3| {
        // Be sure to get side without the (possible) flip from the surface interaction
		let inFront	 = surf.is_entering == shading::is_positive_hemisphere(wi);
        let outFront = surf.is_entering == shading::is_positive_hemisphere(wo);

        let factor = match (inFront, outFront) {
            (true, true)   => k_eval_component(k_fi(wi), k_fo(wo), klems.front_reflection),
            (true, false)  => k_eval_component(k_fi(wi), k_bo(wo), klems.front_transmission),
            (false, true)  => k_eval_component(k_bi(wi), k_bo(wo), klems.back_transmission),
            (false, false) => k_eval_component(k_bi(wi), k_fo(wo), klems.back_reflection)
        };

        color_mulf(color, factor * shading::abs_cos_theta(wi))
    };

    Bsdf {
        eval   = @ |in_dir, out_dir| {
            let wo = shading::to_local(surf.local, out_dir);
            let wi = shading::to_local(surf.local, in_dir);
            local_eval(wi, wo)
        },
        pdf    = @ |in_dir, _| cosine_hemisphere_pdf(absolute_cos(in_dir, surf.local.col(2))),
        sample = @ |rnd, out_dir, _| {
            let wo = shading::to_local(surf.local, out_dir);
            let u = randf(rnd);
            let v = randf(rnd);
            let sample = sample_cosine_hemisphere(u, v);
            
            if sample.pdf <= flt_eps {
                reject_bsdf_sample()
            } else {
                let wi = if randf(rnd) < refl_prob { shading::make_same_hemisphere(wo, sample.dir) } else { vec3_neg(shading::make_same_hemisphere(wo, sample.dir)) };
                make_option(BsdfSample {
                    in_dir = shading::to_world(surf.local, wi),
                    pdf    = sample.pdf,
                    color  = color_mulf(local_eval(wi, wo), safe_div(1, refl_prob * sample.pdf)),
                    eta    = 1
                })
            }
        },
        is_specular = false
    }
}
