// TODO: The Klems eval and sample process are not optimized at all...

struct KlemsThetaBasis {
    center:    f32,
    lower:     f32,
    upper:     f32,
    phi_count: i32
}

struct KlemsBasis {
    theta_count: i32,
    entry_count: i32,
    theta_basis:         fn (i32) -> KlemsThetaBasis,
    theta_linear_offset: fn (i32) -> i32
}

struct KlemsComponent {
    row_basis:    KlemsBasis,
    column_basis: KlemsBasis,
    matrix:       fn (i32) -> f32
}

struct KlemsModel {
    front_reflection:   KlemsComponent,
    back_reflection:    KlemsComponent,
    front_transmission: KlemsComponent,
    back_transmission:  KlemsComponent
}

// Our sampling space flips implicitly to the inside configuration and has to be considered when working with the Klems basis
// therefor the opposite funtions fi and bi are not needed
fn @k_fo(v: Vec3) = v;
fn @k_fi(v: Vec3) = make_vec3(-v.x, -v.y, v.z);
fn @k_bo(v: Vec3) = make_vec3(v.x, v.y, -v.z);
fn @k_bi(v: Vec3) = vec3_neg(v);

fn @k_phi_index(phi: f32, basis: KlemsThetaBasis) = min(basis.phi_count - 1, max(0, (phi * (basis.phi_count as f32) * flt_inv_pi / 2) as i32));
fn @k_multi_index_of(theta: f32, phi: f32, basis: KlemsBasis) -> (i32, i32) {
    let i = Interval::binary_search(basis.theta_count, @|k| basis.theta_basis(k).lower <= theta);
    let j = k_phi_index(phi, basis.theta_basis(i));
    (i, j)
}

fn @k_index_of(theta: f32, phi: f32, basis: KlemsBasis) -> i32 {
    let (i, j) = k_multi_index_of(theta, phi, basis);
    basis.theta_linear_offset(i) + j
}

fn @k_eval_component_index(row: i32, col: i32, component: KlemsComponent) = component.matrix(row * component.column_basis.entry_count + col);

fn @k_eval_component(in_dir: Vec3, out_dir: Vec3, component: KlemsComponent) {
    let (in_theta, in_phi)   = spherical_from_dir(in_dir);
    let (out_theta, out_phi) = spherical_from_dir(out_dir);
    let row = k_index_of(in_theta, in_phi, component.row_basis);
    let col = k_index_of(out_theta, out_phi, component.column_basis);
    k_eval_component_index(row, col, component)
}

// TODO: Add proper sampling!
// TODO: Add tint
fn @make_klems_bsdf(surf: SurfaceElement, klems: KlemsModel) -> Bsdf {
    let lsurf = mat3x3_transpose(surf.local);
    let local_eval = |wi : Vec3, wo : Vec3| {
		let inFront	 = wi.z > 0;
        let outFront = wo.z > 0;

        let factor = match (inFront, outFront) {
            (true, true)   => k_eval_component(k_fi(wi), k_fo(wo), klems.front_reflection),
            (true, false)  => k_eval_component(k_fi(wi), k_bo(wo), klems.front_transmission),
            (false, true)  => k_eval_component(k_bi(wi), k_bo(wo), klems.back_transmission),
            (false, false) => k_eval_component(k_bi(wi), k_fo(wo), klems.back_reflection)
        };

        make_gray_color(factor * math_builtins::fabs(wi.z))
    };

    Bsdf {
        eval   = @ |in_dir, out_dir| {
            let wo = vec3_normalize(mat3x3_mul(lsurf, out_dir));
            let wi = vec3_normalize(mat3x3_mul(lsurf, in_dir));
            local_eval(wi, wo)
        },
        pdf    = @ |_, _| uniform_sphere_pdf(),
        sample = @ |rnd, out_dir, _| {
            let wo = vec3_normalize(mat3x3_mul(lsurf, out_dir));
            let u = randf(rnd);
            let v = randf(rnd);
            let sample = sample_uniform_sphere(u, v);
            let gdir   = vec3_normalize(mat3x3_mul(surf.local, sample.dir));
            let is_trans = (sample.dir.z < 0) ^ (wo.z < 0);
            let color = color_mulf(local_eval(sample.dir, wo), 1/sample.pdf);
            make_bsdf_sample(surf, gdir, sample.pdf, color, is_trans)
        },
        is_specular = false
    }
}
