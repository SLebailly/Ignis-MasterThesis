// Creates an orthogonal camera
fn @make_orthogonal_camera(eye: Vec3, dir: Vec3, up: Vec3, w: f32, h: f32, scale: f32, tmin: f32, tmax: f32) -> Camera {
    let right = vec3_normalize(vec3_cross(dir, up));
    let sw    = scale;
    let sh    = sw * h / w;

    Camera {
        generate_ray = @ |_, x, y| {
            let pos = vec3_add(vec3_add(vec3_mulf(right, sw * x), vec3_mulf(up, sh * y)), eye);
            make_ray(pos, dir, tmin, tmax)
        },
        differential = @ |_| {
            (
                right,
                up
            )
        }
    }
}