fn @make_image_texture(border: BorderHandling, filter: ImageFilter, image: Image) -> Texture {
    @ |uv| {
        let u = border.horz(uv.x);
        let v = border.vert(uv.y);
        filter(image, make_vec2(u, v))
    }
}

fn @make_checkerboard_texture(scale: Vec2, color0: Color, color1: Color) -> Texture {
    @ |uv| { 
        let suv = vec2_mul(uv, scale);
        let parity_x = ((suv.x as i32) % 2) == 0;
        let parity_y = ((suv.y as i32) % 2) == 0;

        if parity_x ^ parity_y { color0 } else { color1 }
    }
}

fn @make_constant_texture(color: Color) -> Texture {
    @ |_uv| { color }
}

fn @make_channel_texture(tex: Texture, channel: i32) -> Texture {
    @ |uv| { 
        let color = tex(uv);
        match(channel) {
            0 => make_gray_color(color.r),
            1 => make_gray_color(color.g),
            _ => make_gray_color(color.b),
        }
    }
}

fn @make_black_texture() -> Texture {
    @ |_uv| { black }
}

fn @make_invalid_texture() -> Texture {
    @ |_uv| { pink }
}
