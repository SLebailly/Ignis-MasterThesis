fn @pick_light(rnd: &mut RndState, num_lights: i32) {
    if ?num_lights && num_lights == 1 {
        0
    } else {
        (randi(rnd) & 0x7FFFFFFF) % num_lights
    }
}

// Returns the probability to continue given the contribution of a path
fn @russian_roulette(c: Color, clamp: f32) = clampf(2 * color_luminance(c), 0, clamp);

// Russian roulette used in pbrt v4
fn @russian_roulette_pbrt(c: Color, clamp: f32) = clampf(color_max_component(c), 0, clamp);

struct PTRayPayload {
    mis:     f32,
    contrib: Color,
    depth:   i32,
    eta:     f32
}

static AOV_PATH_NORMAL = 1;
static AOV_PATH_DIRECT = 2;
static AOV_PATH_NEE    = 3;
static AOV_PATH_STATS  = 4;

fn wrap_ptraypayload(payload: PTRayPayload) -> RayPayload {
    let mut r : RayPayload;
    r.components(0) = payload.mis;
    r.components(1) = payload.contrib.r;
    r.components(2) = payload.contrib.g;
    r.components(3) = payload.contrib.b;
    r.components(4) = bitcast[f32](payload.depth);
    r.components(5) = payload.eta;
    r
}

fn unrap_ptraypayload(payload: RayPayload) = PTRayPayload {
    mis     = payload.components(0),
    contrib = make_color(payload.components(1), payload.components(2), payload.components(3)),
    depth   = bitcast[i32](payload.components(4)),
    eta     = payload.components(5),
};

fn @make_path_renderer(max_path_len: i32, num_lights: i32, lights: LightTable, aovs: AOVTable) -> PathTracer {
    let offset : f32  = 0.001;
    let pdf_lightpick = if num_lights == 0 { 1 } else { 1 / (num_lights as f32) };

    let aov_normal = @aovs(AOV_PATH_NORMAL);
    let aov_di     = @aovs(AOV_PATH_DIRECT);
    let aov_nee    = @aovs(AOV_PATH_NEE);
    let aov_stats  = @aovs(AOV_PATH_STATS);

    fn @on_shadow( ray: Ray
                 , _pixel: i32
                 , _hit: Hit
                 , rnd: &mut RndState
                 , payload: RayPayload
                 , surf: SurfaceElement
                 , mat: Material
                 ) -> Option[(Ray, Color)] {
        // No shadow rays for specular materials
        if mat.bsdf.is_specular || num_lights == 0 {
            return(Option[(Ray, Color)]::None)
        }

        // Note: randi() returns random integers, but we only want positive integers here
        let light_id      = pick_light(rnd, num_lights);
        let light         = @lights(light_id);
        let sample_direct = light.sample_direct;
        let light_sample  = @sample_direct(rnd, surf);

        if light.infinite {
            if light_sample.pdf_dir <= flt_eps {
                return(Option[(Ray, Color)]::None)
            }

            let light_dir    = light_sample.posdir; // Infinite lights return a direction instead of a position
            let vis          = vec3_dot(light_dir, surf.local.col(2));
            let correct_side = surf.is_entering ^ (vis < 0);

            if correct_side {
                let in_dir  = light_dir; 
                let out_dir = vec3_neg(ray.dir);

                let pdf_e     = if light.delta { 1 } else { mat.bsdf.pdf(in_dir, out_dir) }; // Pdf to sample the "infinite" light based on bsdf
                let pdf_l     = light_sample.pdf_dir * pdf_lightpick;                        // Pdf to sample the light based on NEE
                let inv_pdf_l = 1 / pdf_l;
                
                let mis = if light.delta { 1 } else { 1 / (1 + pdf_e * inv_pdf_l) };

                let contrib = color_mul(light_sample.intensity, color_mul(unrap_ptraypayload(payload).contrib, mat.bsdf.eval(in_dir, out_dir)));

                return(make_option(
                    make_ray(surf.point, light_dir, offset, flt_max),
                    color_mulf(contrib, mis * inv_pdf_l)
                ))
            }
        }  else {
            if light_sample.pdf_area <= flt_eps {
                return(Option[(Ray, Color)]::None)
            }

            let light_dir    = vec3_sub(light_sample.posdir, surf.point);
            let vis          = vec3_dot(light_dir, surf.local.col(2));
            let correct_side = surf.is_entering ^ (vis < 0);  

            if correct_side && light_sample.cos > flt_eps {
                let inv_d   = 1 / vec3_len(light_dir);
                let inv_d2  = inv_d * inv_d;
                let in_dir  = vec3_mulf(light_dir, inv_d);
                let out_dir = vec3_neg(ray.dir);
                let cos_l   = light_sample.cos;

                let pdf_e     = if light.delta { 1 } else { mat.bsdf.pdf(in_dir, out_dir) * cos_l * inv_d2 };
                let pdf_l     = light_sample.pdf_area * pdf_lightpick;
                let inv_pdf_l = 1 / pdf_l;

                let mis = if light.delta { 1 } else { 1 / (1 + pdf_e * inv_pdf_l) };
                let geom_factor = cos_l * inv_d2 * inv_pdf_l;

                let contrib = color_mul(light_sample.intensity, color_mul(unrap_ptraypayload(payload).contrib, mat.bsdf.eval(in_dir, out_dir)));

                return(make_option(
                    make_ray(surf.point, light_dir, offset, 1 - offset),
                    color_mulf(contrib, geom_factor * mis)
                ))
            }
        }
        Option[(Ray, Color)]::None
    }

    fn @on_hit( ray: Ray
              , pixel: i32
              , hit: Hit
              , payload: RayPayload
              , surf: SurfaceElement
              , mat: Material
              ) -> Option[Color] {
        let pt = unrap_ptraypayload(payload);
        if pt.depth == 0 {
            aov_normal.splat(pixel, make_color(math_builtins::fabs(surf.local.col(2).x),
                                               math_builtins::fabs(surf.local.col(2).y),
                                               math_builtins::fabs(surf.local.col(2).z)));
        }

        // Hits on a light source
        if mat.is_emissive && surf.is_entering {
            let out_dir = vec3_neg(ray.dir);
            let dot     = vec3_dot(out_dir, surf.local.col(2));
            if dot > flt_eps { // Only contribute proper aligned directions
                let emit     = mat.emission(out_dir);
                let next_mis = pt.mis * hit.distance * hit.distance / dot;
                let mis      = 1 / (1 + next_mis * pdf_lightpick * emit.pdf_area);
                let contrib  = color_mulf(color_mul(pt.contrib, emit.intensity), mis);
                
                aov_di.splat(pixel, contrib);

                return(make_option(contrib))
            }
        }
        Option[Color]::None
    }

    fn @on_miss( ray: Ray
               , pixel: i32
               , payload: RayPayload) -> Option[Color] {
        let mut inflights = 0;
        let mut color     = black;

        // Due to the renderer design, this will only iterate through
        // infinite lights, as a miss shader does not contain area lights
        for light_id in unroll(0, num_lights) {
            let light = @lights(light_id);
            // Do not include delta lights or finite lights
            if light.infinite && !light.delta {
                let pt = unrap_ptraypayload(payload);

                inflights += 1;

                let out_dir = vec3_neg(ray.dir);
                let emit    = light.emission(out_dir, make_invalid_surface_element());
                let mis     = 1 / (1 + pt.mis * pdf_lightpick * emit.pdf_dir);
                color = color_add(color, color_mulf(color_mul(pt.contrib, emit.intensity), mis));
            }
        }

        if inflights > 0 {
            aov_di.splat(pixel, color);
            make_option(color)
        } else {
            Option[Color]::None
        }
    }

    fn @on_bounce( ray: Ray
                 , pixel: i32
                 , _hit: Hit
                 , rnd: &mut RndState
                 , payload: RayPayload
                 , surf: SurfaceElement
                 , mat: Material
                 ) -> Option[(Ray, RayPayload)] {
        let pt = unrap_ptraypayload(payload);
        // Russian roulette and maximum depth
        // let rr_prob = if mat.bsdf.is_specular { 1 } else { russian_roulette(state.contrib, 0.95) };
        // if state.depth >= max_path_len || randf(rnd) >= rr_prob {
        //     return(Option[Ray]::None)
        // }

        aov_stats.splat(pixel, make_color(if pt.depth == 1 { 2 } else { 1 }, 0, 0));

        // Bounce
        let out_dir = vec3_neg(ray.dir);
        if let Option[BsdfSample]::Some(mat_sample) = mat.bsdf.sample(rnd, out_dir, false) {
            let rr_prob = russian_roulette_pbrt(color_mulf(pt.contrib, pt.eta * pt.eta), 0.95);
            if pt.depth >= max_path_len || randf(rnd) >= rr_prob {
                return(Option[(Ray, RayPayload)]::None)
            }

            let contrib     = color_mul(pt.contrib, mat_sample.color/* Pdf and cosine are already applied!*/);
            let mis         = if mat.bsdf.is_specular { 0 } else { 1 / mat_sample.pdf };
            let new_contrib = color_mulf(contrib, 1 / rr_prob);

            make_option(
                make_ray(surf.point, mat_sample.in_dir, offset, flt_max),
                wrap_ptraypayload(PTRayPayload {
                    mis     = mis,
                    contrib = new_contrib,
                    depth   = pt.depth + 1,
                    eta     = pt.eta * mat_sample.eta
                })
            )
        } else {
            Option[(Ray, RayPayload)]::None
        }
    }

    fn @on_shadow_miss( _ray: Ray
                      , pixel: i32
                      , color: Color) -> Option[Color] {
        aov_nee.splat(pixel, color);
        make_option(color)
    }

    PathTracer {
        on_hit         = on_hit,
        on_miss        = on_miss,
        on_shadow      = on_shadow,
        on_bounce      = on_bounce,
        on_shadow_hit  = @ |_, _, _| Option[(Color)]::None,
        on_shadow_miss = on_shadow_miss,
    }
}
