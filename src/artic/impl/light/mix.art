fn @make_mix_light(lightA : Light, lightB : Light, probability : f32) = Light {
    sample_direct = @ |rnd, from| {
        let A = lightA.sample_direct(rnd, from);
        let B = lightB.sample_direct(rnd, from);
        let u = randf(rnd);
        if u < probability {
            make_direct_sample(A.posdir, A.intensity,
                 A.pdf_area*(1-probability)+B.pdf_area*probability, A.pdf_dir*(1-probability)+B.pdf_dir*probability, A.cos)
        } else {
            make_direct_sample(B.posdir, B.intensity,
                 A.pdf_area*(1-probability)+B.pdf_area*probability, A.pdf_dir*(1-probability)+B.pdf_dir*probability, B.cos)
        }
    },
    sample_emission = @ |rnd| {
        if !lightA.delta && !lightB.delta {
            let A = lightA.sample_emission(rnd);
            let B = lightB.sample_emission(rnd);
            let u = randf(rnd);

            if u < probability {
                make_emission_sample(A.pos, A.dir, A.intensity,
                     A.pdf_area*(1-probability)+B.pdf_area*probability, A.pdf_dir*(1-probability)+B.pdf_dir*probability, A.cos)
            } else {
                make_emission_sample(B.pos, B.dir, B.intensity,
                     A.pdf_area*(1-probability)+B.pdf_area*probability, A.pdf_dir*(1-probability)+B.pdf_dir*probability, B.cos)
            }
        } else if lightA.delta && !lightB.delta {
            lightB.sample_emission(rnd)
        } else {
            lightA.sample_emission(rnd)
        }
    },
    emission = @ |dir, prim_coords| {
        if !lightA.delta && !lightB.delta {
            let A = lightA.emission(dir, prim_coords);
            let B = lightB.emission(dir, prim_coords); 
            make_emission_value(color_lerp(A.intensity,B.intensity, probability), A.pdf_area*(1-probability)+B.pdf_area*probability, A.pdf_dir*(1-probability)+B.pdf_dir*probability) 
        } else if lightA.delta && !lightB.delta {
            lightB.emission(dir, prim_coords)
        } else {
            lightA.emission(dir, prim_coords)
        }
    },
    delta = (lightA.delta && lightB.delta),
    infinite = (lightA.infinite || lightB.infinite)
};
