// Sample a point on the scene enclosing bounding sphere given an initial direction
fn @env_sample_pos(rnd: &mut RndState, dir: Vec3, scene_center: Vec3, scene_radius: f32) -> (Vec3, f32) {
    let disc_sample = sample_uniform_disk(randf(rnd), randf(rnd), scene_radius);
    let pos         = vec3_add(scene_center, vec3_add(vec3_mulf(dir, scene_radius), mat3x3_mul(make_orthonormal_mat3x3(dir), disc_sample.pos)));
    (pos, disc_sample.pdf)
}
fn @env_sample_pos_pdf(scene_radius: f32) = uniform_disk_pdf(scene_radius);

fn @adapt_D65toE(c: Color) = make_color(1.0521111 * c.r, c.g, 0.9184170 * c.b, c.a);

// All environment and sky lights define Y-Up
// Map between z & y up and vice versa if necessary
fn @switch_env_up(v: Vec3) = make_vec3(v.x, v.z, v.y);

// Will map such that (0.5, 0.5) is Y-Up
fn @map_env_uv(dir: Vec3) {
    let fract = @ |x: f32| x - math_builtins::floor(x);

    let (theta, phi) = spherical_from_dir(dir);
    let v = theta / flt_pi;
    let u = phi / (2 * flt_pi);
    make_vec2(fract(u + 0.25) /* Rotate 90Â° */, 1 - v /* Flip Y */)
}

//-------------------------------------------
// This samples the environment by naive cosine hemisphere sampling
fn @make_environment_light_function_hemi(id: i32, scene_bbox: BBox, func: fn(Vec3)->Color, transform: Mat3x3) -> Light {
    let scene_radius = bbox_radius(scene_bbox) * 1.01;

    // Only half of the sphere. Up is (0,1,0) after transform
    Light {
        id = id,
        sample_direct = @ |rnd, _| {
            let sample    = sample_cosine_hemisphere(randf(rnd), randf(rnd));
            let dir       = switch_env_up(sample.dir); // Sample for Y-Up
            let intensity = func(dir);
            make_direct_sample(mat3x3_left_mul(transform, dir), intensity, sample.pdf, 1.0)
        },
        sample_emission = @ |rnd| {
            let sample     = sample_cosine_hemisphere(randf(rnd), randf(rnd));
            let dir        = switch_env_up(sample.dir); // Sample for Y-Up
            let intensity  = func(dir);
            let global_dir = mat3x3_left_mul(transform, dir);

            let (pos, pos_pdf) = env_sample_pos(rnd, global_dir, bbox_center(scene_bbox), scene_radius);
            make_emission_sample(pos, vec3_neg(global_dir), intensity, pos_pdf, sample.pdf, 1.0)
        },
        emission = @ |ray, _| {
            // `dir` is going towards the scene, we want the other way around 
            let local_dir = mat3x3_mul(transform, ray.dir);
            if local_dir.y > flt_eps {
                func(local_dir)
            } else {
                color_builtins::black
            }
        },
        pdf_direct   = @ |ray, _| {
            let local_dir = mat3x3_mul(transform, ray.dir);
            select(local_dir.y > flt_eps, cosine_hemisphere_pdf(local_dir.y), 0:f32)
        },
        pdf_emission = @ |ray, _| {
            let local_dir = mat3x3_mul(transform, ray.dir);
            if local_dir.y > flt_eps {
                make_pdf_value(env_sample_pos_pdf(scene_radius), cosine_hemisphere_pdf(local_dir.y))
            } else {
                make_pdf_value(0, 0)
            }
        },
        delta    = false,
        infinite = true
    }
}

//-------------------------------------------
// This samples the environment by naive sphere sampling
fn @make_environment_light_function_spherical(id: i32, scene_bbox: BBox, func: fn(Vec3)->Color, transform: Mat3x3) -> Light {
    let scene_radius = bbox_radius(scene_bbox) * 1.01;

    Light {
        id = id,
        // A random spherical distribution is still spherical after orthogonal transform,
        // thats why we still use mat3x3_mul everywhere, instead of mat3x3_left_mul as above
        sample_direct = @ |rnd, _| {
            let sample    = sample_equal_area_sphere(randf(rnd), randf(rnd));
            let intensity = func(mat3x3_mul(transform, sample.dir));
            make_direct_sample(sample.dir, intensity, sample.pdf, 1.0)
        },
        sample_emission = @ |rnd| {
            let sample    = sample_equal_area_sphere(randf(rnd), randf(rnd));
            let intensity = func(mat3x3_mul(transform, sample.dir));

            let (pos, pos_pdf) = env_sample_pos(rnd, sample.dir, bbox_center(scene_bbox), scene_radius);
            make_emission_sample(pos, vec3_neg(sample.dir), intensity, pos_pdf, sample.pdf, 1.0)
        },
        emission = @ |ray, _|   func(mat3x3_mul(transform, ray.dir)),
        pdf_direct   = @ |_, _| equal_area_sphere_pdf(),
        pdf_emission = @ |_, _| make_pdf_value(env_sample_pos_pdf(scene_radius), equal_area_sphere_pdf()),
        delta    = false,
        infinite = true
    }
}

//-------------------------------------------
// This samples the environment by naive sphere or cosinus hemisphere sampling, depending on the boolean flag
fn @make_environment_light_function(id: i32, scene_bbox: BBox, func: fn(Vec3)->Color, transform: Mat3x3, half: bool) = if half {
    make_environment_light_function_hemi(id, scene_bbox, func, transform)
} else {
    make_environment_light_function_spherical(id, scene_bbox, func, transform)
};

//-------------------------------------------
// This samples the environment by naive sphere sampling
fn @make_environment_light(id: i32, scene_bbox: BBox, scale: Color, color: Color) = make_environment_light_function_spherical(
    id,
    scene_bbox,
    @|_| color_mul(scale, color),
    mat3x3_identity());

//-------------------------------------------
// This samples the environment by a given two-dimensional cdf
fn @make_environment_light_textured(id: i32, scene_bbox: BBox, scale: Color, tex: Texture, env_cdf: cdf::CDF2D, transform: Mat3x3) -> Light {
    let scene_radius = bbox_radius(scene_bbox) * 1.01;

    let sample_dir = @ |rnd: &mut RndState| -> (Vec3, Color, f32) {
        let sample    = env_cdf.sample_continous(make_vec2(randf(rnd), randf(rnd)));
        let intensity = tex(sample.pos);
        let theta     = (1 - sample.pos.y) * flt_pi;
        let phi       = (sample.pos.x - 0.25) * 2 * flt_pi;
        let dir       = dir_from_spherical(theta, phi);
        let sinTheta  = shading::sin_theta(dir);
        let pdf_dir   = safe_div(sample.pdf, sinTheta * flt_pi * flt_pi * 2);
        (mat3x3_left_mul(transform, switch_env_up(dir)), intensity, pdf_dir)
        // (mat3x3_left_mul(transform, switch_env_up(dir)), make_gray_color(pdf), 1)
    };

    fn @pdf(ray: Ray) {
        let ldir      = switch_env_up(mat3x3_mul(transform, ray.dir));
        let sinTheta  = shading::sin_theta(ldir);
        let uv        = map_env_uv(ldir);
        let pdf_dir   = env_cdf.pdf_continous(uv);
        safe_div(pdf_dir.pdf, sinTheta * flt_pi * flt_pi * 2)
    }

    Light {
        id = id,
        sample_direct = @ |rnd, _| {
            let (dir, intensity, pdf_dir) = sample_dir(rnd);
            make_direct_sample(dir, intensity, pdf_dir, 1.0)
        },
        sample_emission = @ |rnd| {
            let (dir, intensity, dir_pdf) = sample_dir(rnd);
            let (pos, pos_pdf)            = env_sample_pos(rnd, dir, bbox_center(scene_bbox), scene_radius);
            make_emission_sample(pos, vec3_neg(dir), intensity, pos_pdf, dir_pdf, 1.0)
        },
        emission = @ |ray, _| {
            // `dir` is going towards the scene, we want the other way around 
            let ldir      = switch_env_up(mat3x3_mul(transform, ray.dir));
            let uv        = map_env_uv(ldir);
            color_mul(scale, tex(uv))
        },
        pdf_direct   = @ |ray, _| pdf(ray),
        pdf_emission = @ |ray, _| make_pdf_value(env_sample_pos_pdf(scene_radius), pdf(ray)),
        delta    = false,
        infinite = true
    }
}

//-------------------------------------------
// Some texture node do not have an associated cdf, use naive sampling instead
fn @make_environment_light_textured_naive(id: i32, scene_bbox: BBox, scale: Color, tex: Texture, transform: Mat3x3) =
    make_environment_light_function_spherical(id, scene_bbox, @|dir| color_mul(scale, tex(map_env_uv(switch_env_up(dir)))), transform);