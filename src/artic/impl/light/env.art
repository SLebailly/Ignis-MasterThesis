fn @env_sample_pos(rnd: &mut RndState, dir: Vec3, scene_center: Vec3, scene_radius: f32) -> (Vec3, f32) {
    let disc_sample = sample_uniform_disk(randf(rnd), randf(rnd), 1);
    let pos         = vec3_add(scene_center, vec3_mulf(vec3_add(dir, mat3x3_mul(make_orthonormal_mat3x3(dir), disc_sample.pos)), scene_radius));
    (pos, safe_div(disc_sample.pdf, scene_radius * scene_radius))
}

// This samples the environment by naive sphere sampling
fn @make_environment_light(scene_bbox: BBox, color: Color) -> Light {
    let scene_radius = bbox_radius(scene_bbox) * 1.01;
    Light {
        sample_direct = @ |rnd, _| {
            let u = randf(rnd);
            let v = randf(rnd);
            let sample = sample_uniform_sphere(u, v);
            make_direct_sample(sample.dir, color, 1.0, sample.pdf, 1.0)
        },
        sample_emission = @ |rnd| {
            let dir_sample     = sample_uniform_sphere(randf(rnd), randf(rnd));
            let (pos, pos_pdf) = env_sample_pos(rnd, dir_sample.dir, bbox_center(scene_bbox), scene_radius);
            make_emission_sample(pos, vec3_neg(dir_sample.dir), color, pos_pdf, dir_sample.pdf, 1.0)
        },
        emission = @ |_, _| make_emission_value(color, 1.0, uniform_sphere_pdf()),
        delta    = false,
        infinite = true
    }
}

//-------------------------------------------
// This samples the environment by a given two-dimensional cdf
fn @make_environment_light_textured(scene_bbox: BBox, tex: Texture, env_cdf: cdf::CDF2D, transform: Mat3x3) -> Light {
    let scene_radius = bbox_radius(scene_bbox) * 1.01;

    let map = @|dir : Vec3| -> Vec2 {
        let (theta, phi) = spherical_from_dir(mat3x3_mul(transform, dir));
        let v = theta / flt_pi;
        let u = phi / (2 * flt_pi);
        make_vec2(u,v)
    };
    let unmap = @|uv : Vec2| -> Vec3 {
        let border = make_repeat_border();
        let theta  = border.vert(uv.y) * flt_pi;
        let phi    = border.horz(uv.x) * 2 * flt_pi;
        mat3x3_left_mul(transform, dir_from_spherical(theta, phi))
    };
    let eval = @|dir : Vec3| tex(map(dir));

    Light {
        sample_direct = @ |rnd, _| {
            let u = randf(rnd);
            let v = randf(rnd);
            let sample    = cdf::sample_cdf_2d(make_vec2(u, v), env_cdf);
            let sinTheta  = math_builtins::sin(sample.pos.y*flt_pi);
            let dir       = unmap(sample.pos);
            let intensity = eval(dir);
            make_direct_sample(dir, intensity, 1.0, safe_div(sample.pdf, sinTheta * flt_pi * flt_pi * 2), 1.0)
        },
        sample_emission = @ |rnd| {
            let u = randf(rnd);
            let v = randf(rnd);
            let sample    = cdf::sample_cdf_2d(make_vec2(u, v), env_cdf);
            let sinTheta  = math_builtins::sin(sample.pos.y*flt_pi);
            let dir       = unmap(sample.pos);
            let intensity = eval(dir);

            let (pos, pos_pdf) = env_sample_pos(rnd, dir, bbox_center(scene_bbox), scene_radius);
            make_emission_sample(pos, vec3_neg(dir), intensity, pos_pdf, safe_div(sample.pdf, sinTheta * flt_pi * flt_pi * 2), 1.0)
        },
        emission = @ |dir, _| {
            let uv        = map(dir);
            let pdf       = cdf::pdf_cdf_2d(uv, env_cdf);
            let sinTheta  = math_builtins::sin(uv.y*flt_pi);
            make_emission_value(eval(dir), 1.0, safe_div(pdf, sinTheta * flt_pi * flt_pi * 2))
        },
        delta    = false,
        infinite = true
    }
}

//-------------------------------------------
fn @make_environment_light_function(scene_bbox: BBox, func: fn(Vec3)->Color, transform: Mat3x3) -> Light {
    let scene_radius = bbox_radius(scene_bbox) * 1.01;

    Light {
        sample_direct = @ |rnd, _| {
            let u = randf(rnd);
            let v = randf(rnd);
            let sample = sample_uniform_sphere(u, v);
            let intensity = func(sample.dir);
            let dir = mat3x3_left_mul(transform, sample.dir);
            make_direct_sample(dir, intensity, 1.0, sample.pdf, 1.0)
        },
        sample_emission = @ |rnd| {
            let u = randf(rnd);
            let v = randf(rnd);
            let sample = sample_uniform_sphere(u, v);
            let intensity = func(mat3x3_mul(transform, sample.dir));
            let dir = mat3x3_left_mul(transform, sample.dir);

            let (pos, pos_pdf) = env_sample_pos(rnd, dir, bbox_center(scene_bbox), scene_radius);
            make_emission_sample(pos, vec3_neg(dir), intensity, pos_pdf, sample.pdf, 1.0)
        },
        emission = @ |dir, _| {
            make_emission_value(func(mat3x3_mul(transform, dir)), 1.0, uniform_sphere_pdf())
        },
        delta    = false,
        infinite = true
    }
}

// Some texture node do not have an associated cdf, use naive sampling instead
fn @make_environment_light_textured_naive(scene_bbox: BBox, tex: Texture, transform: Mat3x3) =
    make_environment_light_function(scene_bbox, @|dir|{
        let (theta, phi) = spherical_from_dir(dir);
        let u = theta / flt_pi;
        let v = phi / (2 * flt_pi);
        tex(make_vec2(v,u))
}, transform);