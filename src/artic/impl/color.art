// In contrary to the core/color.art this file contains color utility functions used by textures, and not tonemapping

// Will normalize such that one of the r,g,b components is 1. Ignores the alpha channel
fn @color_normalize(c: Color)         = color_replace_a(color_mulf(c, safe_div(1, color_max_component(c))), c.a);
fn @color_replace_a(c: Color, a: f32) = make_color(c.r, c.g, c.b, a);

// Will offset and scale such that the minimum value becomes 0 and maximum value becomes 1
fn @color_full_saturate(c: Color) -> Color {
    let min_v = color_min_component(c);
    let min_c = make_color(c.r - min_v, c.g - min_v, c.b - min_v, c.a);
    let max_v = color_max_component(min_c);
    let norm  = safe_div(1, max_v);
    make_color(min_c.r * norm, min_c.g * norm, min_c.b * norm, min_c.a)
}

// See https://gist.github.com/983/e170a24ae8eba2cd174f
fn @srgb_to_hsv(c: Color) -> Color {
    let step = @|edge:f32, x:f32| select(x < edge, 0:f32, 1:f32);
    
    let p = vec4_lerp(make_vec4(c.b, c.g, -1, 2 / (3 : f32)), make_vec4(c.g, c.b, 0, -1 / (3:f32)), step(c.b, c.g));
    let q = vec4_lerp(make_vec4(p.x, p.y, p.w, c.r), make_vec4(c.r, p.y, p.z, p.x), step(p.x, c.r));

    let d = q.x - math_builtins::fmin(q.w, q.y);
    let e = 1.0e-10:f32;
    make_color(
        math_builtins::fabs(q.z + (q.w - q.y) / (6 * d + e)),
        d / (q.x + e),
        q.x,
        c.a)
}

fn @hsv_to_srgb(c: Color) -> Color {
    fn fract_v(v: Vec3) = vec3_map(v, @|x| x - math_builtins::floor(x));

    let p = vec3_abs(vec3_sub(vec3_mulf(fract_v(make_vec3(c.r + 1, c.r + 2 / (3:f32), c.r + 1 / (3:f32))), 6), vec3_expand(3)));
    make_color(
        c.b * lerp(1, clampf(p.x - 1, 0, 1), c.g),
        c.b * lerp(1, clampf(p.y - 1, 0, 1), c.g),
        c.b * lerp(1, clampf(p.z - 1, 0, 1), c.g),
        c.a)
}

fn @srgb_to_hsl(c: Color) -> Color {
    let hsv = srgb_to_hsv(c);
    let l   = hsv.g * (1 - hsv.b / 2);
    make_color(
        hsv.r,
        l,
        safe_div(hsv.g - l, math_builtins::fmin(l, 1 - l)),
        hsv.a)
}

fn @hsl_to_srgb(c: Color) -> Color {
    let v   = c.b + c.g * math_builtins::fmin(c.b, 1 - c.b);
    let hsv = make_color(
        c.r,
        v,
        2 * safe_div(v - c.b, v),
        c.a);
    hsv_to_srgb(hsv)
}

// Special mix functions used in nodes
fn @color_mix_screen(a: Color, b: Color, t: f32) {
    color_sub(color_builtins::white, color_mul(color_lerp(color_builtins::white, color_sub(color_builtins::white, b), t), color_sub(color_builtins::white, a)))
}

fn @color_mix_overlay(a: Color, b: Color, t: f32) {
    vec3_to_color(vec3_zip(color_to_vec3(a), color_to_vec3(b), @|x,y|{
        select(x < 0.5, x * lerp(1, 2*y, t), 1 - (1 - x)*lerp(1, 2*(1 - y), t))
    }))
}

fn @color_mix_dodge(a: Color, b: Color, t: f32) {
    vec3_to_color(vec3_zip(color_to_vec3(a), color_to_vec3(b), @|x,y|{
        let d = math_builtins::fmin[f32](1, safe_div(x, 1 - t * y));
        select(x == 0, x, select(d < 0, 1:f32, d))
    }))
}

fn @color_mix_burn(a: Color, b: Color, t: f32) {
    vec3_to_color(vec3_zip(color_to_vec3(a), color_to_vec3(b), @|x,y|{
        let d = lerp(1, y, t);
        select(d <= flt_eps, 0:f32, clampf(1 - safe_div(1 - x, d), 0, 1))
    }))
}

fn @color_mix_soft(a: Color, b: Color, t: f32) {
    let scr = color_sub(color_builtins::white, color_mul(color_sub(color_builtins::white, a), color_sub(color_builtins::white, b)));
    color_lerp(a, color_add(color_mul(color_mul(color_sub(color_builtins::white, a), a), b), color_mul(a, scr)), t)
}

fn @color_mix_linear(a: Color, b: Color, t: f32) {
    color_add(a, vec3_to_color(vec3_map(color_to_vec3(b), @|y|{
        select(y > 0.5, 2 * (y-0.5), 2*y-1) * t
    })))
}

fn @color_mix_hue(a: Color, b: Color, t: f32) {
    let ahsv = srgb_to_hsv(a);
    let bhsv = srgb_to_hsv(b);
    color_lerp(a, hsv_to_srgb(make_color(bhsv.r, ahsv.g, ahsv.b, ahsv.a)), t)
}

fn @color_mix_saturation(a: Color, b: Color, t: f32) {
    let ahsv = srgb_to_hsv(a);
    let bhsv = srgb_to_hsv(b);
    hsv_to_srgb(make_color(ahsv.r, lerp(ahsv.g, bhsv.g, t), ahsv.b, ahsv.a))
}

fn @color_mix_value(a: Color, b: Color, t: f32) {
    let ahsv = srgb_to_hsv(a);
    let bhsv = srgb_to_hsv(b);
    hsv_to_srgb(make_color(ahsv.r, ahsv.g, lerp(ahsv.b, bhsv.b, t), ahsv.a))
}

fn @color_mix_color(a: Color, b: Color, t: f32) {
    let ahsv = srgb_to_hsv(a);
    let bhsv = srgb_to_hsv(b);
    color_lerp(a, hsv_to_srgb(make_color(bhsv.r, bhsv.g, ahsv.b, ahsv.a)), t)
}