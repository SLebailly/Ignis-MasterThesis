//static STEFAN_BOLTZMAN_SIGMA = 5.670373e-8 * 1e-6 / M_PI;

// Blender Principled Volume Shader
struct PrincipledVolumeParameters {
    scalar_density: f32,
    scalar_emission: f32,
    color_scattering: Color,
    color_absorption: Color,
    color_emission: Color
    //_color_blackbody: Color,
    //_scalar_blackbody: f32,
    //_scalar_temperature: f32
}

struct PrincipledVolumeValues {
    density: f32,
    temperature: f32
}

fn @make_principled_volume_values(density: f32, temperature: f32) = PrincipledVolumeValues {
    density = density,
    temperature = temperature
};

fn @make_principled_volume_parameters(scalar_density: f32, scalar_emission: f32, color_scattering: Color, color_absorption: Color, color_emission: Color) = PrincipledVolumeParameters {
    scalar_density   = scalar_density,
    scalar_emission  = scalar_emission,
    color_scattering = color_scattering,
    color_absorption = color_absorption,
    color_emission   = color_emission
};


fn @make_principled_volume_shader(params: PrincipledVolumeParameters) -> VolumeShader[PrincipledVolumeValues] {
    
    let color_scattering_inv = color_sub(make_gray_color(1:f32), params.color_scattering); // 1 - color_scattering
    let color_absorption_inv = color_sub(make_gray_color(1:f32), params.color_absorption); // 1 - color_absorption
    
    VolumeShader[PrincipledVolumeValues] {
        volume_properties = @|values| {

            let vxl_density = if values.density > flt_eps { values.density * params.scalar_density } else { 0 };
        
            let coeff_absorption = if vxl_density > flt_eps { color_mulf(color_mul(color_scattering_inv, color_absorption_inv), vxl_density) } else { make_gray_color(0:f32) };
            let coeff_scattering = if vxl_density > flt_eps { color_mulf(params.color_scattering, vxl_density) } else { make_gray_color(0:f32) };
            let coeff_emission   = if params.scalar_emission > flt_eps { color_mulf(params.color_emission, params.scalar_emission) } else { make_gray_color(0:f32) };
        
            //TODO: add blackbody support
            make_volume_properties(coeff_scattering, coeff_absorption, coeff_emission)
        }
    
    }
}
