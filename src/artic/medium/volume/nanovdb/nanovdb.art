static default_temperature = 0:f32;
static max_index           = 99999999;
static min_index           = -max_index;
static min_bbox            = (min_index, min_index, min_index);
static max_bbox            = (max_index, max_index, max_index);


/**
 * variables that serve as input (vary for each voxel)
 */
struct NanoVDBVolumeValues {
    density: f32,
    temperature_opt: Option[f32]
}

fn @make_nvdb_volume_values(density: f32, temperature_opt: Option[f32]) = NanoVDBVolumeValues {
    density = density,
    temperature_opt = temperature_opt
};


fn @get_tree_option(buffer_option: Option[DeviceBuffer]) -> Option[NanoVDBTree[f32, f32]] {
    if let Option[DeviceBuffer]::Some(buffer) = buffer_option {
        Option[NanoVDBTree[f32, f32]]::Some(make_nvdb_tree[f32, f32](buffer, 4, 4, @|bf, i| bf.load_f32(i), @|bf, i| bf.load_f32(i)))
    } else {
        Option[NanoVDBTree[f32, f32]]::None
    }
}

fn @tree_option_bbox(tree_option: Option[NanoVDBTree[f32, f32]]) -> ((i32, i32, i32), (i32, i32, i32)) {
    if let Option[NanoVDBTree[f32, f32]]::Some(tree) = tree_option {
        tree.access_root_node(tree.access_tree_data().get_node_address_root(true)).get_bounding_box(true)
    } else {
        (max_bbox, min_bbox)
    }
}

fn @lowest_path_dim_option(path_a: AccessPath, path_b_option: Option[AccessPath]) {
    if let Option[AccessPath]::Some(path_b) = path_b_option {
        if path_a.sparse_dim < path_b.sparse_dim { path_a.sparse_dim } else { path_b.sparse_dim }
    } else {
        path_a.sparse_dim
    }
}

fn @get_max_value_option(tree_option: Option[NanoVDBTree[f32, f32]]) {
    if let Option[NanoVDBTree[f32, f32]]::Some(tree) = tree_option {
        Option[f32]::Some(get_max_value(tree))
    } else {
        Option[f32]::None
    }
}


fn @make_nvdb_volume_f32(buffer_density: DeviceBuffer, buffer_temperature_option: Option[DeviceBuffer], volume_shader: VolumeShader[NanoVDBVolumeValues]) -> Volume {

    let tree_density     = make_nvdb_tree[f32, f32](buffer_density, 4, 4, @|bf, i| bf.load_f32(i), @|bf, i| bf.load_f32(i));
    let tree_temperature_option = get_tree_option(buffer_temperature_option);

    let ((x_min_d, y_min_d, z_min_d), (x_max_d, y_max_d, z_max_d)) = tree_density.access_root_node(tree_density.access_tree_data().get_node_address_root(true)).get_bounding_box(true);
    let ((x_min_t, y_min_t, z_min_t), (x_max_t, y_max_t, z_max_t)) = tree_option_bbox(tree_temperature_option);
    let ((x_min, y_min, z_min), (x_max, y_max, z_max)) = ((min(x_min_d, x_min_t), min(y_min_d, y_min_t), min(z_min_d, z_min_t)), (max(x_max_d, x_max_t), max(y_max_d, y_max_t), max(z_max_d, z_max_t)));

    let width  = (x_max - x_min) + 1;
    let height = (y_max - y_min) + 1;
    let depth  = (z_max - z_min) + 1;

    fn @clamp_index(i: i32, j: i32, k: i32) -> (i32, i32, i32) {
        //clamp between 0 and width-height-depth
        let is = if i < 0 { 0 } else if i >= width  { width  - 1 } else { i };
        let js = if j < 0 { 0 } else if j >= height { height - 1 } else { j };
        let ks = if k < 0 { 0 } else if k >= depth  { depth  - 1 } else { k };

        (is, js, ks)
    }

    fn @to_nvdb_index(i: i32, j:i32, k: i32) -> (i32, i32, i32) {
        (i + x_min, j + y_min, k + z_min)
    }

    fn @from_nvdb_index(ni: i32, nj: i32, nk: i32) -> (i32, i32, i32) {
        (ni - x_min, nj - y_min, nk - z_min)
    }

    fn @nvdb_to_sparse_index(i: i32, j: i32, k: i32, dim: i32) -> (i32, i32, i32) {
        let (ni, nj, nk)    = to_nvdb_index(i, j, k);
        let (sni, snj, snk) = general_to_sparse_index(ni, nj, nk, dim);

        from_nvdb_index(sni, snj, snk)
    }

    fn @make_nvdb_accessor() -> VolumeAccessor {

        let mut last_density_path = Option[AccessPath]::None;
        let mut last_temperature_path = Option[AccessPath]::None;


        fn @cache_path_get_value_density(i: i32, j: i32, k: i32) -> (f32, AccessPath) {
            if let Option[AccessPath]::Some(previous_path) = last_density_path {
                let (access, path) = bottom_up_access(tree_density, to_nvdb_index(clamp_index(i, j, k)), 1, previous_path);
                last_density_path = Option[AccessPath]::Some(path);
                let value = access.get_value();
                return(value, path)
            } else {
                let (access, path) = top_down_access(tree_density, to_nvdb_index(clamp_index(i, j, k)), 1);
                last_density_path = Option[AccessPath]::Some(path);
                let value = access.get_value();
                return(value, path)
            }
        }

        fn @cache_path_get_value_temperature(i: i32, j: i32, k: i32, tree: NanoVDBTree[f32, f32]) -> (f32, AccessPath) {
            if let Option[AccessPath]::Some(previous_path) = last_temperature_path {
                let (access, path) = bottom_up_access(tree, to_nvdb_index(clamp_index(i, j, k)), 1, previous_path);
                last_temperature_path = Option[AccessPath]::Some(path);
                let value = access.get_value();
                return(value, path)
            } else {
                let (access, path) = top_down_access(tree, to_nvdb_index(clamp_index(i, j, k)), 1);
                last_temperature_path = Option[AccessPath]::Some(path);
                let value = access.get_value();
                return(value, path)
            }
        }

        fn @cache_path_get_value_temperature_option(i: i32, j: i32, k: i32) -> Option[(f32, AccessPath)] {
            if let Option[NanoVDBTree[f32, f32]]::Some(tree_temperature) = tree_temperature_option {
                let temp_and_path = cache_path_get_value_temperature(i, j, k, tree_temperature);
                Option[(f32, AccessPath)]::Some(temp_and_path)
            } else {
                Option[(f32, AccessPath)]::None
            }
        }
        
        VolumeAccessor {
            properties_at_indx = @|i, j, k| {
                let (value_d, path_d) = cache_path_get_value_density(i, j, k);
                let temp_and_path_option = cache_path_get_value_temperature_option(i, j, k);
                if let Option[(f32, AccessPath)]::Some((value_t, path_t)) = temp_and_path_option {
                    let min_dim = min(path_d.sparse_dim, path_t.sparse_dim);
                    (volume_shader.volume_properties(make_nvdb_volume_values(value_d, Option[f32]::Some(value_t))), min_dim)
                } else {
                    (volume_shader.volume_properties(make_nvdb_volume_values(value_d, Option[f32]::None)), path_d.sparse_dim)
                }
            },
            sparse_maj_at_indx = @|i, j, k, maj_dim| {
                //TODO: potentially cache the access path for later reuse
                let (access_d, density_path) = if let Option[AccessPath]::Some(previous_path_d) = last_density_path {
                    bottom_up_access(tree_density, to_nvdb_index(clamp_index(i, j, k)), maj_dim, previous_path_d)
                } else {
                    top_down_access(tree_density, to_nvdb_index(clamp_index(i, j, k)), maj_dim)
                };
                last_density_path = Option[AccessPath]::Some(density_path);

                let maj_d = access_d.get_maximum();                
                let (maj_t_option, min_dim) = if let Option[NanoVDBTree[f32, f32]]::Some(tree_temperature) = tree_temperature_option {
                    let (access_t, temperature_path) = if let Option[AccessPath]::Some(previous_path_t) = last_density_path {
                        bottom_up_access(tree_temperature, to_nvdb_index(clamp_index(i, j, k)), maj_dim, previous_path_t)
                    } else {
                        top_down_access(tree_temperature, to_nvdb_index(clamp_index(i, j, k)), maj_dim)
                    };
                    last_temperature_path = Option[AccessPath]::Some(temperature_path);
                    (Option[f32]::Some(access_t.get_maximum()), min(access_d.dimension, access_t.dimension))
                } else {
                    (Option[f32]::None, access_d.dimension)
                };
        
                let maj_props = volume_shader.volume_properties(make_nvdb_volume_values(maj_d, maj_t_option));

                (maj_props.coeff_extinction, min_dim)
            }
        }
    }

    make_volume(width, height, depth, make_nvdb_accessor, nvdb_to_sparse_index)
}
