struct KeyAddressPair[KeyT] {
    key:     KeyT,
    address: i32,
}

struct AccessPath {
    sparse_dim: i32,
    upper_node: Option[KeyAddressPair[u64]],
    lower_node: Option[KeyAddressPair[i32]],
    leaf_node:  Option[KeyAddressPair[i32]]
}

fn @make_key_address_pair[KeyT](key: KeyT, address: i32) = KeyAddressPair[KeyT] {
    key     = key,
    address = address
};

fn @make_empty_path() = AccessPath {
    sparse_dim = 999999,
    upper_node = Option[KeyAddressPair[u64]]::None,
    lower_node = Option[KeyAddressPair[i32]]::None,
    leaf_node  = Option[KeyAddressPair[i32]]::None
};

fn @make_sparse_upper_path() = AccessPath {
    sparse_dim = DIM_UPPER,
    upper_node = Option[KeyAddressPair[u64]]::None,
    lower_node = Option[KeyAddressPair[i32]]::None,
    leaf_node  = Option[KeyAddressPair[i32]]::None
};

fn @make_sparse_lower_path(upper_node: KeyAddressPair[u64]) = AccessPath {
    sparse_dim = DIM_LOWER,
    upper_node = Option[KeyAddressPair[u64]]::Some(upper_node),
    lower_node = Option[KeyAddressPair[i32]]::None,
    leaf_node  = Option[KeyAddressPair[i32]]::None
};

fn @make_sparse_leaf_path(upper_node: KeyAddressPair[u64], lower_node: KeyAddressPair[i32]) = AccessPath {
    sparse_dim = DIM_LEAF,
    upper_node = Option[KeyAddressPair[u64]]::Some(upper_node),
    lower_node = Option[KeyAddressPair[i32]]::Some(lower_node),
    leaf_node  = Option[KeyAddressPair[i32]]::None
};

fn @make_voxel_path(upper_node: KeyAddressPair[u64], lower_node: KeyAddressPair[i32], leaf_node: KeyAddressPair[i32]) = AccessPath {
    sparse_dim = DIM_VOXEL,
    upper_node = Option[KeyAddressPair[u64]]::Some(upper_node),
    lower_node = Option[KeyAddressPair[i32]]::Some(lower_node),
    leaf_node  = Option[KeyAddressPair[i32]]::Some(leaf_node)
};

fn @get_max_value[ValueT, StatsT](tree: NanoVDBTree[ValueT, StatsT]) -> ValueT {
    let tree_accessor = tree.access_tree_data();

    // =============== Root level ===============
    let root_address       = tree_accessor.get_node_address_root(false);
    let root_node_accessor = tree.access_root_node(root_address);

    root_node_accessor.get_maximum()
}

// traverse the tree from the root to the bottom to find the value of the Voxel
// Warning: i, j, k are NanoVDB indices !!! (ranging from [-A, B] instead of [0, A+B])
// use to_nanovdb_indeces() to convert from Ignis to NanoVDB indices
fn @top_down_access[ValueT, StatsT](tree: NanoVDBTree[ValueT, StatsT], (i: i32, j: i32, k: i32), min_dim: i32) -> (GenericNodeAccessor[ValueT], AccessPath) {

    let tree_accessor = tree.access_tree_data();
   
    // =============== Root level ===============
    let root_address       = tree_accessor.get_node_address_root(false);
    let root_tiles_amount  = tree_accessor.get_node_count_upper();
    let root_node_accessor = tree.access_root_node(root_address);
    let root_tile_key      = root_indices_to_key(i, j, k);

    // If no root tile was found with the key, return background color
    if let Option[RootTileAccessor[ValueT]]::Some(root_tile_accessor) = root_node_accessor.access_tile_by_key(root_tile_key, root_tiles_amount) { // = 800 (320 Hex)

        if min_dim > DIM_UPPER {
            let accessor = GenericNodeAccessor[ValueT] {
                get_minimum  = root_node_accessor.get_minimum,
                get_maximum  = root_node_accessor.get_maximum,
                get_value    = root_node_accessor.get_background,
                is_sparse    = false,
                dimension    = 999999
            };
            return(accessor, make_sparse_upper_path())
        }

        if let Option[i32]::Some(upper_node_address) = root_tile_accessor.get_child_address() {
            // =============== Upper Node Level ===============
            let upper_node_accessor = tree.access_upper_node(upper_node_address);
            let upper_node_pair     = make_key_address_pair(root_tile_key, upper_node_address);
            return(td_upper_access(tree, root_node_accessor, upper_node_accessor, (i, j, k), min_dim, upper_node_pair))
        };

        // child offset of root tile was 0 => Upper node was sparse
        let accessor = GenericNodeAccessor[ValueT] {
            get_minimum  = root_tile_accessor.get_value,
            get_maximum  = root_tile_accessor.get_value,
            get_value    = root_tile_accessor.get_value,
            is_sparse    = true,
            dimension    = DIM_UPPER
        };
        return(accessor, make_sparse_upper_path())
    };
    
    // Root was sparse
    let accessor = GenericNodeAccessor[ValueT] {
        get_minimum  = root_node_accessor.get_background,
        get_maximum  = root_node_accessor.get_background,
        get_value    = root_node_accessor.get_background,
        is_sparse    = true,
        dimension    = 999999
    };

    (accessor, make_empty_path())
}

fn @td_leaf_access[ValueT, StatsT](
    root_node_accessor: RootNodeAccessor[ValueT, StatsT],
    leaf_node_accessor: LeafNodeAccessor[ValueT, StatsT],
    (i: i32, j: i32, k: i32),
    min_dim: i32,
    (upper_node_pair: KeyAddressPair[u64], lower_node_pair: KeyAddressPair[i32], leaf_node_pair: KeyAddressPair[i32])
) -> (GenericNodeAccessor[ValueT], AccessPath) {

    if min_dim > DIM_VOXEL {
        let accessor = GenericNodeAccessor[ValueT] {
            get_minimum  = leaf_node_accessor.get_minimum,
            get_maximum  = leaf_node_accessor.get_maximum,
            get_value    = root_node_accessor.get_background,
            is_sparse    = false,
            dimension    = DIM_LEAF
        };
        return(accessor, make_sparse_leaf_path(upper_node_pair, lower_node_pair))
    }

    let voxel_index = leaf_indices_to_array_index(i, j, k);
    let path        = make_voxel_path(upper_node_pair, lower_node_pair, leaf_node_pair);
    // If the vxl has a value, return the voxel value else return the background value
    if leaf_node_accessor.tile_has_value(voxel_index) {
        // return the value of the vxl
        let accessor = GenericNodeAccessor[ValueT] {
            get_minimum  = @|| leaf_node_accessor.get_value(voxel_index),
            get_maximum  = @|| leaf_node_accessor.get_value(voxel_index),
            get_value    = @|| leaf_node_accessor.get_value(voxel_index),
            is_sparse    = true,
            dimension    = DIM_VOXEL
        };
        (accessor, path)
    } else {
        let accessor = GenericNodeAccessor[ValueT] {
            get_minimum  = root_node_accessor.get_background,
            get_maximum  = root_node_accessor.get_background,
            get_value    = root_node_accessor.get_background,
            is_sparse    = true,
            dimension    = DIM_VOXEL
        };
        (accessor, path)
    }
}

fn @td_lower_access[ValueT, StatsT](
    tree: NanoVDBTree[ValueT, StatsT],
    root_node_accessor: RootNodeAccessor[ValueT, StatsT],
    lower_node_accessor: InternalNodeAccessor[ValueT, StatsT],
    (i: i32, j: i32, k: i32),
    min_dim: i32,
    (upper_node_pair: KeyAddressPair[u64], lower_node_pair: KeyAddressPair[i32])
) -> (GenericNodeAccessor[ValueT], AccessPath) {

    if min_dim > DIM_LEAF {
        let accessor = GenericNodeAccessor[ValueT] {
            get_minimum  = lower_node_accessor.get_minimum,
            get_maximum  = lower_node_accessor.get_maximum,
            get_value    = root_node_accessor.get_background,
            is_sparse    = false,
            dimension    = DIM_LOWER
        };
        return(accessor, make_sparse_leaf_path(upper_node_pair, lower_node_pair))
    }

    let lower_tile_index    = lower_indices_to_array_index(i, j, k);
    let lower_tile_accessor = lower_node_accessor.access_tile(lower_tile_index);
    let leaf_node_sparse    = !lower_node_accessor.tile_has_children(lower_tile_index);
    // If the lower tile has no children, return the tile value (if it has one) else return the background value
    if leaf_node_sparse {
        // leaf is sparse
        let path = make_sparse_leaf_path(upper_node_pair, lower_node_pair);
        if lower_node_accessor.tile_has_value(lower_tile_index) {
            let accessor = GenericNodeAccessor[ValueT] {
                get_minimum  = lower_tile_accessor.get_value,
                get_maximum  = lower_tile_accessor.get_value,
                get_value    = lower_tile_accessor.get_value,
                is_sparse    = leaf_node_sparse,
                dimension    = DIM_LEAF
            };
            return(accessor, path)
        } else {
            let accessor = GenericNodeAccessor[ValueT] {
                get_minimum  = root_node_accessor.get_background,
                get_maximum  = root_node_accessor.get_background,
                get_value    = root_node_accessor.get_background,
                is_sparse    = leaf_node_sparse,
                dimension    = DIM_LEAF
            };
            return(accessor, path)
        }
    }
    let leaf_node_address  = lower_tile_accessor.get_child_address();
    let leaf_node_accessor = tree.access_leaf_node(leaf_node_address);
    let leaf_node_pair     = make_key_address_pair(lower_tile_index, leaf_node_address);
    td_leaf_access(root_node_accessor, leaf_node_accessor, (i, j, k), min_dim, (upper_node_pair, lower_node_pair, leaf_node_pair))
}

fn @td_upper_access[ValueT, StatsT](
    tree: NanoVDBTree[ValueT, StatsT],
    root_node_accessor: RootNodeAccessor[ValueT, StatsT],
    upper_node_accessor: InternalNodeAccessor[ValueT, StatsT],
    (i: i32, j: i32, k: i32),
    min_dim: i32,
    upper_node_pair: KeyAddressPair[u64]
) -> (GenericNodeAccessor[ValueT], AccessPath) {

    if min_dim > DIM_LOWER {
        let accessor = GenericNodeAccessor[ValueT] {
            get_minimum  = upper_node_accessor.get_minimum,
            get_maximum  = upper_node_accessor.get_maximum,
            get_value    = root_node_accessor.get_background,
            is_sparse    = false,
            dimension    = DIM_UPPER
        };
        return(accessor, make_sparse_upper_path())
    }
    
    let upper_tile_index    = upper_indices_to_array_index(i, j, k);
    let lower_node_sparse   = !upper_node_accessor.tile_has_children(upper_tile_index);
    let upper_tile_accessor = upper_node_accessor.access_tile(upper_tile_index);

    // return the tile value (if it has one) else return the background value
    if lower_node_sparse {
        let path = make_sparse_lower_path(upper_node_pair);
        if upper_node_accessor.tile_has_value(upper_tile_index) {
            let accessor = GenericNodeAccessor[ValueT] {
                get_minimum  = upper_tile_accessor.get_value,
                get_maximum  = upper_tile_accessor.get_value,
                get_value    = upper_tile_accessor.get_value,
                is_sparse    = lower_node_sparse,
                dimension    = DIM_LOWER
            };
            return(accessor, path)
        } else {
            let accessor = GenericNodeAccessor[ValueT] {
                get_minimum  = root_node_accessor.get_background,
                get_maximum  = root_node_accessor.get_background,
                get_value    = root_node_accessor.get_background,
                is_sparse    = lower_node_sparse,
                dimension    = DIM_LOWER
            };
            return(accessor, path)
        }
    }

    let lower_node_address  = upper_tile_accessor.get_child_address();
    let lower_node_accessor = tree.access_lower_node(lower_node_address);
    let lower_node_pair     = make_key_address_pair(upper_tile_index, lower_node_address);
    td_lower_access(tree, root_node_accessor, lower_node_accessor, (i, j, k), min_dim, (upper_node_pair, lower_node_pair))
}


fn @bottom_up_access[ValueT, StatsT](tree: NanoVDBTree[ValueT, StatsT], (i: i32, j: i32, k: i32), min_dim: i32, path: AccessPath) -> (GenericNodeAccessor[ValueT], AccessPath) {

    let tree_accessor      = tree.access_tree_data();
    let root_address       = tree_accessor.get_node_address_root(false);
    let root_node_accessor = tree.access_root_node(root_address);

    
    let def_pair_i32 = make_key_address_pair(0:i32, 0:i32);
    let def_pair_u64 = make_key_address_pair(0:u64, 0:i32);

    // =============== Leaf Node Level ===============
    if let Option[KeyAddressPair[i32]]::Some(leaf_node_pair) = path.leaf_node {
        let leaf_node_accessor = tree.access_leaf_node(leaf_node_pair.address);
        if leaf_node_pair.key == lower_indices_to_array_index(i, j, k) && min_dim <= DIM_LEAF {
            return(
                td_leaf_access(
                    root_node_accessor,
                    leaf_node_accessor,
                    (i, j, k),
                    min_dim,
                    (from_option(path.upper_node, def_pair_u64), from_option(path.lower_node, def_pair_i32), leaf_node_pair)
                )
            )
        }
    }
    // =============== Lower Node Level ===============
    if let Option[KeyAddressPair[i32]]::Some(lower_node_pair) = path.lower_node {
        let lower_node_accessor = tree.access_lower_node(lower_node_pair.address);
        if lower_node_pair.key == upper_indices_to_array_index(i, j, k) && min_dim <= DIM_LOWER {
            return(
                td_lower_access(
                    tree,
                    root_node_accessor,
                    lower_node_accessor,
                    (i, j, k),
                    min_dim,
                    (from_option(path.upper_node, def_pair_u64), lower_node_pair)
                )
            )
        }
    }

    // =============== Upper Node Level ===============
    if let Option[KeyAddressPair[u64]]::Some(upper_node_pair) = path.upper_node {
        let upper_node_accessor = tree.access_upper_node(upper_node_pair.address);
        if upper_node_pair.key == root_indices_to_key(i, j, k) && min_dim <= DIM_LOWER {
            return(
                td_upper_access(
                    tree,
                    root_node_accessor,
                    upper_node_accessor,
                    (i, j, k),
                    min_dim,
                    from_option(path.upper_node, def_pair_u64)
                )
            )
        }
    }

    top_down_access(tree, (i, j, k), min_dim)

}
