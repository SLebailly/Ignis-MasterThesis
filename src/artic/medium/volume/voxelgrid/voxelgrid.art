static BUFFER_VOXEL_SIZE = 12;

// For simple voxel grids (custom format defined by bin file)
struct SimpleVolumeVoxelValue {
    sigma_a:  Color,
    sigma_s:  Color,
    emission: Color
}

fn @make_simple_volume_voxel_value(sigma_a: Color, sigma_s: Color, emission: Color) = SimpleVolumeVoxelValue {
    sigma_a  = sigma_a,
    sigma_s  = sigma_s,
    emission = emission
};

fn @make_voxel_grid(buffer: DeviceBuffer, shader: VolumeShader[SimpleVolumeVoxelValue]) -> Volume {
    
    let width  = buffer.load_i32_host(0);
    let height = buffer.load_i32_host(1);
    let depth  = buffer.load_i32_host(2);

    fn @access_data() = VolumeAccessor {
        properties_at_indx = @|x, y, z| {
            //clamp between 0 and width-height-depth
            let xs = if x < 0 { 0 } else if x >= width  { width  - 1 } else { x };
            let ys = if y < 0 { 0 } else if y >= height { height - 1 } else { y };
            let zs = if z < 0 { 0 } else if z >= depth  { depth  - 1 } else { z };
    
            let i = xs + (ys * width) + (zs * width * height);
    
            // every Voxel consists of 3 Vec3, which each take 4 spots (4th value is discarded)
            let sigma_a  = vec3_to_color(buffer.load_vec3(4 + (BUFFER_VOXEL_SIZE*i)));
            let sigma_s  = vec3_to_color(buffer.load_vec3(4 + (BUFFER_VOXEL_SIZE*i) + 4));
            let emission = vec3_to_color(buffer.load_vec3(4 + (BUFFER_VOXEL_SIZE*i) + 8));
    
            (shader.volume_properties(make_simple_volume_voxel_value(sigma_a, sigma_s, emission)), 1)
        }
    };

    make_volume(width, height, depth, access_data, @|_origin: Vec3, _ndir: Vec3| make_gray_color(1:f32)) //TODO: Add actual majorant (maybe constant for the whole grid) here

}

fn @make_debug_voxel_grid(buffer: DeviceBuffer, _shader: VolumeShader[SimpleVolumeVoxelValue]) -> Volume {

    let width  = buffer.load_i32_host(0);
    let height = buffer.load_i32_host(1);
    let depth  = buffer.load_i32_host(2);

    let shader = make_simple_volume_shader(1:f32);

    fn @access_data() = VolumeAccessor {
        properties_at_indx = @|x, y, z| {
            let scalar = 5:f32;
            let sigma = make_color((x as f32 * scalar)  / (width as f32), (y as f32  * scalar)/ (height as f32), (z as f32  * scalar) / (depth as f32), 1:f32);
    
            (shader.volume_properties(make_simple_volume_voxel_value(sigma, sigma, sigma)), 1)
        }
    };

    make_volume(width, height, depth, access_data, @|_origin: Vec3, _ndir: Vec3| make_gray_color(1:f32))
}

fn @make_vacuum_voxel_grid(majorant: f32) -> Volume {

    let width  = 1;
    let height = 1;
    let depth  = 1;

    fn @access_data() = VolumeAccessor {
        properties_at_indx = @|_x, _y, _z| {
            (make_vacuum_volume_properties(), 1)
        }
    };

    make_volume(width, height, depth, access_data, @|_origin: Vec3, _ndir: Vec3| make_gray_color(majorant))
}