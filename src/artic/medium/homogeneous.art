fn @make_homogeneous_medium(sigma_a: Color, sigma_s: Color, phase: PhaseFunction) -> Medium {
    let eps     = 1e-3 : f32;
    let volume_properties = make_volume_properties(sigma_s, sigma_a, make_gray_color(0:f32));
    let sigma_t = volume_properties.coeff_extinction;

    fn @eval_tr(t:f32) {
        optical_thickness_to_transmittance(volume_properties.optical_thickness(t))
    }

    fn @eval(p_start: Vec3, p_end: Vec3) -> Color {
        let dir_u = vec3_sub(p_end, p_start);
        let dist  = vec3_len(dir_u);
        eval_tr(dist)
    }

    if ?sigma_s && is_black_eps(sigma_s, 1e-4) {
        // No scattering
        Medium {
            phase = @|_| phase,
            eval  = eval,
            eval_inf = @|_, _| if is_black_eps(sigma_t, 1e-4) { color_builtins::white } else { color_builtins::black },
            sample   = @|_, _, _| reject_medium_sample(),
            pdf      = @|_, _, _| 0,
            is_homogeneous = true
        }
    } else {
        let sigma_ind = vec3_min_index(color_to_vec3(sigma_t));
        let sigma_t_p = color_at(sigma_t, sigma_ind);

        Medium {
            phase = @|_| phase,
            eval  = eval,
            eval_inf = @|_, _| color_builtins::black,
            pdf = @|p_start, p_end, p| {
                let dir_u = vec3_sub(p, p_start);
                let dist  = vec3_len(dir_u);

                let on_surf = vec3_len2(vec3_sub(p_end, p)) <= eps * eps;
                math_builtins::exp(-sigma_t_p * dist) * if !on_surf { sigma_t_p } else { 1 }
            },
            sample   = @|rnd, p_start, p_end| {
                let dir_u = vec3_sub(p_end, p_start);
                let dist  = vec3_len(dir_u);

                let ndist = math_builtins::fmin[f32](dist, -math_builtins::log(1 - randf(rnd) * 0.99999) / sigma_t_p);

                if math_builtins::fabs(dist - ndist) <= eps { return(reject_medium_sample()) }

                let dir = vec3_mulf(dir_u, safe_div(1, dist));
                let pos = vec3_add(p_start, vec3_mulf(dir, ndist));
                let tr  = eval_tr(ndist);

                let pdf = color_at(tr, sigma_ind) * sigma_t_p;
                make_medium_sample(pos, pdf, color_divf(tr, pdf), volume_properties)
            },
            is_homogeneous = true
        }
    }
}
