/**
 * Implementation of Free-path sampling and Transmittance Estimation through Regular tracking
 * Sample the point of the next light-medium collision along the line of flight:
 *  1- compute random sampled value of transmittance between 0 and 1
 *  2- sweep along ray and compute the accumulated optical thickness until it first exceeds the sampled value
 *  3- coordinates where the accumulated optical thickness exceeds random variable is the sampled point.
 * 
 * TODO: remove NaN occurances
 */
fn @make_regular_tracking_medium(_ctx: ShadingContext, pms: PointMapperSet, volume: Volume, phase: PhaseFunction, interpolate: bool, max_scattering: i32, volume_marcher_constructor: fn (Vec3, Vec3, Volume, bool) -> VolumeMarcher) -> Medium {

    // the values that will be used for clamping the local coordinates
    let loc_min = vec3_expand(VOLUME_BOUNDS_FLT_MIN);
    let loc_max = vec3_expand(1 - VOLUME_BOUNDS_FLT_MIN);

    /**
     * Next-Flight estimation using regular tracking
     */
    fn @next_flight(rnd: &mut RndState, p_start: Vec3, p_end: Vec3) -> Option[MediumSample] {
        
        // sample value of transmittance (uniformly)
        let sampled_value_tr  = sample_transmittance_uniform(rnd); // = 1:f32 - (randf(rnd) * 0.99999)
        let sampled_value_opt = transmittance_to_optical_thickness_f32(sampled_value_tr);

        // local coordinates
        let l_start = pms.to_normalized_point(p_start);
        let l_end   = pms.to_normalized_point(p_end);

        if (l_start.x < -VOLUME_BOUNDS_FLT_MIN || l_start.y < -VOLUME_BOUNDS_FLT_MIN || l_start.z < -VOLUME_BOUNDS_FLT_MIN || l_start.x > 1:f32 + VOLUME_BOUNDS_FLT_MIN || l_start.y > 1:f32 + VOLUME_BOUNDS_FLT_MIN || l_start.z > 1:f32 + VOLUME_BOUNDS_FLT_MIN) {
            return(reject_medium_sample())
        }

        // directions
        let dir        = vec3_sub(p_end, p_start);
        let max_dist   = vec3_len(dir);
        let n_dir      = vec3_divf(dir, max_dist);
        let l_dir      = vec3_sub(l_end, l_start);
        let l_max_dist = vec3_len(l_dir);
        let l_n_dir    = vec3_divf(l_dir, l_max_dist);
        let scale      = max_dist / l_max_dist; // local * scale = global

        let mut acc_opt    = make_gray_color(0:f32); // accumulated optical thickness
        let volume_marcher = volume_marcher_constructor(vec3_clamp(l_start, loc_min, loc_max), l_n_dir, volume, interpolate);
        while (volume_marcher.has_next()) { // ensure that we are still within the volume
            
            // get the values at the current position
            let (current_segment, l_current_dist) = volume_marcher.next_segment();

            // optical thickness in the voxel (sigma_t * distance in the voxel)
            let opt_thickness_in_vxl = current_segment.local_properties.optical_thickness(current_segment.distance * scale);

            // add the optical thickness to the total
            let new_acc_opt = color_add(acc_opt, opt_thickness_in_vxl);

            // take the minimum color channel value
            let min_opt_thickness = vec3_min_value(color_to_vec3(new_acc_opt));

            // optical thickness goes from 0 (full transparency) to sampled value
            if (sampled_value_opt - min_opt_thickness > flt_eps) {
                // sampled distance is not in the current voxel, so continue the iteration (or reject sample if we exceed distance)
                if (l_current_dist * scale > max_dist) { return(reject_medium_sample()) }
                acc_opt = new_acc_opt;
            } else {
                // sampled distance is in the current voxel
                let remaining_opt_thickness_minvalue = sampled_value_opt - vec3_min_value(color_to_vec3(acc_opt));

                let mu_t_p = vec3_min_value(color_to_vec3(current_segment.local_properties.coeff_extinction));
                
                let dist_delta = remaining_opt_thickness_minvalue / mu_t_p; // compute how far to go in the current voxel before reaching the threshold

                let opt_thickness_delta = current_segment.local_properties.optical_thickness(dist_delta);

                acc_opt = color_add(acc_opt, opt_thickness_delta);

                let sampled_dist = (l_current_dist - current_segment.distance) * scale + dist_delta;

                // If exceeded the max_dist, reject the sample
                if (sampled_dist > max_dist) { return(reject_medium_sample()) }
                
                let pos   = vec3_add(p_start, vec3_mulf(n_dir, sampled_dist));
                let trans = optical_thickness_to_transmittance(acc_opt);
                let pdf   = sampled_value_tr * mu_t_p;

                return(make_medium_sample(pos, pdf, color_divf(trans, pdf), current_segment.local_properties))
            } 
        }

        reject_medium_sample()
    }

    /**
     * Evaluates the transmittance between two points in the medium
     */
    fn @eval_tr(p_start: Vec3, p_end: Vec3) -> Color {
        let loc_start  = vec3_clamp(pms.to_normalized_point(p_start), loc_min, loc_max);
        let loc_end    = vec3_clamp(pms.to_normalized_point(p_end),   loc_min, loc_max);
        let dir_u      = vec3_sub(p_end, p_start);
        let loc_dir    = vec3_sub(loc_end, loc_start);
        let scale_diff = math_builtins::sqrt(vec3_len2(dir_u) / math_builtins::fmax(flt_eps, vec3_len2(loc_dir)));

        let local_opt  = eval_optical_thickness(volume, loc_start, loc_end, false);

        optical_thickness_to_transmittance(color_mulf(local_opt, scale_diff))
    }


    
    Medium {
        phase = @|_| phase,
        eval  = @|_, p_start, p_end| {
            eval_tr(p_start, p_end)
        },
        eval_inf = @|_, _| color_builtins::black,
        pdf = |_, _, _| {
            1:f32
        },
        sample = next_flight,
        is_homogeneous = false,
        max_scattering = max_scattering
    }
}


