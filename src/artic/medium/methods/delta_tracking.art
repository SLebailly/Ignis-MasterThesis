static CLAMP_MIN_DISTANCE = 0.00001; // enforces a minimum distance to be stepped inside the medium

/**
 * Implementation of the Delta-Tracking (Woodcock Tracking, Pseudo-Scattering,...) null-collision method
 * Sample the point of the next light-medium collision along the line of flight:
 *  1- determine majorant extinction coefficient to make volume homogenenous
 *  2- sample a random point along the ray proportionally to said pdf assuming the volume is homogeneous with majorant
 *  3- at this point, use rejection sampling to determine if the collision is with a real or fictuous particle:
 *      a. If fictuous, sample next random point along the ray
 *      b. If real, this is the next ray-medium intersection point
 */
fn @make_delta_tracking_medium(_ctx: ShadingContext, pms: PointMapperSet, volume: Volume, phase: PhaseFunction, _interpolate: bool, max_scattering: i32, majorant_dimension: i32) -> Medium {

    // the values that will be used for clamping the local coordinates
    let loc_min  = vec3_expand(VOLUME_BOUNDS_FLT_MIN);
    let loc_max  = vec3_expand(1 - VOLUME_BOUNDS_FLT_MIN);

    let accessor = volume.access_data(); // storing the accessor at this level to be able to leverage bottom-up traversal for nvdb trees

    /**
     * Samples a distance along the ray
     */
    fn @sample_distance_local(rnd: &mut RndState, lpos: Vec3, lndir: Vec3, scale: f32, max_dist: f32) -> (/* dist */ f32, /* majorant */ Color, /* pdf */ f32) {
        // sample value of transmittance (uniformly)
        let sampled_value_tr = sample_transmittance_uniform(rnd); // = 1:f32 - (randf(rnd) * 0.99999)

        let dda = make_majorant_dda_marcher(lpos, lndir, volume, false, majorant_dimension, max_dist / scale);
        let mut majorant      = color_builtins::black;
        let mut sampled_dist  = flt_max;
        let mut majorant_dist = 0:f32;
        let mut mu_t_p        = 1:f32;
        
        while dda.has_next() && sampled_dist > majorant_dist {
            let (segment, local_dist) = dda.next_segment();

            majorant_dist = local_dist * scale;
            majorant      = vec3_to_color(vec3_max(color_to_vec3(segment.local_properties.coeff_extinction), color_to_vec3(majorant)));
            mu_t_p        = vec3_max_value(color_to_vec3(majorant));
            sampled_dist  = if mu_t_p < flt_eps { flt_max } else { - math_builtins::log(sampled_value_tr) / mu_t_p };
        }

        if sampled_dist > majorant_dist {
            sampled_dist = flt_max;
        }

        (sampled_dist, majorant, sampled_value_tr * mu_t_p)
    }

    /**
     * Samples the next Medium interaction (distribution of samples proportional to (majorant) Transmittance along the ray)
     */
    fn @free_flight(rnd: &mut RndState, p_start: Vec3, p_end: Vec3) -> Option[MediumSample] {

        // local coordinates
        let l_start = pms.to_normalized_point(p_start);
        let l_end   = pms.to_normalized_point(p_end);

        if (l_start.x < -VOLUME_BOUNDS_FLT_MIN || l_start.y < -VOLUME_BOUNDS_FLT_MIN || l_start.z < -VOLUME_BOUNDS_FLT_MIN || l_start.x > 1:f32 + VOLUME_BOUNDS_FLT_MIN || l_start.y > 1:f32 + VOLUME_BOUNDS_FLT_MIN || l_start.z > 1:f32 + VOLUME_BOUNDS_FLT_MIN) {
            return(reject_medium_sample())
        }

        // directions
        let dir        = vec3_sub(p_end, p_start);
        let max_dist   = vec3_len(dir);
        let n_dir      = vec3_divf(dir, max_dist);
        let l_dir      = vec3_sub(l_end, l_start);
        let l_max_dist = vec3_len(l_dir);
        let l_n_dir    = vec3_divf(l_dir, l_max_dist);


        let (sampled_dist, mu_t, pdf) = sample_distance_local(rnd, l_start, l_n_dir, max_dist / l_max_dist, max_dist);
        if sampled_dist >= max_dist {
            reject_medium_sample()
        } else {
            let maj_opt = color_mulf(mu_t, sampled_dist);
            let maj_tr  = optical_thickness_to_transmittance(maj_opt);
            let pos     = vec3_add(p_start, vec3_mulf(n_dir, sampled_dist));
            let (props, _dim)  = accessor.properties_at_indx(volume.coord_to_indx(pms.to_normalized_point(pos)));

            make_medium_sample(pos, pdf, color_divf(maj_tr, pdf), homogenize_nullscattering_properties(props, mu_t))
        }

    }

    /**
     * Evaluates the transmittance between two points in the medium using Ratio Tracking
     */
    fn @eval_tr(rnd: &mut RndState, p_start: Vec3, p_end: Vec3) -> Color {
        let dir        = vec3_sub(p_end, p_start);
        let max_dist   = vec3_len(dir);
        let n_dir      = vec3_divf(dir, max_dist);

        let l_start    = pms.to_normalized_point(p_start);
        let cl_start   = vec3_clamp(pms.to_normalized_point(l_start), loc_min, loc_max);
        let l_end      = pms.to_normalized_point(p_end);
        let l_n_dir    = vec3_normalize(vec3_sub(l_end, l_start));

        let mu_t   = volume.get_majorant_extinction(cl_start, l_n_dir);
        let mu_t_p = vec3_max_value(color_to_vec3(mu_t));

        let mut t    = 0:f32;
        let mut tr   = color_builtins::white;
        let accessor = volume.access_data();

        let mut sampled_dist = sample_dist_proptrans(rnd, mu_t_p);

        while (t + sampled_dist < max_dist) {
            let pos           = vec3_add(p_start, vec3_mulf(n_dir, t));
            let l_pos         = pms.to_normalized_point(pos);
            let cl_pos        = vec3_clamp(l_pos, loc_min, loc_max);
            let (props, _dim) = accessor.properties_at_indx(volume.coord_to_indx(cl_pos));
            let homogenized_props = homogenize_nullscattering_properties(props, mu_t);
            tr = color_mul(tr, color_div(homogenized_props.coeff_fictional, homogenized_props.coeff_extinction));

            t = t + sampled_dist;
            sampled_dist = sample_dist_proptrans(rnd, mu_t_p);
        }
        tr
    }
    
    Medium {
        phase = @|_| phase,
        eval  = eval_tr,
        eval_inf = @|_, _| color_builtins::black,
        pdf = |p_start, p_end, pos| {
            let l_start  = pms.to_normalized_point(p_start);
            let l_end    = pms.to_normalized_point(p_end);
            let max_dist = vec3_len(vec3_sub(p_end, p_start));
            let dist     = vec3_len(vec3_sub(pos, p_start));

            let cl_start = vec3_clamp(l_start, loc_min, loc_max);
            let cl_end   = vec3_clamp(l_end,   loc_min, loc_max);
            let cl_ndir  = vec3_normalize(vec3_sub(cl_end, cl_start));

            let mu_t   = volume.get_majorant_extinction(cl_start, cl_ndir);
            let mu_t_p = vec3_max_value(color_to_vec3(mu_t));
            let tr     = optical_thickness_to_transmittance_f32(mu_t_p * math_builtins::fmin(dist, max_dist));

            if (dist + flt_eps >= max_dist) {
                tr
            } else {
                mu_t_p * tr
            }
        },
        sample = free_flight,
        is_homogeneous = false,
        max_scattering = max_scattering
    }
}