fn @make_vacuum_medium()-> Medium {
    Medium {
        phase          = @|_| make_delta_phase(1),
        eval           = @|_, _, _| color_builtins::white,
        eval_inf       = @|_, _| color_builtins::white,
        sample         = @|_, _, _| reject_medium_sample(),
        pdf            = @|_, _, _| 0,
        is_homogeneous = true
    }
}

fn @optical_thickness_to_transmittance_f32(optical_thickness: f32) -> f32 {
    math_builtins::exp(-optical_thickness)
}

fn @optical_thickness_to_transmittance(optical_thickness: Color) -> Color {
    make_color(
        optical_thickness_to_transmittance_f32(optical_thickness.r),
        optical_thickness_to_transmittance_f32(optical_thickness.g),
        optical_thickness_to_transmittance_f32(optical_thickness.b),
        optical_thickness.a
    )
}

fn @transmittance_to_optical_thickness_f32(transmittance: f32) -> f32 {
    - math_builtins::log(transmittance)
}

fn @transmittance_to_optical_thickness(transmittance: Color) -> Color {
    make_color(
        transmittance_to_optical_thickness_f32(transmittance.r),
        transmittance_to_optical_thickness_f32(transmittance.g),
        transmittance_to_optical_thickness_f32(transmittance.b),
        transmittance.a
    )
}

fn print_vec3(vec: Vec3) {
    print_string("(");
    print_f32(vec.x);
    print_string(", ");
    print_f32(vec.y);
    print_string(", ");
    print_f32(vec.z);
    print_string(")");
}

fn print_color(c: Color) {
    print_string("(");
    print_f32(c.r);
    print_string(", ");
    print_f32(c.g);
    print_string(", ");
    print_f32(c.b);
    print_string(")");
}

fn print_nl() {
    print_string("\n");
}

fn prints_f32(description: &[u8], f: f32) {
    print_string(description);
    print_string(" ");
    print_f32(f);
    print_nl();
}

fn prints_vec3(description: &[u8], v: Vec3) {
    print_string(description);
    print_string(" ");
    print_vec3(v);
    print_nl();
}



