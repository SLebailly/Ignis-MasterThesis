// See http://psgraphics.blogspot.com/2011/01/improved-code-for-concentric-map.html
fn @square_to_concentric_disk(p: Vec2) -> Vec2 {
    let a = 2 * p.x - 1;
    let b = 2 * p.y - 1;

    if (a == 0 && b == 0) {
        make_vec2(0, 0)
    } else if (a * a > b * b) { 
        // Uses squares instead of absolute values
        // Top half
        let phi = (flt_pi/4) * safe_div(b, a);
        let x = math_builtins::cos(phi) * a;
        let y = math_builtins::sin(phi) * a;
        make_vec2(x, y)
    } else {
        // Bottom half
        let phi = (flt_pi/2) - (flt_pi/4) * safe_div(a, b);
        let x = math_builtins::cos(phi) * b;
        let y = math_builtins::sin(phi) * b;
        make_vec2(x, y)
    }
}

fn @concentric_disk_to_square(p: Vec2) -> Vec2 {
    let quadrant = math_builtins::fabs(p.x) > math_builtins::fabs(p.y);
    let r_sign   = if quadrant { p.x } else { p.y }; // If quadrant 0 or 2
    let r        = math_builtins::copysign(vec2_len(p), r_sign);

    let phi = math_builtins::atan2(
        prodsign(p.y, r_sign),
        prodsign(p.x, r_sign));

    let c = 4 * phi / flt_pi;
    let t = (if quadrant { c } else { 2 - c }) * r;

    let a = if quadrant { r } else { t };
    let b = if quadrant { t } else { r };

    make_vec2((a + 1) * 0.5, (b + 1) * 0.5)
}
