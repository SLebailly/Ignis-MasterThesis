/*SurfaceParameters
    base_color:       Color,
    flatness:           f32,
    metallic:           f32,
    ior:                f32,
    specular_tint:      f32,
    roughness:          f32,
    anisotropic:        f32,
    sheen:              f32,
    sheen_tint:         f32,
    clearcoat:          f32,
    clearcoat_gloss:    f32,
    spec_trans:         f32,
    relative_ior:       f32,
    //scatter_distance: f32,
    //diff_trans:       f32,
    //transmittance:    Vec3
*/

//clearcoat part
fn @GTR1(absHdotL: f32, a: f32)->f32{
    if (a >= 1) {  return (1/flt_pi) }

    let a2 = a * a;
    (a2 - 1) / (flt_pi * fastlog2(a2) * (1 + (a2 - 1) * absHdotL * absHdotL))

}

fn @smith_GGX1(w: Vec3, a: f32)-> f32{
    let a2 = a * a;
    let absNdotV = abs_cos_theta(w);

    2 / (1 + math_builtins::sqrt(a2 + ( 1 - a2) * absNdotV * absNdotV))
}

fn @make_clearcoat_bsdf(clearcoat: f32, alpha: f32, wo: Vec3, H: Vec3, wi: Vec3, upper_hemisphere: bool) = Bsdf {
    eval = @ |_in_dir, _out_dir| {

        if (clearcoat <= 0 || !upper_hemisphere) { return (black) }

        let absNdotH = abs_cos_theta(H);
        let HdotL = vec3_dot(H, wi);

        let d = GTR1(absNdotH, lerp(0.1, 0.001, alpha));
        let f = lerp(1,schlick_approx(HdotL), 0.04);
        let gl = smith_GGX1(wi, 0.25);
        let gv = smith_GGX1(wo, 0.25);

        make_gray_color(0.25 * clearcoat * d * f * gl * gv)
    },
    pdf = @ |_in_dir, _out_dir| {
        0
    },
    sample = @ |_rnd, out_dir, _adjoint| {
        make_option(BsdfSample { in_dir = out_dir, pdf = 0, cos = 1, color = black })
    },
    is_specular = false
};


//diffuse part
fn @compute_retro_diffuse(roughness: f32, H: Vec3, wi: Vec3, fl: f32, fv: f32) -> f32{

    let rr = 2 * roughness * roughness * vec3_dot(H, wi) * vec3_dot(H, wi); 
    rr * (fl + fv + fl * fv * (rr - 1))
}

fn @make_diffuse_brdf(roughness: f32, _flatness: f32, wo: Vec3, H: Vec3, wi: Vec3, diffuse_weight: f32) = Bsdf {
    eval = @ |_in_dir, _out_dir| {   
        if (diffuse_weight <= 0) {return (black) }
        let absNdotL = abs_cos_theta(wi);
        let absNdotV = abs_cos_theta(wo);

        let fl = schlick_approx(absNdotL);
        let fv = schlick_approx(absNdotV);

        let retro = compute_retro_diffuse(roughness, H, wi, fl, fv);
        if (retro == 0) {return (black)}
        make_gray_color(1 / flt_pi * retro)
    },
    pdf = @ |_in_dir, _out_dir| {
        0
    },
    sample = @ |_rnd, out_dir, _adjoint| {
        make_option(BsdfSample { in_dir = out_dir, pdf = 0, cos = 1, color = black })
    },
    is_specular = false
};


//Specular part
fn @disney_fresnel(base_color: Color, relative_ior: f32, specular_tint: f32, metallic: f32, ior: f32, wo: Vec3, H: Vec3, wi: Vec3)-> Color{
    let absHdotV = math_builtins::fabs(vec3_dot(H, wo));

    let tint = calculate_tint(base_color);

    let r = color_mulf(color_lerp(make_gray_color(1), tint, specular_tint), schlick_from_relative_ior(relative_ior));
    
    let R0 = (color_lerp(r, base_color, metallic));

    let d = dielectric(absHdotV, 1, ior);
    let metallic_fresnel = schlick(R0, vec3_dot(wi, H));

    color_lerp(make_gray_color(d), metallic_fresnel, metallic)
}

fn @ggx_aniso_d(ax: f32, ay: f32, H: Vec3) -> f32{
    
    let ax2 = ax * ax;
    let ay2 = ay * ay;
    if (ax2 == 0 || ay2 == 0){ return (0)}

    let HdotX2 = H.x * H.x;
    let HdotY2 = H.z * H.z;
    let costheta2 = cos_2_theta(H);

    1 / (flt_pi * ax * ay * (HdotX2/ax2 + HdotY2/ay2 + costheta2) * (HdotX2/ax2 + HdotY2/ay2 + costheta2))
}

fn @smithG_GGX_aniso(w: Vec3, ax: f32, ay: f32) -> f32{
    
        let abs_tan_theta = math_builtins::fabs(tan_theta(w));
        if (abs_tan_theta == flt_inf) { return (0) }

        let a = math_builtins::sqrt(cos_2_phi(w) * ax * ax + sin_2_phi(w) * ay * ay);
        let a2tan2theta = a * a * abs_tan_theta * abs_tan_theta;
        if (a2tan2theta == 0){ return (0)}
        let lambda = 0.5 * (-1 + math_builtins::sqrt(1 + a2tan2theta));
        1 / (1 + lambda)
}

fn @make_specular_brdf(anisotropic: f32, roughness: f32, base_color: Color, relative_ior: f32, specular_tint: f32, metallic: f32, ior: f32, wo: Vec3, H: Vec3, wi: Vec3) = Bsdf {
    eval = @ |_in_dir, _out_dir| {

        let NdotL = cos_theta(wi);
        let NdotV = cos_theta(wo);

        //upper hemisphere + do not divide by 0
        if (NdotL <= 0 || NdotV <= 0){return (black) }

        let aspect = math_builtins::sqrt(1 - 0.9 * anisotropic);
        let r2 = roughness * roughness;
        let ax = r2 / aspect;
        let ay = r2 * aspect;

        let d = ggx_aniso_d(ax, ay, H);
        let g1 = smithG_GGX_aniso(wi, ax, ay);
        let gv = smithG_GGX_aniso(wo, ax, ay);

        let f = disney_fresnel(base_color, relative_ior, specular_tint, metallic, ior, wo, H, wi);

        let dg = d * g1 * gv;
        let c1 = color_mulf(f, dg);
        let c2 = 1 / (4 * NdotL * NdotV);

        color_mulf(c1, c2)
    },
    pdf = @ |_in_dir, _out_dir| {
        0
    },
    sample = @ |_rnd, out_dir, _adjoint| {
        make_option(BsdfSample { in_dir = out_dir, pdf = 0, cos = 1, color = black })
    },
    is_specular = true
};


//sheen
fn @calculate_tint(base_color: Color)->Color{
    let lum = vec3_dot(make_vec3(0.3, 0.6, 1), color_to_vec3(base_color));
    if (lum > 0) { return (color_mulf(base_color, (1/lum))) }
    else { return ( make_gray_color(1)) }
}

fn @sheen_lobe(sheen: f32, base_color: Color, sheen_tint: f32, H: Vec3, wi: Vec3)-> Color{
    if (sheen <= 0 ){ return (black) }

    let HdotL = vec3_dot(H, wi);
    let tint = calculate_tint(base_color);
    color_mulf(color_lerp(make_gray_color(1), tint, sheen_tint), sheen * schlick_approx(HdotL))
}

//disney bsdf
fn @make_disney_bsdf(surf: SurfaceElement, base_color: Color, flatness: f32, metallic: f32, ior: f32, specular_tint: f32, roughness: f32,
                     anisotropic: f32, sheen: f32, sheen_tint: f32, clearcoat: f32, clearcoat_gloss: f32, _spec_trans: f32, 
                     relative_ior: f32, _scatter_distance: f32, _diff_trans: f32, _transmittance: f32) -> Bsdf {
    let eval = @ |in_dir : Vec3, out_dir : Vec3| {
        let lsurf = mat3x3_transpose(surf.local);
        let wo = vec3_normalize(mat3x3_mul(lsurf, out_dir));
        let wi = vec3_normalize(mat3x3_mul(lsurf, in_dir));
        let H  = vec3_normalize(vec3_add(wi,wo));

        let NdotV = cos_theta(wo);
        let NdotL = cos_theta(wi);

        let upper_hemisphere = NdotL >= 0 && NdotV >= 0;
        let diffuse_weight = (1 - metallic);

        let clearcoat_bsdf = make_clearcoat_bsdf(clearcoat, clearcoat_gloss, wo, H, wi, upper_hemisphere);
        let clearcoat_lobe = clearcoat_bsdf.eval(in_dir, out_dir);
        
        let diffuse_brdf = make_diffuse_brdf(roughness, flatness, wo, H, wi, diffuse_weight);
        let diffuse = diffuse_brdf.eval(in_dir, out_dir);

        let sheen_w = sheen_lobe(sheen, base_color, sheen_tint, H, wi);
       
        let specular_brdf = make_specular_brdf(anisotropic, roughness, base_color, relative_ior, specular_tint, metallic, ior, wo, H, wi);
        let specular = specular_brdf.eval(in_dir, out_dir);
        
        // ((diffuse * base_color) + sheen) * diffuse_weight
        let diff = color_mulf(color_add(color_mul(diffuse, base_color),sheen_w), diffuse_weight);

        color_mulf(color_add(color_add(specular, diff), clearcoat_lobe), math_builtins::fabs(NdotL))
    };

    Bsdf {
        eval = eval,
        pdf = @ |in_dir, _| cosine_hemisphere_pdf(positive_cos(in_dir, surf.local.col(2))),
        sample = @ |rnd, out_dir, _| {
            let sample = sample_cosine_hemisphere(randf(rnd), randf(rnd));
            let gdir   = vec3_normalize(mat3x3_mul(surf.local, sample.dir));
            let color  = color_mulf(eval(gdir, out_dir), sample.pdf);
            make_bsdf_sample(surf, if surf.is_entering { gdir } else { vec3_neg(gdir) }, sample.pdf, sample.dir.z, color, false)
        },
        is_specular = false
    }
}

fn @load_disney_bsdf(flags: u32, data: DeviceBuffer, stage: Stage3Accessor,  _ray: Ray, _hit: Hit, surf: SurfaceElement) -> Bsdf {
    let e0 = data.load_vec4(0);
    let e1 = data.load_vec4(4);
    let e2 = data.load_vec4(8);
    let e3 = data.load_vec4(12);
    let e4 = data.load_vec4(16);

    if (flags & bsdf_f_tex1) != 0 {
        let tex_id  = bitcast[i32](e0.x);
        let texture = stage.textures(tex_id);
        make_disney_bsdf(surf, texture(surf.tex_coords), e0.w,
                        e1.x, e1.y, e1.z, e1.w,
                        e2.x, e2.y, e2.z, e2.w,
                        e3.x, e3.y, e3.z, e3.w,
                        e4.x, e4.y)
    } else {
        make_disney_bsdf(surf, make_color(e0.x, e0.y, e0.z), e0.w,
                        e1.x, e1.y, e1.z, e1.w,
                        e2.x, e2.y, e2.z, e2.w,
                        e3.x, e3.y, e3.z, e3.w,
                        e4.x, e4.y)
    }
}