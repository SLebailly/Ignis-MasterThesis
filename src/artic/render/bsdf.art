// Opaque description of a point on a surface
struct SurfaceElement {
    is_entering: bool,  // True if the path enters the surface
    point:       Vec3,  // Point on the surface
    face_normal: Vec3,  // Geometric normal at the surface point
    prim_coords: Vec2,  // UV coordinates on the surface
    tex_coords:  Vec2,  // Vertex attributes (interpolated)
    local:       Mat3x3 // Local coordinate system at the surface point
}

fn make_invalid_surface_element() = SurfaceElement {
    is_entering = false,
    point       = make_vec3(0,0,0),
    face_normal = make_vec3(0,0,0),
    prim_coords = make_vec2(0,0),
    tex_coords  = make_vec2(0,0),
    local       = mat3x3_identity()
};

fn @invert_surface_element(surf: SurfaceElement) = SurfaceElement {
    is_entering = !surf.is_entering,
    point       = surf.point,
    face_normal = vec3_neg(surf.face_normal),
    prim_coords = surf.prim_coords,
    tex_coords  = surf.tex_coords,
    local       = flip_orthonormal_mat3x3(surf.local)
};

// Map local surface element to global surface element based on the given entity
fn @map_surface_element(surf: SurfaceElement, global_mat: Mat3x4, normal_mat: Mat3x3) = SurfaceElement {
    is_entering = surf.is_entering,
    point       = mat3x4_transform_point(global_mat, surf.point),
    face_normal = vec3_normalize(mat3x3_mul(normal_mat, surf.face_normal)),
    prim_coords = surf.prim_coords,
    tex_coords  = surf.tex_coords,
    local       = mat3x3_normalize_cols(mat3x3_matmul(normal_mat, surf.local))
};

// Result of sampling a BSDF
struct BsdfSample {
    in_dir: Vec3,  // Sampled direction
    pdf:    f32,   // BSDF value for the sample
    color:  Color, // Color of the sample, with cosine and pdf already applied
    eta:    f32    // Eta on the sampled direction
}

// Opaque BSDF structure
struct Bsdf {
    // Evaluates the reflectance of the material for the given pair of directions, the cosine term is already applied
    eval: fn (Vec3, Vec3) -> Color,
    // Evaluates the sampling probability density for a given pair of directions
    pdf: fn (Vec3, Vec3) -> f32,
    // Samples a direction
    sample: fn (&mut RndState, Vec3, bool) -> Option[BsdfSample],
    // Returns true if the material is purely specular
    is_specular: bool
}

// Creates a BSDF sample and checks that it lies on the right side of the surface
fn @make_bsdf_sample(surf: SurfaceElement, in_dir: Vec3, pdf: f32, color: Color, eta: f32, inverted: bool) -> Option[BsdfSample] {
    // Checks that the sample is above the surface (or under it if inverted is true)
    let valid = (pdf > 0) && (inverted ^ (vec3_dot(in_dir, surf.face_normal) > 0));
    make_option(BsdfSample {
        in_dir = in_dir,
        pdf    = if valid { pdf } else { 1 },
        color  = if valid { color } else { black },
        eta    = if valid { eta } else { 1 }
    })
}

fn @reject_bsdf_sample() = Option[BsdfSample]::None;

fn @scale_bsdf_sample(sample: BsdfSample, factor: f32) = BsdfSample {
    in_dir = sample.in_dir,
    pdf    = sample.pdf * factor,
    color  = color_mulf(sample.color, 1 / factor),
    eta    = sample.eta
};