fn @color_map(i: i32) = [ 
        make_color(0.450000, 0.376630, 0.112500),
        make_color(0.112500, 0.450000, 0.405978),
        make_color(0.112500, 0.450000, 0.229891),
        make_color(0.450000, 0.112500, 0.376630),
        make_color(0.435326, 0.450000, 0.112500),
        make_color(0.112500, 0.141848, 0.450000),
        make_color(0.435326, 0.112500, 0.450000),
        make_color(0.112500, 0.450000, 0.141848),
        make_color(0.347283, 0.450000, 0.112500),
        make_color(0.450000, 0.112500, 0.200543),
        make_color(0.112500, 0.229891, 0.450000),
        make_color(0.450000, 0.288587, 0.112500),
        make_color(0.347283, 0.112500, 0.450000),
        make_color(0.450000, 0.112500, 0.288587),
        make_color(0.450000, 0.112500, 0.112500),
        make_color(0.450000, 0.200543, 0.112500),
        make_color(0.171196, 0.450000, 0.112500),
        make_color(0.112500, 0.450000, 0.317935),
        make_color(0.259239, 0.450000, 0.112500),
        make_color(0.259239, 0.112500, 0.450000),
        make_color(0.112500, 0.405978, 0.450000),
        make_color(0.171196, 0.112500, 0.450000),
        make_color(0.112500, 0.317935, 0.450000)
    ](i%23);

fn @make_debug_renderer(debug_mode: i32, emitter: RayEmitterFactory) -> Renderer {
    @ |scene, device, iter| {
        let path_tracer = PathTracer {
            on_emit   = emitter(scene, device, iter),
            on_hit    = @ |_ray, hit, _state, surf, _mat| {
                match debug_mode {
                    1 => { // DEBUG_TANGENT
                        let n = surf.local.col(0);
                        make_option(make_color(fabs(n.x), fabs(n.y), fabs(n.z)))
                    },
                    2 => { // DEBUG_BITANGENT
                        let n = surf.local.col(1);
                        make_option(make_color(fabs(n.x), fabs(n.y), fabs(n.z)))
                    },
                    3 => { // DEBUG_GEOMETRY_NORMAL
                        let n = surf.face_normal;
                        make_option(make_color(fabs(n.x), fabs(n.y), fabs(n.z)))
                    },
                    4 => { // DEBUG_TEXCOORDS
                        let n = surf.tex_coords;
                        make_option(make_color(fabs(n.x), fabs(n.y), 0))
                    },
                    5 => { // DEBUG_UVCOORDS
                        let n = hit.uv_coords;
                        make_option(make_color(fabs(n.x), fabs(n.y), 0))
                    },
                    6 => { // DEBUG_HIT_DISTANCE
                        make_option(make_color(hit.distance, hit.distance, hit.distance))
                    },
                    7 => { // DEBUG_PRIM_ID
                        make_option(color_map(hit.prim_id))
                    },
                    8 => { // DEBUG_ENTITY_ID
                        make_option(color_map(hit.ent_id))
                    },
                    _ => { // DEBUG_NORMAL 
                        let n = surf.local.col(2);
                        make_option(make_color(fabs(n.x), fabs(n.y), fabs(n.z)))
                    }
                }
            },
            on_miss   = @ |_, _| Option[(Color)]::None,
            on_shadow = @ |_, _, _, _, _| Option[(Ray, Color)]::None,
            on_bounce = @ |_, _, _, _, _| Option[(Ray, RayState)]::None,
        };

        device.trace(scene, path_tracer, 1);
    }
}
