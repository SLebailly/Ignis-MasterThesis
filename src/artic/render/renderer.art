struct PathTracer {
    on_emit:   RayEmitter,
    on_hit:    fn (Ray, Hit, &mut RayState, SurfaceElement, Material) -> Option[Color],
    on_miss:   fn (Ray, &mut RayState) -> Option[Color],
    on_shadow: fn (Ray, Hit, &mut RayState, SurfaceElement, Material) -> Option[(Ray, Color)],
    on_bounce: fn (Ray, Hit, &mut RayState, SurfaceElement, Material) -> Option[(Ray, RayState)],
}

struct RayState {
    rnd:     RndState,
    contrib: Color,
    mis:     f32,
    depth:   i32
}

type RayEmitter = fn (i32, i32, i32, i32, i32) -> (Ray, RayState);
type RayEmitterFactory = fn (Scene, Device, i32) -> RayEmitter;

fn @make_ray_state(rnd: RndState, contrib: Color, mis: f32, depth: i32) -> RayState {
    RayState {
        rnd = rnd,
        contrib = contrib,
        mis = mis,
        depth = depth
    }
}

fn @make_camera_emitter(camera: Camera) -> RayEmitterFactory {
    @ |_scene, _device, iter| -> RayEmitter {
        @ |sample, x, y, width, height| {
            let mut hash = fnv_init();
            hash = fnv_hash(hash, sample as u32);
            hash = fnv_hash(hash, iter as u32);
            hash = fnv_hash(hash, x as u32);
            hash = fnv_hash(hash, y as u32);
            let mut rnd = hash /*as RndState*/;
            let kx = 2 * (x as f32 + randf(&mut rnd)) / (width  as f32) - 1;
            let ky = 1 - 2 * (y as f32 + randf(&mut rnd)) / (height as f32);
            let ray = camera.generate_ray(kx, ky);
            let state = make_ray_state(rnd, white, 0, 0);
            (ray, state)
        }
    }
}

fn @make_list_emitter(rays: &[Ray]) -> RayEmitterFactory {
    @ |_scene, _device, iter| -> RayEmitter {
        @ |sample, x, y, width, _height| {
            let mut hash = fnv_init();
            hash = fnv_hash(hash, sample as u32);
            hash = fnv_hash(hash, iter as u32);
            hash = fnv_hash(hash, x as u32);
            hash = fnv_hash(hash, y as u32);
            let rnd = hash /*as RndState*/;
            let id = y*width + x;
            let ray = if id < width { rays(id) } else { rays(0) };
            let state = make_ray_state(rnd, white, 0, 0);
            (ray, state)
        }
    }
}
