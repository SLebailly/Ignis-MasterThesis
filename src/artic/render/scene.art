// Compile-time scene data
struct Scene {
    num_entities: i32,
    num_shapes:   i32,
    num_lights:   i32,
    
    database: SceneAccessor,
    bvh:      SceneBvh
}

// Rendering device
struct Device {
    intrinsics: Intrinsics,

    trace:   fn (Scene, PathTracer, i32) -> (),
    present: fn () -> (),

    // General formats
    //load_image: fn (&[u8]) -> Image,
    //load_rays:  fn (i32, &[Ray]) -> &[Ray],
    //load_cdf1d: fn (&[u8]) -> CDF1D,
    //load_cdf2d: fn (&[u8]) -> CDF2D,
    //load_klems: fn (&[u8]) -> KlemsModel,

    load_scene_bvh:      fn () -> SceneBvh,
    load_scene_database: fn () -> SceneDatabase,
    load_entity_table:   fn (DynTable) -> EntityTable,
    load_shape_table:    fn (DynTable) -> ShapeTable,
    load_light_table:    fn (DynTable) -> LightTable,
    load_shader_table:   fn (DynTable) -> ShaderTable,
    load_bvh_table:      fn (DynTable) -> BVHTable
}

// Device buffer with granularity 4 bytes. The index is always given in multiple of 4. E.g., index 1 is byte 4!
struct DeviceBuffer {
    load_i32:    fn (i32) -> i32,
    load_f32:    fn (i32) -> f32,
    load_vec2:   fn (i32) -> Vec2,
    load_vec3:   fn (i32) -> Vec3,
    load_vec4:   fn (i32) -> Vec4,
    load_int2:   fn (i32) -> (i32, i32),
    load_int3:   fn (i32) -> (i32, i32, i32),
    load_int4:   fn (i32) -> (i32, i32, i32, i32),
    load_mat3x3: fn (i32) -> Mat3x3,
    load_mat4x4: fn (i32) -> Mat4x4,
    has_padding: bool // True if vec2, vec3, int2 and int3 are expected to be like vec4 or int4 in memory
}

type Renderer = fn (Scene, Device, i32) -> ();
type Shader   = fn (Ray, Hit, SurfaceElement) -> Material;
