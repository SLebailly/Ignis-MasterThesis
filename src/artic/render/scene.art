// Compile-time scene data
struct Scene {
    num_entities: i32,
    num_shapes:   i32,
    num_lights:   i32,

    entities: EntityMap,
    shapes:   fn (i32) -> Shape,
    lights:   fn (i32) -> Light,
    camera:   Camera, 
    bvh:      SceneBvh
}

// Rendering device
struct Device {
    intrinsics: Intrinsics,

    trace: fn (Scene, PathTracer, i32) -> (),
    present: fn () -> (),

    // General formats
    load_buffer: fn (&[u8]) -> DeviceBuffer,
    load_tri_bvh: fn (&[u8]) -> PrimBvh,
    load_scene_bvh: fn (&[u8]) -> SceneBvh,
    load_image: fn (&[u8]) -> Image,
    load_rays: fn (i32, &[Ray]) -> &[Ray],
    load_cdf1d: fn (&[u8]) -> CDF1D,
    load_cdf2d: fn (&[u8]) -> CDF2D,
    load_klems: fn (&[u8]) -> KlemsModel
}

struct DeviceBuffer {
    load_i32:    fn (i32) -> i32,
    load_f32:    fn (i32) -> f32,
    load_vec2:   fn (i32) -> Vec2,
    load_vec3:   fn (i32) -> Vec3,
    load_vec4:   fn (i32) -> Vec4,
    load_int2:   fn (i32) -> (i32, i32),
    load_int3:   fn (i32) -> (i32, i32, i32),
    load_int4:   fn (i32) -> (i32, i32, i32, i32),
    load_mat3x3: fn (i32) -> Mat3x3,
    load_mat4x4: fn (i32) -> Mat4x4,
}

type Renderer = fn (Scene, Device, i32) -> ();
type Shader   = fn (Ray, Hit, SurfaceElement) -> Material;
