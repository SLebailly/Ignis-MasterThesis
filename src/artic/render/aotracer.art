fn @make_ao_renderer(spp: i32, emitter: RayEmitterFactory) -> Renderer {
    let offset:f32 = 0.001;

    @ |scene, device, iter| {
        let math = device.intrinsics;
        let path_tracer = PathTracer {
            on_emit   = emitter(scene, device, iter),
            on_hit    = @ |_, _, _, _, _| Option[(Color)]::None,
            on_miss   = @ |_, _| Option[(Color)]::None,
            on_shadow = @ |ray, _, state, surf, _| {
                let mat = make_diffuse_bsdf(math, surf, white);
                let out_dir = vec3_neg(ray.dir);
                let sample  = mat.sample(&mut state.rnd, out_dir, false);

                if sample.pdf <= flt_eps { return(Option[(Ray, Color)]::None) }
                make_option(
                    make_ray(surf.point, sample.in_dir, offset, flt_max),
                    sample.color
                )
            },
            on_bounce = @ |_, _, _, _, _| Option[(Ray, RayState)]::None,
        };

        device.trace(scene, path_tracer, spp);
    }
}
