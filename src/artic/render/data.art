struct LookupEntry {
    type_id: u32, // Type ID depends on the actual dyntable usecase
    offset:  u32  // Offset to start of the DynTable in bytes
}

// TODO: Prolly the mother of all cache misses :O
struct DynTable {
    count:  u64,            // Entry counts
    header: &[LookupEntry], // Pointer to an array of lookup entries
    size:   u64,            // Size in bytes of the buffer 'start' is pointing to
    start:  &[u8]           // Pointer to an buffer of size 'size'
}

fn @get_lookup_entry(ind: u64, tbl: &DynTable) -> LookupEntry {
    // TODO: Check boundaries
    tbl.header(ind)
}

fn @get_table_entry[T](off: u64, tbl: &DynTable) -> &T {
    // TODO: Check boundaries
    (&tbl.start(off)) as &T
}

struct SceneDatabase {
    shapes:   DynTable,
    entities: DynTable,
    lights:   DynTable,
    shaders:  DynTable,
    bvhs:     DynTable
}

struct SceneAccessor {
    shapes:   ShapeTable, // Defined in shape.art
    entities: EntityTable,// Defined in entity.art
    lights:   LightTable, // Defined in light.art
    shaders:  ShaderTable,// Defined in material.art
    bvhs:     BVHTable    // Defined in intersection.art
}

