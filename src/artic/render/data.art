struct LookupEntry {
    type_id: u32, // Type ID depends on the actual dyntable usecase
    flags:   u32, // Optional flags, currently not used
    offset:  u64  // Offset to start of the DynTable in bytes
}

// TODO: Prolly the mother of all cache misses :O
struct DynTable {
    count:  u64,            // Entry counts
    header: &[LookupEntry], // Pointer to an array of lookup entries
    size:   u64,            // Size in bytes of the buffer 'start' is pointing to
    start:  &[u8]           // Pointer to an buffer of size 'size'
}

struct MapEntry {
    first:  u32,
    second: u32
}

struct MapTable {
    count:   u64,         // Entry counts
    entries: &[MapEntry], // Pointer to an array of lookup entries
}

struct SceneDatabase {
    shapes:   DynTable,
    entities: DynTable,
    bvhs:     DynTable
}

// Essentially the scene for shading. No bvh information used
// We could drop most shape and entity information as well
// if area lights are handled differently (in the future)
struct SceneAccessor {
    info:       SceneInfo,
    shapes:     ShapeTable,   // Defined in shape.art
    entities:   EntityTable,  // Defined in entity.art
}

fn @join_u32(a: u32, b: u32) = ((b as u64) << 32) | (a as u64); // TODO: This assumes little endian

fn @get_lookup_entry(ind: u64, tbl: &DynTable, acc: DeviceBufferAccessor) -> LookupEntry {
    // TODO: Check boundaries
    //tbl.header(ind)
    let data = acc((&tbl.header(ind)) as &[u8]);
    let (type_id, flags, off1, off2) = data.load_int4(0);
    LookupEntry {
         type_id = bitcast[u32](type_id),
         flags   = bitcast[u32](flags),
         offset  = join_u32(bitcast[u32](off1), bitcast[u32](off2))
    }
}

fn @get_table_ptr(off: u64, tbl: &DynTable) -> &[u8] {
    // TODO: Check boundaries
    &tbl.start(off) as &[u8]
}

fn @get_table_entry(off: u64, tbl: &DynTable, acc: DeviceBufferAccessor) -> DeviceBuffer {
    // TODO: Check boundaries
    acc(get_table_ptr(off, tbl))
}

//-----------------

// Mandatory information for the tracing part
struct TraceAccessor {
    info:       SceneInfo,
    shapes:     ShapeTable,  // Defined in shape.art
    entities:   EntityTable, // Defined in entity.art
    bvhs:       BVHTable     // Defined in intersection.art
}
