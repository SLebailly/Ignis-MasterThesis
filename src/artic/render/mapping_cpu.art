// Trace function ------------------------------------------------------------------

fn @cpu_parallel_tiles(body: fn (i32, i32, i32, i32) -> ()) =
    @|width: i32, height: i32, tile_width: i32, tile_height: i32, num_cores: i32| {
    if cpu_profiling_enabled && cpu_profiling_serial {
        for ymin in range_step(0, height, tile_height) {
            for xmin in range_step(0, width, tile_width) {
                let xmax = if xmin + tile_width  < width  { xmin + tile_width  } else { width  };
                let ymax = if ymin + tile_height < height { ymin + tile_height } else { height };
                @body(xmin, ymin, xmax, ymax)
            }
        }
    } else {
        let num_tiles_x = round_up(width , tile_width)  / tile_width;
        let num_tiles_y = round_up(height, tile_height) / tile_height;
        let num_tiles = num_tiles_x * num_tiles_y;
        let tiles_div = make_fast_div(num_tiles_x as u32);
        for i in parallel(num_cores, 0, num_tiles) {
            let y = fast_div(tiles_div, i as u32) as i32;
            let x = i - num_tiles_x * y;
            let xmin = x * tile_width;
            let ymin = y * tile_height;
            let xmax = min(xmin + tile_width,  width);
            let ymax = min(ymin + tile_height, height);
            @body(xmin, ymin, xmax, ymax)
        }
    }
};

#[export]
fn cpu_sort_primary(primary: &PrimaryStream, ray_begins: &mut [i32], ray_ends: &mut[i32], num_geometries: i32) -> i32 {
    // Count the number of rays per shader
    for i in range(0, num_geometries + 1) {
        ray_ends(i) = 0;
    }
    for i in range(0, primary.size) {
        ray_ends(primary.ent_id(i))++;
    }
    // Compute scan over shader bins
    let mut n = 0;
    for i in range(0, num_geometries + 1) {
        ray_begins(i) = n;
        n += ray_ends(i);
        ray_ends(i) = n;
    }

    // Sort by shader
    for i in range(0, num_geometries) {
        let (begin, end) = (ray_begins(i), ray_ends(i));
        let mut j = begin;
        while j < end {
            let ent_id = primary.ent_id(j);
            if ent_id != i {
                let k = ray_begins(ent_id)++;

                swap(&mut primary.rays.id(k),    &mut primary.rays.id(j));
                swap(&mut primary.rays.org_x(k), &mut primary.rays.org_x(j));
                swap(&mut primary.rays.org_y(k), &mut primary.rays.org_y(j));
                swap(&mut primary.rays.org_z(k), &mut primary.rays.org_z(j));
                swap(&mut primary.rays.dir_x(k), &mut primary.rays.dir_x(j));
                swap(&mut primary.rays.dir_y(k), &mut primary.rays.dir_y(j));
                swap(&mut primary.rays.dir_z(k), &mut primary.rays.dir_z(j));
                swap(&mut primary.rays.tmin(k),  &mut primary.rays.tmin(j));
                swap(&mut primary.rays.tmax(k),  &mut primary.rays.tmax(j));

                swap(&mut primary.ent_id(k),    &mut primary.ent_id(j));
                swap(&mut primary.prim_id(k),   &mut primary.prim_id(j));
                swap(&mut primary.t(k),         &mut primary.t(j));
                swap(&mut primary.u(k),         &mut primary.u(j));
                swap(&mut primary.v(k),         &mut primary.v(j));
                swap(&mut primary.rnd(k),       &mut primary.rnd(j));
                swap(&mut primary.mis(k),       &mut primary.mis(j));
                swap(&mut primary.contrib_r(k), &mut primary.contrib_r(j));
                swap(&mut primary.contrib_g(k), &mut primary.contrib_g(j));
                swap(&mut primary.contrib_b(k), &mut primary.contrib_b(j));
                swap(&mut primary.depth(k),     &mut primary.depth(j));
            } else {
                j++;
            }
        }
    }

    // Kill rays that have not intersected anything
    ray_ends(num_geometries - 1)
}

fn @cpu_compact_ray_stream(rays: RayStream, i: i32, j: i32, mask: bool) -> () {
    rays.org_x(i) = rv_compact(rays.org_x(j), mask);
    rays.org_y(i) = rv_compact(rays.org_y(j), mask);
    rays.org_z(i) = rv_compact(rays.org_z(j), mask);
    rays.dir_x(i) = rv_compact(rays.dir_x(j), mask);
    rays.dir_y(i) = rv_compact(rays.dir_y(j), mask);
    rays.dir_z(i) = rv_compact(rays.dir_z(j), mask);
    rays.tmin(i)  = rv_compact(rays.tmin(j),  mask);
    rays.tmax(i)  = rv_compact(rays.tmax(j),  mask);
}

fn @cpu_move_ray_stream(rays: RayStream, i: i32, j: i32) -> () {
    rays.org_x(i) = rays.org_x(j);
    rays.org_y(i) = rays.org_y(j);
    rays.org_z(i) = rays.org_z(j);
    rays.dir_x(i) = rays.dir_x(j);
    rays.dir_y(i) = rays.dir_y(j);
    rays.dir_z(i) = rays.dir_z(j);
    rays.tmin(i)  = rays.tmin(j);
    rays.tmax(i)  = rays.tmax(j);
}

fn @cpu_compact_primary(primary: &PrimaryStream, vector_width: i32, vector_compact: bool) -> i32 {
    fn cpu_compact_primary_specialized(primary2: &PrimaryStream) -> i32 {
        let mut k = 0;
        if vector_compact {
            for i in range_step(0, primary2.size, vector_width) {
                vectorize(vector_width, |j| { 
                    let id = primary.rays.id(i + j);
                    let mask = (id >= 0) & (i + j < primary2.size);

                    primary2.rays.id(k + j) = bitcast[i32](rv_compact(bitcast[f32](id), mask));

                    cpu_compact_ray_stream(primary2.rays, k + j, i + j, mask);

                    primary2.rnd(k + j)       = bitcast[u32](rv_compact(bitcast[f32](primary2.rnd(i + j)), mask));
                    primary2.mis(k + j)       = rv_compact(primary2.mis(i + j), mask);
                    primary2.contrib_r(k + j) = rv_compact(primary2.contrib_r(i + j), mask);
                    primary2.contrib_g(k + j) = rv_compact(primary2.contrib_g(i + j), mask);
                    primary2.contrib_b(k + j) = rv_compact(primary2.contrib_b(i + j), mask);
                    primary2.depth(k + j)     = bitcast[i32](rv_compact(bitcast[f32](primary2.depth(i + j)), mask));

                    k += cpu_popcount32(rv_ballot(mask));
                });
            }
        } else {
            for i in range(0, primary2.size) {
                let id = primary2.rays.id(i);
                if id >= 0 {
                    primary2.rays.id(k) = id;
                    cpu_move_ray_stream(primary2.rays, k, i);
                    primary2.rnd(k)       = primary2.rnd(i);
                    primary2.mis(k)       = primary2.mis(i);
                    primary2.contrib_r(k) = primary2.contrib_r(i);
                    primary2.contrib_g(k) = primary2.contrib_g(i);
                    primary2.contrib_b(k) = primary2.contrib_b(i);
                    primary2.depth(k)     = primary2.depth(i);
                    k++;
                }
            } 
        }
        k
    }
    $cpu_compact_primary_specialized(primary)
}

fn @cpu_compact_secondary(secondary: &SecondaryStream, vector_width: i32, vector_compact: bool) -> i32 {
    fn cpu_compact_secondary_specialized(secondary2: &SecondaryStream) -> i32 {
        let mut k = 0;
        if vector_compact {
            for i in range_step(0, secondary2.size, vector_width) {
                vectorize(vector_width, |j| {
                    let id = secondary2.rays.id(i + j);
                    let mask = (id >= 0) & (i + j < secondary2.size);

                    secondary2.rays.id(k + j) = bitcast[i32](rv_compact(bitcast[f32](id), mask));

                    cpu_compact_ray_stream(secondary2.rays, k + j, i + j, mask);

                    secondary2.prim_id(k + j) = bitcast[i32](rv_compact(bitcast[f32](secondary2.prim_id(i + j)), mask));
                    secondary2.color_r(k + j) = rv_compact(secondary2.color_r(i + j), mask);
                    secondary2.color_g(k + j) = rv_compact(secondary2.color_g(i + j), mask);
                    secondary2.color_b(k + j) = rv_compact(secondary2.color_b(i + j), mask);

                    k += cpu_popcount32(rv_ballot(mask));
                });
            }
        } else {
            for i in range(0, secondary2.size) {
                let id = secondary2.rays.id(i);
                if id >= 0 {
                    secondary2.rays.id(k) = id;
                    cpu_move_ray_stream(secondary2.rays, k, i);
                    secondary2.prim_id(k) = secondary2.prim_id(i);
                    secondary2.color_r(k) = secondary2.color_r(i);
                    secondary2.color_g(k) = secondary2.color_g(i);
                    secondary2.color_b(k) = secondary2.color_b(i);
                    k++;
                }
            }
        }
        k
    }
    $cpu_compact_secondary_specialized(secondary)
}

fn @cpu_generate_rays( primary: PrimaryStream
                     , capacity: i32
                     , emitter: RayEmitter
                     , id: &mut i32
                     , xmin: i32
                     , ymin: i32
                     , xmax: i32
                     , ymax: i32
                     , film_width: i32
                     , film_height: i32
                     , spp: i32
                     , vector_width: i32
                     ) -> i32 {
    let write_ray = make_ray_stream_writer(primary.rays, 1);
    let write_state = make_primary_stream_state_writer(primary, 1);
    let first_id = *id;
    let (tile_width, tile_height) = (xmax - xmin, ymax - ymin);
    let num_rays = cpu_intrinsics.min(spp * tile_width * tile_height - first_id, capacity - primary.size);
    let tile_div = make_fast_div(tile_width as u32);
    for i, _ in vectorized_range(vector_width, 0, num_rays) {
        let in_tile_id = first_id + i;

        // Compute x, y of ray within tile
        let sample = in_tile_id % spp;
        let in_tile_pixel = in_tile_id / spp;
        let in_tile_y = fast_div(tile_div, in_tile_pixel as u32) as i32;
        let in_tile_x = in_tile_pixel - in_tile_y * tile_width;
        let x = xmin + in_tile_x;
        let y = ymin + in_tile_y;
        let (ray, state) = @emitter(sample, x, y, film_width, film_height);
        let cur_ray = primary.size + i;
        write_ray(cur_ray, 0, ray);
        write_state(cur_ray, 0, state);
        primary.rays.id(cur_ray) = y * film_width + x;
    }
    *id = first_id + num_rays;
    primary.size + num_rays
}

fn @cpu_traverse_primary(scene: Scene, min_max: MinMax, primary: &PrimaryStream, single: bool, vector_width: i32) -> () {
    fn cpu_traverse_primary_specialized(scene2: Scene, primary2: &PrimaryStream) -> () {
        cpu_traverse(
            min_max,
            scene2,
            make_ray_stream_reader(primary2.rays, vector_width),
            make_primary_stream_hit_writer(*primary2, vector_width, scene.info.num_entities),
            vector_width /*packet_size*/,
            primary2.size / vector_width + select(primary2.size % vector_width != 0, 1, 0),
            single,
            false /*any_hit*/
        );
    }
    $cpu_traverse_primary_specialized(scene, primary);
}

fn @cpu_traverse_secondary(scene: Scene, min_max: MinMax, secondary: &SecondaryStream, single: bool, vector_width: i32) -> () {
    fn cpu_traverse_secondary_specialized(scene2: Scene, secondary2: &SecondaryStream) -> () {
        cpu_traverse(
            min_max,
            scene2,
            make_ray_stream_reader(secondary2.rays, vector_width),
            make_secondary_stream_hit_writer(*secondary2, vector_width),
            vector_width /*packet_size*/,
            secondary2.size / vector_width + select(secondary2.size % vector_width != 0, 1, 0),
            single,
            true /*any_hit*/
        );
    }
    $cpu_traverse_secondary_specialized(scene, secondary);
}

fn @cpu_shade(entity_id: i32, primary: &PrimaryStream, secondary: &SecondaryStream, scene: Scene, path_tracer: PathTracer, accumulate: fn (i32, Color) -> (), begin: i32, end: i32, vector_width: i32) -> () {
    // pe_info("entity_id", entity_id);
    // pe_info("shade:vector_width", vector_width);
    
    fn cpu_shade_specialized(entity_id2: i32, primary2: &PrimaryStream, secondary2: &SecondaryStream, begin2: i32, end2: i32) -> () {
        if begin == end { return() }

        let read_primary_ray    = make_ray_stream_reader(primary2.rays, 1);
        let read_primary_hit    = make_primary_stream_hit_reader(*primary2, 1);
        let read_primary_state  = make_primary_stream_state_reader(*primary2, 1);
        let write_primary_ray   = make_ray_stream_writer(primary2.rays, 1);
        let write_primary_state = make_primary_stream_state_writer(*primary2, 1);
        let write_secondary_ray = make_ray_stream_writer(secondary2.rays, 1);
        
        let entities  = scene.database.entities;
        let shapes    = scene.database.shapes;
        let shaders   = scene.database.shaders;
        let alights   = scene.database.arealights;
        let on_hit    = path_tracer.on_hit;
        let on_shadow = path_tracer.on_shadow;
        let on_bounce = path_tracer.on_bounce;
        let entity    = entities(entity_id2);
        let shape     = shapes(entity.shape_id);
        let shader    = shaders(entity.bsdf_id);
        //let light     = if unlikely(entity.emissive) { @alights(entity.light_id) } else { make_null_light() };

        for i, r_vector_width in vectorized_range(vector_width, begin2, end2) {
            let ray       = read_primary_ray(i, 0);
            let hit       = read_primary_hit(i, 0);
            let mut state = read_primary_state(i, 0);
            let ray_id    = primary2.rays.id(i);

            let local_ray = transform_norm_ray(ray, entity.local_mat);

            let lcl_surf = shape.surface_element(local_ray, hit);
            let glb_surf = map_surface_element(lcl_surf, entity.global_mat, entity.normal_mat);
            let bsdf     = shader(ray, hit, glb_surf);
            let mat      = if unlikely(entity.emissive) { let light = @alights(entity.light_id); make_emissive_material(glb_surf, bsdf, light) } else { make_material(bsdf) };

            // Execute hit point shading, and add the contribution of each lane to the frame buffer
            let hit_color = if let Option[Color]::Some(color) = @on_hit(ray, hit, &mut state, glb_surf, mat) { color } else { black };
            
            for lane in unroll(0, r_vector_width) {
                let j = bitcast[i32](rv_extract(bitcast[f32](ray_id), lane));
                accumulate(j,
                    make_color(
                        rv_extract(hit_color.r, lane),
                        rv_extract(hit_color.g, lane),
                        rv_extract(hit_color.b, lane)
                    )
                );
            }

            // Compute shadow rays
            if let Option[(Ray, Color)]::Some(new_ray, color) = @on_shadow(ray, hit, &mut state, glb_surf, mat) {
                write_secondary_ray(i, 0, new_ray);
                secondary2.color_r(i) = color.r;
                secondary2.color_g(i) = color.g;
                secondary2.color_b(i) = color.b;
                secondary2.rays.id(i) = ray_id;
            } else {
                secondary2.rays.id(i) = -1;
            }

            // Sample new rays
            if let Option[(Ray, RayState)]::Some(new_ray, new_state) = @on_bounce(ray, hit, &mut state, glb_surf, mat) {
                write_primary_ray(i, 0, new_ray);
                write_primary_state(i, 0, new_state);
            } else {
                primary2.rays.id(i) = -1;
            }
        }
    }
    $cpu_shade_specialized(entity_id, primary, secondary, begin, end);
}

fn @cpu_miss_shade(primary: &PrimaryStream, path_tracer: PathTracer, accumulate: fn (i32, Color) -> (), begin: i32, end: i32, vector_width: i32) -> () {
    fn cpu_miss_shade_specialized(primary2: &PrimaryStream, begin2: i32, end2: i32) -> () {
        if begin == end { return() }

        let read_primary_ray   = make_ray_stream_reader(primary2.rays, 1);
        let read_primary_state = make_primary_stream_state_reader(*primary2, 1);
        
        let on_miss = path_tracer.on_miss;

        for i, r_vector_width in vectorized_range(vector_width, begin2, end2) {
            let ray       = read_primary_ray(i, 0);
            let mut state = read_primary_state(i, 0);
            let ray_id    = primary2.rays.id(i);

            // Execute hit point shading, and add the contribution of each lane to the frame buffer
            let hit_color = if let Option[Color]::Some(color) = @on_miss(ray, &mut state) { color } else { black };

            for lane in unroll(0, r_vector_width) {
                let j = bitcast[i32](rv_extract(bitcast[f32](ray_id), lane));
                accumulate(j,
                    make_color(
                        rv_extract(hit_color.r, lane),
                        rv_extract(hit_color.g, lane),
                        rv_extract(hit_color.b, lane)
                    )
                );
            }

            primary2.rays.id(i) = -1;
        }
    }
    $cpu_miss_shade_specialized(primary, begin, end);
}

fn @cpu_get_film_data() -> (&mut [f32], i32, i32) {
    let mut film_pixels : &mut [f32];
    let mut film_width  : i32;
    let mut film_height : i32;
    ignis_get_film_data(0, &mut film_pixels, &mut film_width, &mut film_height);
    (film_pixels, film_width, film_height)
}

fn @cpu_trace( scene: Scene
             , path_tracer: PathTracer
             , min_max: MinMax
             , single: bool
             , tile_size: i32
             , spp: i32
             , num_cores: i32
             , vector_width: i32
             , vector_compact: bool
             ) -> () {
    let (film_pixels, film_width, film_height) = cpu_get_film_data();

    fn @accumulate(pixel: i32, color: Color) -> () {
        let inv = 1 / (spp as f32);
        film_pixels(pixel * 3 + 0) += color.r * inv;
        film_pixels(pixel * 3 + 1) += color.g * inv;
        film_pixels(pixel * 3 + 2) += color.b * inv;
    }

    let mut primary_counter = 0:i64;
    let mut bounces_counter = 0:i64;
    let mut shadow_counter  = 0:i64;
    let mut shading_counter = 0:i64;
    let mut total_counter   = 0:i64;
    let mut total_rays      = 0:i64;
    for xmin, ymin, xmax, ymax in cpu_parallel_tiles(film_width, film_height, tile_size, tile_size, num_cores) {
        cpu_profile(&mut total_counter, || {
            // Get ray streams/states from the CPU driver
            let mut primary   : PrimaryStream;
            let mut secondary : SecondaryStream;
            let capacity = spp * tile_size * tile_size;
            ignis_cpu_get_primary_stream(&mut primary,     capacity);
            ignis_cpu_get_secondary_stream(&mut secondary, capacity);

            let mut id = 0;
            let num_rays = spp * (ymax - ymin) * (xmax - xmin);
            while id < num_rays || primary.size > 0 {
                let first = id == 0;

                // (Re-)generate primary rays
                if primary.size < capacity {
                    // [Call to Emittor]
                    primary.size = cpu_generate_rays(primary, capacity, path_tracer.on_emit, &mut id, xmin, ymin, xmax, ymax, film_width, film_height, spp, vector_width);
                }

                if scene.info.num_entities == 0 {
                    // [Call to Shader]
                    cpu_miss_shade(primary, path_tracer, accumulate, 0, primary.size, vector_width);
                    primary.size = 0;
                } else {
                    // Trace primary rays
                    // [Call to Intersector]
                    cpu_profile(if first { &mut primary_counter } else { &mut bounces_counter }, || {
                        cpu_traverse_primary(scene, min_max, primary, single, vector_width);
                    });
                    atomic(1:u32, &mut total_rays, primary.size as i64, 7:u32, "");

                    // Sort hits by shader id, and filter invalid hits
                    let mut ray_begins : [i32 * 1024];
                    let mut ray_ends   : [i32 * 1024];
                    primary.size = cpu_sort_primary(primary, &mut ray_begins, &mut ray_ends, scene.info.num_entities);

                    // Perform (vectorized) shading
                    // [Call to Shader]
                    cpu_profile(&mut shading_counter, || {
                        let mut begin = 0;
                        for ent_id in range(0, scene.info.num_entities) {
                            let end = ray_ends(ent_id);
                            cpu_shade(ent_id, primary, secondary, scene, path_tracer, accumulate, begin, end, vector_width);
                            begin = end;
                        }

                        // Shade misses as well
                        let last = ray_ends(scene.info.num_entities);
                        if(begin < last) {
                            cpu_miss_shade(primary, path_tracer, accumulate, begin, last, vector_width);
                        }
                    });

                    // Filter terminated rays
                    secondary.size = primary.size;
                    primary.size   = cpu_compact_primary(primary, vector_width, vector_compact);

                    // Compact and trace secondary rays
                    // [Call to Intersector]
                    secondary.size = cpu_compact_secondary(secondary, vector_width, vector_compact);
                    if likely(secondary.size > 0) {
                        cpu_profile(&mut shadow_counter, || {
                            cpu_traverse_secondary(scene, min_max, secondary, single, vector_width);
                        });
                    }

                    // Add the contribution for secondary rays to the frame buffer
                    for i in range(0, secondary.size) {
                        if secondary.prim_id(i) < 0 {
                            let j = secondary.rays.id(i);
                            accumulate(j,
                                make_color(
                                    secondary.color_r(i),
                                    secondary.color_g(i),
                                    secondary.color_b(i)
                                )
                            );
                        }
                    }
                }
            }
        });
    }

    if cpu_profiling_enabled {
        fn @print_counter(counter: i64, name: &[u8]) -> () {
            print_string(name);
            print_string(": ");
            print_i64(counter);
            print_string(" (");
            print_i64(counter * 100 / total_counter);
            print_string("%)\n");
        }
        let other_counter = total_counter - primary_counter - bounces_counter - shadow_counter - shading_counter;
        print_counter(primary_counter, "primary");
        print_counter(bounces_counter, "bounces");
        print_counter(shadow_counter,  "shadow");
        print_counter(shading_counter, "shade");
        print_counter(other_counter,   "others");
        print_counter(total_counter,   "total");
        print_string("total rays: ");
        print_i64(total_rays);
        print_string("\n");
    }
}

// CPU device ----------------------------------------------------------------------

fn @make_cpu_buffer(p: &[u8]) = DeviceBuffer {
    load_f32    = @ |i| (p as &[f32])(i),
    load_i32    = @ |i| (p as &[i32])(i),
    load_vec2   = @ |i| { let q = p as &[f32]; make_vec2(q(i + 0), q(i + 1)) },
    load_vec3   = @ |i| { let q = p as &[f32]; make_vec3(q(i + 0), q(i + 1), q(i + 2)) },
    load_vec4   = @ |i| { let v = (&p(i * 4) as &[simd[f32 * 4]])(0); make_vec4(v(0), v(1), v(2), v(3)) },
    load_int2   = @ |i| { let q = p as &[i32]; (q(i + 0), q(i + 1)) },
    load_int3   = @ |i| { let q = p as &[i32]; (q(i + 0), q(i + 1), q(i + 2)) },
    //load_int4   = @ |i| { let q = p as &[i32]; (q(i + 0), q(i + 1), q(i + 2), q(i + 3)) },
    load_int4   = @ |i| { let v = ((&p(i * 4)) as &[simd[i32 * 4]])(0); (v(0), v(1), v(2), v(3)) },
    load_mat3x3 = @ |i| { let q = p as &[f32]; 
        make_mat3x3(make_vec3(q(i + 0), q(i + 1), q(i + 2)),
                    make_vec3(q(i + 3), q(i + 4), q(i + 5)),
                    make_vec3(q(i + 6), q(i + 7), q(i + 8))) },
    load_mat3x4 = @ |i| {
        let q  = &p(i * 4) as &[simd[f32 * 4]];
        let v0 = q(0);
        let v1 = q(1);
        let v2 = q(2);
        make_mat3x4(make_vec3(v0(0), v0(1), v0(2)),
                    make_vec3(v0(3), v1(0), v1(1)),
                    make_vec3(v1(2), v1(3), v2(0)),
                    make_vec3(v2(1), v2(2), v2(3)))
    },
    load_mat4x4 = @ |i| {
        let q  = &p(i * 4) as &[simd[f32 * 4]];
        let v0 = q(0);
        let v1 = q(1);
        let v2 = q(2);
        let v3 = q(3);
        make_mat4x4(make_vec4(v0(0), v0(1), v0(2), v0(3)),
                    make_vec4(v1(0), v1(1), v1(2), v1(3)),
                    make_vec4(v2(0), v2(1), v2(2), v2(3)),
                    make_vec4(v3(0), v3(1), v3(2), v3(3)))
    },
    has_alignment = false
};

fn @make_cpu_device(vector_compact: bool, single: bool, min_max: MinMax, vector_width: i32, num_cores: i32, tile_size: i32) = Device {
    trace = @ |scene, path_tracer, spp| {
        cpu_trace(
            scene,
            path_tracer,
            min_max,
            single,
            tile_size,
            spp,
            num_cores,
            vector_width,
            vector_compact
        )
    },
    present = @ || ignis_present(0),
    load_scene_bvh = @ || {
        if vector_width == 8 {
            let mut nodes: &[Node8];
            let mut objs: &[EntityLeaf1];
            ignis_load_bvh8_ent(0, &mut nodes, &mut objs);
            make_cpu_bvh8_ent(nodes, objs)
        } else {
            let mut nodes: &[Node4];
            let mut objs: &[EntityLeaf1];
            ignis_load_bvh4_ent(0, &mut nodes, &mut objs);
            make_cpu_bvh4_ent(nodes, objs)
        }
    },
    load_scene_database = @ || {
        let mut database: SceneDatabase;
        ignis_load_scene(0, &mut database);
        database
    },
    load_scene_info      = cpu_get_scene_info,
    load_buffer_table    = @ |dtb| make_buffer_table(dtb, make_cpu_buffer), // [Obsolete]
    load_texture_table   = @ |dtb, stage| make_texture_table(dtb, make_cpu_buffer, stage), // [Obsolete]
    load_entity_table    = @ |dtb, stage| make_entity_table(dtb, make_cpu_buffer, stage),
    load_shape_table     = @ |dtb, stage| make_shape_table(dtb, make_cpu_buffer, stage),
    load_light_table     = @ |dtb, stage| make_light_table(dtb, make_cpu_buffer, stage), // [Obsolete]
    load_arealight_table = @ |dtb, stage| make_arealight_table(dtb, make_cpu_buffer, stage), // [Obsolete]
    load_shader_table    = @ |dtb, stage| make_shader_table(dtb, make_cpu_buffer, stage), // [Obsolete]
    load_bvh_table       = @ |dtb| -> BVHTable {
        @ |id| {
            let entry  = get_lookup_entry(id as u64,   dtb, make_cpu_buffer); 
            let header = get_table_entry(entry.offset, dtb, make_cpu_buffer);
            let leaf_offset = header.load_i32(0) as u64;
    
            if vector_width == 8 {
                let nodes = get_table_ptr(entry.offset + 16 , dtb) as &[Node8];
                let tris  = get_table_ptr(entry.offset + 16 + leaf_offset * (sizeof[Node8]() as u64), dtb) as &[Tri4];
                make_cpu_bvh8_tri4(nodes, tris)
            } else {
                let nodes = get_table_ptr(entry.offset + 16, dtb) as &[Node4];
                let tris  = get_table_ptr(entry.offset + 16 + leaf_offset * (sizeof[Node4]() as u64), dtb) as &[Tri4];
                make_cpu_bvh4_tri4(nodes, tris)
            }
        } 
    },
    load_rays = @ || {
        let mut rays: &[StreamRay];
        ignis_load_rays(0, &mut rays);
        rays
    }
};

fn @make_avx512_device()      = make_cpu_device( true,  true, make_cpu_int_min_max(),16, 0, 32); // Not tested
fn @make_avx2_device()        = make_cpu_device( true,  true, make_cpu_int_min_max(), 8, 0, 16);
fn @make_avx_device()         = make_cpu_device( true,  true, make_cpu_int_min_max(), 8, 0, 16);
fn @make_sse42_device()       = make_cpu_device(false,  true, make_cpu_int_min_max(), 4, 0, 16);
fn @make_asimd_device()       = make_cpu_device(false, false, make_cpu_int_min_max(), 4, 0, 16);
fn @make_cpu_default_device() = make_cpu_device(false, false, make_default_min_max(), 1, 0, 16);

fn @cpu_get_scene_info() -> SceneInfo {
    let mut info : SceneInfo;
    ignis_load_scene_info(0, &mut info);
    info
}