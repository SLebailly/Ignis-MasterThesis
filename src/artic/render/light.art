// Result from sampling a light source
struct EmissionSample {
    pos:       Vec3,  // Position on the light source
    dir:       Vec3,  // Direction of the light going outwards
    intensity: Color, // Intensity along the direction
    pdf_area:  f32,   // Probability to sample the point on the light
    pdf_dir:   f32,   // Probability to sample the direction on the light, conditioned on the point on the light source
    cos:       f32    // Cosine between the direction and the light source geometry
}

// Result from sampling direct lighting from a light source
struct DirectLightSample {
    posdir:    Vec3,  // Position on the light source (or direction if infinite)
    intensity: Color, // Intensity along the direction
    pdf:       f32,   // Probability to sample the light. The pdf will be respective to the area if NOT infinite, else respective to solid angle 
    cos:       f32    // Cosine between the direction and the light source geometry
}

// Pdf properties of a light source
struct PdfValue {
    pdf_area: f32, // Probability to sample the point on the light
    pdf_dir:  f32  // Probability to sample the direction on the light, conditioned on the point on the light source
}

// Emission properties of a light source for direct illumination
struct DirectEmissionValue {
    light_id:  i32,   // Id of the light
    intensity: Color, // Intensity along the direction
    pdf_area:  f32,   // Probability to sample the point on the light, given respective to area measure
}

// Opaque light structure
struct Light {
    // ID of the light given by the system
    id: i32,
    // Samples direct illumination from this light source at the given point on a surface
    sample_direct: fn (&mut RndState, SurfaceElement) -> DirectLightSample,
    // Samples the emitting surface of the light
    sample_emission: fn (&mut RndState) -> EmissionSample,
    // Returns the emission properties of the light at a given point on its surface. The SurfaceElement is only valid if delta & infinite is false
    emission: fn (Ray, SurfaceElement) -> Color,
    // Returns the pdf properties of the light at a given point on its surface for direct illumination. 
    // In contrary to sample_direct, the surface element is on the light source. 
    // The SurfaceElement is only valid if delta & infinite is false
    // The pdf will be respective to the area if NOT infinite, else respective to solid angle 
    pdf_direct: fn (Ray, SurfaceElement) -> f32,
    // Returns the pdf properties of the light at a given point on its surface for emission. The SurfaceElement is only valid if delta & infinite is false
    pdf_emission: fn (Ray, SurfaceElement) -> PdfValue,
    // true if the light is a delta light (can not be hit by a ray)
    delta: bool,
    // true if the light is infinite
    infinite: bool
}

fn @make_emission_sample(pos: Vec3, dir: Vec3, intensity: Color, pdf_area: f32, pdf_dir: f32, cos: f32) = EmissionSample {
    pos       = pos,
    dir       = dir,
    intensity = intensity,
    pdf_area  = pdf_area,
    pdf_dir   = pdf_dir,
    cos       = cos
};

fn @make_direct_sample(posdir: Vec3, intensity: Color, pdf: f32, cos: f32) = DirectLightSample {
    posdir    = posdir,
    intensity = intensity,
    pdf       = pdf,
    cos       = cos
};

fn @make_pdf_value(pdf_area: f32, pdf_dir: f32) = PdfValue {
    pdf_area  = pdf_area,
    pdf_dir   = pdf_dir
};

fn @make_direct_emission_value(id: i32, intensity: Color, pdf_area: f32) = DirectEmissionValue {
    light_id  = id,
    intensity = intensity,
    pdf_area  = pdf_area
};

type LightTable = fn (i32) -> Light;
