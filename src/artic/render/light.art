// Result from sampling a light source
struct EmissionSample {
    pos:       Vec3,  // Position on the light source
    dir:       Vec3,  // Direction of the light going outwards
    intensity: Color, // Intensity along the direction
    pdf_area:  f32,   // Probability to sample the point on the light
    pdf_dir:   f32,   // Probability to sample the direction on the light, conditioned on the point on the light source
    cos:       f32    // Cosine between the direction and the light source geometry
}

// Result from sampling direct lighting from a light source
struct DirectLightSample {
    posdir:    Vec3,  // Position on the light source (or direction if infinite)
    intensity: Color, // Intensity along the direction
    pdf_area:  f32,   // Probability to sample the point on the light
    pdf_dir:   f32,   // Probability to sample the direction using emission sampling
    cos:       f32    // Cosine between the direction and the light source geometry
}

// Emission properties of a light source
struct EmissionValue {
    intensity: Color, // Intensity along the direction
    pdf_area:  f32,   // Probability to sample the point on the light
    pdf_dir:   f32    // Probability to sample the direction using emission sampling
}

// Opaque light structure
struct Light {
    // Samples direct illumination from this light source at the given point on a surface
    sample_direct: fn (&mut RndState, SurfaceElement) -> DirectLightSample,
    // Samples the emitting surface of the light
    sample_emission: fn (&mut RndState) -> EmissionSample,
    // Returns the emission properties of the light at a given point on its surface. The SurfaceElement is only valid if delta & infinite is false
    emission: fn (Ray, SurfaceElement) -> EmissionValue,
    // true if the light is a delta light (can not be hit by a ray)
    delta: bool,
    // true if the light is infinite
    infinite: bool
}

fn @make_emission_sample(pos: Vec3, dir: Vec3, intensity: Color, pdf_area: f32, pdf_dir: f32, cos: f32) = EmissionSample {
    pos       = pos,
    dir       = dir,
    intensity = intensity,
    pdf_area  = pdf_area,
    pdf_dir   = pdf_dir,
    cos       = cos
};

fn @make_direct_sample(posdir: Vec3, intensity: Color, pdf_area: f32, pdf_dir: f32, cos: f32) = DirectLightSample {
    posdir    = posdir,
    intensity = intensity,
    pdf_area  = pdf_area,
    pdf_dir   = pdf_dir,
    cos       = cos
};

fn @make_emission_value(intensity: Color, pdf_area: f32, pdf_dir: f32) = EmissionValue {
    intensity = intensity,
    pdf_area  = pdf_area,
    pdf_dir   = pdf_dir
};

type LightTable = fn (i32) -> Light;
