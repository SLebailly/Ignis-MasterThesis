// 9
struct RayStream {
    id:    &mut [i32], // this field is also used to indicate if the ray is alive
    org_x: &mut [f32],
    org_y: &mut [f32],
    org_z: &mut [f32],
    dir_x: &mut [f32],
    dir_y: &mut [f32],
    dir_z: &mut [f32],
    tmin:  &mut [f32],
    tmax:  &mut [f32],
}

// 9+6+8=23
struct PrimaryStream {
    rays:    RayStream,
    ent_id:  &mut [i32],
    prim_id: &mut [i32],
    t:       &mut [f32],
    u:       &mut [f32],
    v:       &mut [f32],
    rnd:     &mut [RndState],
    user:    [&mut [f32] * 8], // User defined stuff
    size:    i32,
    pad:     i32 // TODO: Needed for AMDGPU backend
}

// 9+6=15
struct SecondaryStream {
    rays:    RayStream,
    mat_id:  &mut [i32], // Mat ID + 1, Negative if miss, positive if hit 
    color_r: &mut [f32],
    color_g: &mut [f32],
    color_b: &mut [f32],
    size:    i32,
    pad:     i32 // TODO: Needed for AMDGPU backend
}

// Used on the host side only
struct TemporaryStorageHost {
    ray_begins: &mut [i32],
    ray_ends:   &mut [i32]
}

//////////// Ray
fn @make_ray_stream_reader(rays: RayStream, vector_width: i32) -> fn (i32, i32) -> Ray {
    @ |i, j| {
        let k = i * vector_width + j;
        make_ray(
            make_vec3(rays.org_x(k),
                      rays.org_y(k),
                      rays.org_z(k)),
            make_vec3(rays.dir_x(k),
                      rays.dir_y(k),
                      rays.dir_z(k)),
            rays.tmin(k),
            rays.tmax(k)
        )
    }
}

fn @make_ray_stream_writer(rays: RayStream, vector_width: i32) -> fn (i32, i32, Ray) -> () {
    @ |i, j, ray| {
        let k = i * vector_width + j;
        rays.org_x(k) = ray.org.x;
        rays.org_y(k) = ray.org.y;
        rays.org_z(k) = ray.org.z;
        rays.dir_x(k) = ray.dir.x;
        rays.dir_y(k) = ray.dir.y;
        rays.dir_z(k) = ray.dir.z;
        rays.tmin(k)  = ray.tmin;
        rays.tmax(k)  = ray.tmax;
    }
}

//////////// Hit
fn @make_primary_stream_hit_reader(primary: PrimaryStream, vector_width: i32) -> fn (i32, i32) -> Hit {
    @ |i, j| {
        let k = i * vector_width + j;
        make_hit(
            primary.ent_id(k),
            primary.prim_id(k),
            primary.t(k),
            make_vec2(primary.u(k),
                      primary.v(k))
        )
    }
}

fn @make_primary_stream_hit_writer(primary: PrimaryStream, vector_width: i32, invalid_id: i32) -> fn (i32, i32, Hit) -> () {
    @ |i, j, hit| {
        let no_hit = hit.ent_id == -1 /* || hit.prim_id == -1*/;
        let k = i * vector_width + j;
        primary.ent_id(k)  = if no_hit { invalid_id } else { hit.ent_id };
        primary.prim_id(k) = hit.prim_id;
        primary.t(k)       = hit.distance;
        primary.u(k)       = hit.prim_coords.x;
        primary.v(k)       = hit.prim_coords.y;
    }
}

fn @make_secondary_stream_hit_writer(secondary: SecondaryStream, vector_width: i32) -> fn (i32, i32, Hit) -> () {
    @ |i, j, hit| {
        let k      = i * vector_width + j;
        let mat_id = secondary.mat_id(k);
        secondary.mat_id(k) = select(hit.prim_id < 0, -abs(mat_id), abs(mat_id));
    }
}

//////////// RndState
fn @make_primary_stream_rnd_state_reader(primary: PrimaryStream, vector_width: i32) -> fn (i32, i32) -> RndState {
    @ |i, j| {
        let k = i * vector_width + j;
        primary.rnd(k)
    }
}

fn @make_primary_stream_rnd_state_writer(primary: PrimaryStream, vector_width: i32) -> fn (i32, i32, RndState) -> () {
    @ |i, j, state| {
        let k = i * vector_width + j;
        primary.rnd(k) = state;
    }
}

//////////// Payload
fn @make_primary_stream_payload_reader(primary: PrimaryStream, vector_width: i32) -> fn (i32, i32) -> RayPayload {
    @ |i, j| {
        let k = i * vector_width + j;

        let mut payload : RayPayload;

        for c in unroll(0, RayPayloadComponents) {
            payload.components(c) = primary.user(c)(k);
        }

        payload
    }
}

fn @make_primary_stream_payload_writer(primary: PrimaryStream, vector_width: i32) -> fn (i32, i32, RayPayload) -> () {
    @ |i, j, payload| {
        let k = i * vector_width + j;

        for c in unroll(0, RayPayloadComponents) {
            primary.user(c)(k) = payload.components(c);
        }
    }
}

//////////// Color
fn @make_secondary_stream_color_reader(secondary: SecondaryStream, vector_width: i32) -> fn (i32, i32) -> Color {
    @ |i, j| {
        let k = i * vector_width + j;
        make_color(secondary.color_r(k), secondary.color_g(k), secondary.color_b(k), 1/*Stream does not carry alpha information*/)
    }
}