// Abstract geometry object (tied to one device)
struct Shape {
    // Computes the surface element after an intersection on this geometry
    surface_element:           fn (Ray, Hit) -> SurfaceElement,
    surface_element_for_point: fn (i32, Vec2) -> SurfaceElement,
}

type ShapeTable  = fn (i32) -> Shape;

fn @make_shape_table(dtb: DynTable, acc: DeviceBufferAccessor, gen: fn (u32, DeviceBuffer) -> Shape) -> ShapeTable {
    @ |id| {
        let entry = get_lookup_entry(id as u64, dtb, acc);
        let data  = get_table_entry(entry.offset, dtb, acc);
        gen(entry.type_id, data)
    } 
}

fn @load_shape_table(device: Device, gen: fn (u32, DeviceBuffer) -> Shape) -> ShapeTable {
    let dtb = device.load_dyntable("shapes");
    make_shape_table(dtb, device.get_device_buffer_accessor(), gen)
}