// Device buffer. Granularity is 4 byte per index
struct DeviceBuffer {
    add_atomic_i32: fn (i32, i32) -> i32,
    load_i32:       fn (i32) -> i32,
    load_f32:       fn (i32) -> f32,
    load_vec2:      fn (i32) -> Vec2,
    load_vec3:      fn (i32) -> Vec3,
    load_vec4:      fn (i32) -> Vec4,
    load_int2:      fn (i32) -> (i32, i32),
    load_int3:      fn (i32) -> (i32, i32, i32),
    load_int4:      fn (i32) -> (i32, i32, i32, i32),
    load_mat3x3:    fn (i32) -> Mat3x3,
    load_mat3x4:    fn (i32) -> Mat3x4,
    load_mat4x4:    fn (i32) -> Mat4x4,
    store_i32:      fn (i32, i32) -> (),
    store_f32:      fn (i32, f32) -> (),
    store_vec2:     fn (i32, Vec2) -> (),
    store_vec3:     fn (i32, Vec3) -> (),
    store_vec4:     fn (i32, Vec4) -> (),
    store_int2:     fn (i32, i32, i32) -> (),
    store_int3:     fn (i32, i32, i32, i32) -> (),
    store_int4:     fn (i32, i32, i32, i32, i32) -> (),
    store_mat3x3:   fn (i32, Mat3x3) -> (),
    store_mat3x4:   fn (i32, Mat3x4) -> (),
    store_mat4x4:   fn (i32, Mat4x4) -> (),
    count:          i32, // Given in units of i32, not bytes! Zero if unknown
    has_alignment:  bool // True if vec2, vec3, int2 and int3 are expected to be like vec4 or int4 in memory
}

// Unsized device buffer accessor
type DeviceBufferAccessor = fn (&[u8]) -> DeviceBuffer;