struct PerspectiveSettings {
    eye:    Vec3,
    dir:    Vec3,
    up:     Vec3,
    right:  Vec3,
    width:  f32,
    height: f32
}

struct OrthogonalSettings {
    eye:    Vec3,
    dir:    Vec3,
    up:     Vec3,
    right:  Vec3,
    width:  f32,
    height: f32
}

struct FisheyeSettings {
    eye:    Vec3,
    dir:    Vec3,
    up:     Vec3,
    right:  Vec3,
    width:  f32,
    height: f32
}

struct RayListSettings {
    ray_count: i32,
    rays:      &[Ray]
}

struct Settings {
#if CAMERA_PERSPECTIVE
    camera: PerspectiveSettings,
#elif CAMERA_ORTHOGONAL
    camera: OrthogonalSettings,
#elif CAMERA_FISHEYE
    camera: OrthogonalSettings,
#else
    camera: RayListSettings,
#endif

    device: i32
}

#[export]
fn render(settings: &Settings, iter: i32) -> () {
// Setup device
#if DEVICE_AVX
    let device = make_avx_device();
#elif DEVICE_AVX_2
    let device = make_avx2_device();
#elif DEVICE_SSE42
    let device = make_sse42_device();
#elif DEVICE_ASIMD
    let device = make_asimd_device();
#elif DEVICE_NVVM
    let device = make_nvvm_device(settings.device, true);
#elif DEVICE_NVVM_MEGA
    let device = make_nvvm_device(settings.device, false);
#elif DEVICE_AMD
    let device = make_amdgpu_device(settings.device, true);
#elif DEVICE_AMD_MEGA
    let device = make_amdgpu_device(settings.device, false);
#else
    let device = make_cpu_default_device();
#endif

    let math = device.intrinsics;

#if CAMERA_LIST
    let emitter = make_list_emitter(settings.camera.ray_count, device.load_rays(settings.camera.ray_count, settings.camera.rays));
    let spp     = 1:i32;
#else 
    let emitter = make_camera_emitter();
    let spp     = 4:i32;
#endif
     
#if RENDERER_PATH
    let renderer = make_path_tracing_renderer(64 /*max_path_len*/, spp, emitter);
#else
    let renderer = make_debug_renderer(emitter);
#endif

#if CAMERA_PERSPECTIVE
    let camera = make_perspective_camera(
        math,
        settings.camera.eye,
        make_mat3x3(settings.camera.right, settings.camera.up, settings.camera.dir),
        settings.camera.width,
        settings.camera.height
    );
#elif CAMERA_ORTHOGONAL
    let camera = make_orthogonal_camera(
        math,
        settings.camera.eye,
        make_mat3x3(settings.camera.right, settings.camera.up, settings.camera.dir),
        settings.camera.width,
        settings.camera.height
    );
#elif CAMERA_FISHEYE
    let camera = make_fisheye_camera(
        math,
        settings.camera.eye,
        make_mat3x3(settings.camera.right, settings.camera.up, settings.camera.dir),
        settings.camera.width,
        settings.camera.height
    );
#endif
}
