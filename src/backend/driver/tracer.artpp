#[export]
fn ig_render(settings: &Settings) -> () {
#if DEVICE_AVX
    let device = make_avx_device();
#elif DEVICE_AVX2
    let device = make_avx2_device();
#elif DEVICE_AVX512
    let device = make_avx512_device();
#elif DEVICE_SSE42
    let device = make_sse42_device();
#elif DEVICE_ASIMD
    let device = make_asimd_device();
#elif DEVICE_NVVM
    let device = make_nvvm_device(settings.device);
#elif DEVICE_AMDGPU
    let device = make_amdgpu_device(settings.device);
#else
    let device = make_cpu_default_device();
#endif

    let dtb  = device.load_scene_database();
    let acc  = TraceAccessor {
        info     = device.load_scene_info(),
        shapes   = device.load_shape_table(dtb.shapes),
        entities = device.load_entity_table(dtb.entities),
        bvhs     = device.load_bvh_table(dtb.bvhs)
    };

    let scene = SceneGeometry {
        info     = acc.info,
        database = acc,
        bvh      = device.load_scene_bvh()
    };

    let pipeline = Pipeline {
        on_generate   = @ | id, size, xmin, ymin, xmax, ymax | -> i32 {
            ignis_handle_ray_generation(id, size, xmin, ymin, xmax, ymax)
        },
        on_miss_shade = @ | first, last | {
            ignis_handle_miss_shader(first, last);
        },
        on_hit_shade  = @ | entity_id, first, last| {
            ignis_handle_hit_shader(entity_id, first, last);
        }
    };

    device.trace(scene, pipeline, settings.spi);
    device.present();
}
