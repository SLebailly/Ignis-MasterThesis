[#export]
fn ig_emitter(settings: &Settings, iter: i32,
    primary: PrimaryStream, capacity: i32, 
    xmin: i32, xmax: i32, ymin: i32, ymax: i32) -> i32 {
#if DEVICE_AVX
    let device = make_avx_device();
#elif DEVICE_AVX2
    let device = make_avx2_device();
#elif DEVICE_AVX512
    let device = make_avx512_device();
#elif DEVICE_SSE42
    let device = make_sse42_device();
#elif DEVICE_ASIMD
    let device = make_asimd_device();
#elif DEVICE_NVVM
    let device = make_nvvm_device(settings.device);
#elif DEVICE_AMDGPU
    let device = make_amdgpu_device(settings.device);
#else
    let device = make_cpu_default_device();
#endif

#if CAMERA_PERSPECTIVE
    let camera = make_perspective_camera(
        settings.eye,
        make_mat3x3(settings.right, settings.up, settings.dir),
        settings.width,
        settings.height,
        settings.tmin,
        settings.tmax
    );
#elif CAMERA_ORTHOGONAL
    let camera = make_orthogonal_camera(
        settings.eye,
        make_mat3x3(settings.right, settings.up, settings.dir),
        settings.width,
        settings.height,
        settings.tmin,
        settings.tmax
    );
#elif CAMERA_FISHLENS
    let camera = make_fishlens_camera(
        settings.eye,
        make_mat3x3(settings.right, settings.up, settings.dir),
        settings.width,
        settings.height,
        settings.tmin,
        settings.tmax
    );
#endif
    // TODO: Custom...

#if CAMERA_LIST
    let emitterfactory = make_list_emitter_factory(device.load_rays());
#else 
    let emitterfactory = make_camera_emitter_factory(camera);
#endif

    let spp = 4;
    
    let emitter = emitterfactory(device, iter);
    let dev_emitter = device.make_emitter(emitter);  
    dev_emitter(primary, capacity, xmin, xmax, ymin, ymax, settings.width, settings.height, spp)
}
