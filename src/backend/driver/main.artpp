#[export]
fn ig_render(settings: &Settings, iter: i32) -> () {
#if DEVICE_AVX
    let device = make_avx_device();
#elif DEVICE_AVX2
    let device = make_avx2_device();
#elif DEVICE_AVX512
    let device = make_avx512_device();
#elif DEVICE_SSE42
    let device = make_sse42_device();
#elif DEVICE_ASIMD
    let device = make_asimd_device();
#elif DEVICE_NVVM
    let device = make_nvvm_device(settings.device,   true);
#elif DEVICE_NVVM_MEGA
    let device = make_nvvm_device(settings.device,   false);
#elif DEVICE_AMD
    let device = make_amdgpu_device(settings.device, true);
#elif DEVICE_AMD_MEGA
    let device = make_amdgpu_device(settings.device, false);
#else
    let device = make_cpu_default_device();
#endif

#if CAMERA_PERSPECTIVE
    let camera = make_perspective_camera(
        settings.eye,
        make_mat3x3(settings.right, settings.up, settings.dir),
        settings.width,
        settings.height,
        settings.tmin,
        settings.tmax
    );
#elif CAMERA_ORTHOGONAL
    let camera = make_orthogonal_camera(
        settings.eye,
        make_mat3x3(settings.right, settings.up, settings.dir),
        settings.width,
        settings.height,
        settings.tmin,
        settings.tmax
    );
#elif CAMERA_FISHLENS
    let camera = make_fishlens_camera(
        settings.eye,
        make_mat3x3(settings.right, settings.up, settings.dir),
        settings.width,
        settings.height,
        settings.tmin,
        settings.tmax
    );
#endif
#if CAMERA_LIST
    let emitter = make_list_emitter(device.load_rays());
#if !RENDERER_DEBUG
    let spp     = 1:i32;
#endif
#else 
    let emitter = make_camera_emitter(camera);
#if !RENDERER_DEBUG
    let spp     = 4:i32;
#endif
#endif
     
#if RENDERER_PATH
    let renderer = make_path_tracing_renderer(settings.max_path_len, spp, emitter);
#elif RENDERER_AO
    let renderer = make_ao_renderer(spp, emitter);
#else
    let renderer = make_debug_renderer(settings.debug_mode, emitter);
#endif

    let dtb  = device.load_scene_database();
    let stage1 = Stage1Accessor {
        info     = device.load_scene_info(),
        buffers  = device.load_buffer_table(dtb.buffers)
    };
    let stage2 = Stage2Accessor {
        info     = stage1.info,
        buffers  = stage1.buffers,
        textures = device.load_texture_table(dtb.textures, stage1)
    };
    let stage3 = Stage3Accessor {
        info     = stage2.info,
        buffers  = stage2.buffers,
        textures = stage2.textures,
        shapes   = device.load_shape_table(dtb.shapes, stage2),
        entities = device.load_entity_table(dtb.entities, stage2)
    };
    let acc  = SceneAccessor {
        info       = stage3.info,
        buffers    = stage3.buffers,
        textures   = stage3.textures,
        shapes     = stage3.shapes,
        entities   = stage3.entities,
        lights     = device.load_light_table(dtb.lights, stage3),
        arealights = device.load_arealight_table(dtb.lights, stage3),
        shaders    = device.load_shader_table(dtb.shaders, stage3),
        bvhs       = device.load_bvh_table(dtb.bvhs)
    };

    let scene = Scene {
        info     = acc.info,
        database = acc,
        bvh      = device.load_scene_bvh()
    };

    renderer(scene, device, iter);
    device.present();
}
