struct Settings {
    eye:       Vec3,
    dir:       Vec3,
    up:        Vec3,
    right:     Vec3,
    width:     f32,
    height:    f32,
    ray_count: i32,
    rays:      &[Ray],
    device:    i32
}

#[export]
fn ig_render(settings: &Settings, iter: i32) -> () {
#if DEVICE_AVX
    let device = make_avx_device();
#elif DEVICE_AVX2
    let device = make_avx2_device();
#elif DEVICE_AVX512
    let device = make_avx512_device();
#elif DEVICE_SSE42
    let device = make_sse42_device();
#elif DEVICE_ASIMD
    let device = make_asimd_device();
#elif DEVICE_NVVM
    let device = make_nvvm_device(settings.device,   true);
#elif DEVICE_NVVM_MEGA
    let device = make_nvvm_device(settings.device,   false);
#elif DEVICE_AMD
    let device = make_amdgpu_device(settings.device, true);
#elif DEVICE_AMD_MEGA
    let device = make_amdgpu_device(settings.device, false);
#else
    let device = make_cpu_default_device();
#endif

    let math = device.intrinsics;

#if CAMERA_PERSPECTIVE
    let camera = make_perspective_camera(
        math,
        settings.eye,
        make_mat3x3(settings.right, settings.up, settings.dir),
        settings.width,
        settings.height
    );
#elif CAMERA_ORTHOGONAL
    let camera = make_orthogonal_camera(
        math,
        settings.eye,
        make_mat3x3(settings.right, settings.up, settings.dir),
        settings.width,
        settings.height
    );
#elif CAMERA_FISHLENS
    let camera = make_fishlens_camera(
        math,
        settings.eye,
        make_mat3x3(settings.right, settings.up, settings.dir),
        settings.width,
        settings.height
    );
#endif
#if CAMERA_LIST
    let emitter = make_list_emitter(settings.ray_count, settings.rays);
#if !RENDERER_DEBUG
    let spp     = 1:i32;
#endif
#else 
    let emitter = make_camera_emitter(camera);
#if !RENDERER_DEBUG
    let spp     = 4:i32;
#endif
#endif
     
#if RENDERER_PATH
    let renderer = make_path_tracing_renderer(64 /*max_path_len*/, spp, emitter);
#else
    let renderer = make_debug_renderer(emitter);
#endif

    let dtb = device.load_scene_database();
    let acc = SceneAccessor {
        shapes   = device.load_shape_table(dtb.shapes),  
        entities = device.load_entity_table(dtb.entities),      
        lights   = device.load_light_table(dtb.lights),   
        shaders  = device.load_shader_table(dtb.shaders), 
        bvhs     = device.load_bvh_table(dtb.bvhs)                  
    };

    let scene = Scene {
        num_entities = dtb.entities.count as i32,
        num_shapes   = dtb.shapes.count   as i32,
        num_lights   = dtb.lights.count   as i32,
        database     = acc,
        bvh          = device.load_scene_bvh()
    };

    renderer(scene, device, iter);
    device.present();
}
